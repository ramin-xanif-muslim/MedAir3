{"version":3,"file":"static/js/838.09e850cf.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","pages/Analysis/modules/components/DeleteAnalysisTableRow/index.js","pages/Analysis/modules/components/AnalysisTable/AnalysisTableSetting.js","pages/Analysis/modules/components/AnalysisTable/index.js","pages/Analysis/modules/components/UploadForm/index.js","pages/Analysis/modules/components/AnalysisFormBlok/index.js","pages/Analysis/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo, useState } from 'react'\r\nimport { Button, Form, Space, message, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport dayjs from 'dayjs'\r\n// import { MaskedInput } from \"antd-mask-input\";\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const { patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const savePersonInfo = (patientId) => {\r\n            const {\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n            } = patientForm.getFieldsValue()\r\n\r\n            let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n\r\n            const sendObj = {\r\n                ...personInfoForm.getFieldsValue(),\r\n                birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n                alkogol: alkogol ? 1 : 0,\r\n                smoke: smoke ? 1 : 0,\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n                patientId,\r\n            };\r\n\r\n            postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n            savedDrawingCanvas.deseaseImageDesc =\r\n                JSON.stringify(descriptionsCanvas);\r\n\r\n            const sendObj = {\r\n                ...diseaseHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                familyMembersList,\r\n                deseaseImagesList: savedDrawingCanvas,\r\n                deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n            };\r\n            postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n            const sendObj = {\r\n                patientVisitsList: dataSourceVisitTable,\r\n                patientId\r\n            };\r\n            postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n            const sendObj = {\r\n                analyzesMediaList: dataSourceAnalysisTable,\r\n                patientId\r\n            };\r\n            postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n            const sendObj = {\r\n                ...treatmentHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                treatmentDynamics: dataSourceTreatmentTable,\r\n                recipeList,\r\n            };\r\n            postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction AnalysisTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.analysisTableSetting)\r\n    const setAnalysisTableSetting = useLocalStorageStore((store) => store.setAnalysisTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(analysisTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setAnalysisTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setAnalysisTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = analysisTableSetting\r\n            ? analysisTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [analysisTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteAnalysisTableRow from '../DeleteAnalysisTableRow'\r\nimport AnalysisTableSetting from './AnalysisTableSetting'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction AnalysisTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return analysisTableSetting?.find(i => i.dataIndex === dataIndex) ? analysisTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const { analyzesType, analyzesSubType, date } = record\r\n        form.setFieldsValue({\r\n            ...record,\r\n            date: dayjs(date),\r\n            analyzesSubType: analyzesType === \"Other healthcare area\" ? \"\" : analyzesSubType\r\n        })\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast Type\",\r\n                dataIndex: \"analyzesType\",\r\n                key: \"analyzesType\",\r\n                isVisible: visible('analyzesType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub Type\",\r\n                dataIndex: \"analyzesSubType\",\r\n                key: \"analyzesSubType\",\r\n                isVisible: visible('analyzesSubType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"analyzesDesc\",\r\n                key: \"analyzesDesc\",\r\n                isVisible: visible('analyzesDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Image\",\r\n                dataIndex: \"analyzesContentName\",\r\n                key: \"analyzesContentName\",\r\n                isVisible: visible('analyzesContentName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                width: 50,\r\n                align: 'center',\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceAnalysisTable.filter(i => i.id !== row.id)\r\n                        setDataSourceAnalysisTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteAnalysisTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, analysisTableSetting, dataSourceAnalysisTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <AnalysisTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceAnalysisTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTable)","import { Button, Image, Upload } from \"antd\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { UploadOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport sendRequest from \"../../../../../modules/api/sendRequest\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\n\r\nconst UploadForm = ({ form, selectedRowKey }) => {\r\n\r\n    const [imageUrl, setImageUrl] = useState();\r\n    const [imagePdfUrl, setImagePdfUrl] = useState();\r\n\r\n    const showImage = (url) => {\r\n        if (url) {\r\n            const lastDotIndex = url.lastIndexOf(\".\");\r\n            const result = url.substring(lastDotIndex + 1);\r\n            if (result === 'pdf') {\r\n                setImageUrl(null)\r\n                setImagePdfUrl(url)\r\n            } else {\r\n                setImagePdfUrl(null)\r\n                setImageUrl(url)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowKey) {\r\n            const url = form.getFieldsValue().analyzesContentUrl\r\n            showImage(url)\r\n        } else {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n        }\r\n    }, [selectedRowKey])\r\n\r\n    const beforeUpload = async (file) => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        let res = await sendRequest(\"analysesImage\", formData, \"post\");\r\n        if (res?.data) {\r\n            const url = res.data\r\n            showImage(url)\r\n            form.setFieldsValue({ analyzesContentName: file.name });\r\n            form.setFieldsValue({ analyzesContentUrl: res.data });\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handleDeleteImg = () => {\r\n        try {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n            form.setFieldsValue({ analyzesContentName: '', analyzesContentUrl: '' })\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                imageUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <Image width={200} src={imageUrl} />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : imagePdfUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <embed src={imagePdfUrl} type=\"application/pdf\" width=\"100%\" height=\"600px\" \r\n                        />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : (\r\n\r\n                    <Upload\r\n                        accept=\".png,.pdf,.jpeg,.jpg\"\r\n                        listType=\"picture\"\r\n                        beforeUpload={beforeUpload}\r\n                    >\r\n                        {!imageUrl ? (\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                    </Upload>\r\n\r\n                )}\r\n        </>\r\n    );\r\n};\r\nexport default memo(UploadForm);\r\n","import React, { memo, useState } from 'react'\r\nimport { Button, DatePicker, Form, Input, Select, Space, message } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport UploadForm from '../UploadForm';\r\nimport { useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\nimport sendRequest from '../../../../../modules/api/sendRequest';\r\n\r\nconst breastSelectOpnions = [\r\n    \"USM\",\r\n    \"Mammography\",\r\n    \"Tomosynthesis\",\r\n    \"MRT\",\r\n    \"KT\",\r\n    \"Biopsy\",\r\n    \"Сlips\",\r\n];\r\nconst other = [\r\n    \"Blood analysis\",\r\n    \"USM\",\r\n    \"X-ray\",\r\n    \"Bone osten\",\r\n    \"Bone naf\",\r\n    \"KT\",\r\n    \"Pet\",\r\n    \"Echocardiography\",\r\n    \"Electrocardiography\",\r\n    \"PET-CT\",\r\n    \"PET-MRI\",\r\n];\r\n\r\nconst fetchAnalysisId = async () => {\r\n  let res = await sendRequest('analysid')\r\n  if (res?.data) {\r\n    message.success()\r\n    return res.data\r\n  } else return 0\r\n}\r\n\r\nfunction AnalysisFormBlok(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const onFinish = async (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceAnalysisTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        const { date } = values\r\n                        return { \r\n                            ...values,\r\n                            date: dayjs(date).format('YYYY-MM-DD HH:mm:ss'),\r\n                         }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceAnalysisTable(newData)\r\n            } else {\r\n                setIsLoading(true)\r\n                let analyzesId = await fetchAnalysisId()\r\n                values.analyzesId = analyzesId\r\n                values.id = analyzesId\r\n                values.key = analyzesId\r\n                values.date = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n                setDataSourceAnalysisTable([...dataSourceAnalysisTable, values])\r\n                setIsLoading(false)\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='date'>\r\n                    <DatePicker />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Analyzes type' name=\"analyzesType\">\r\n                    <Select\r\n                        allowClear\r\n                    >\r\n                        <Select.Option value=\"Breast\">Breast</Select.Option>\r\n                        <Select.Option value=\"Other analysis\">Other analysis</Select.Option>\r\n                        <Select.Option value=\"Other healthcare area\">\r\n                            Other healthcare area\r\n                        </Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesType !== currentValues.analyzesType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n\r\n                        let selectOptions = []\r\n\r\n                        if (getFieldValue('analyzesType') === 'Breast') {\r\n                            selectOptions = breastSelectOpnions\r\n                        } else if (getFieldValue('analyzesType') === 'Other analysis') {\r\n                            selectOptions = other\r\n                        } else if (getFieldValue('analyzesType') === 'Other healthcare area') {\r\n                            return ''\r\n                        }\r\n\r\n                        return (\r\n                            <Form.Item label=\"Analysis sub type\" name=\"analyzesSubType\">\r\n\r\n                                <Select allowClear >\r\n                                    {\r\n                                        selectOptions.map((i) => (\r\n                                            <Select.Option key={i} value={i}>\r\n                                                {i}\r\n                                            </Select.Option>\r\n                                        ))\r\n                                    }\r\n                                </Select>\r\n\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentUrl\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentName\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n\r\n                <Form.Item hidden name='analyzesContentName'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='analyzesContentUrl'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='analysisTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                            loading={isLoading}\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesSubType !== currentValues.analyzesSubType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n                        let isShow = getFieldValue('analyzesSubType')\r\n\r\n                        if (isShow) {\r\n                            return (\r\n                                <UploadForm form={form} selectedRowKey={selectedRowKey} />\r\n                            )\r\n                        } else return ''\r\n                    }\r\n                    }\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisFormBlok)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport AnalysisTable from './modules/components/AnalysisTable';\r\nimport AnalysisFormBlok from './modules/components/AnalysisFormBlok';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Analysis() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <AnalysisFormBlok selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <AnalysisTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Analysis)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","personInfoForm","diseaseHistoryForm","familyMembersList","treatmentHistoryForm","_useMediaQuery","useMediaQuery","isLargerThan600","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","patientId","_patientForm$getField","getFieldsValue","patientName","patientSurName","patientPatronymic","_personInfoForm$getFi","birthDate","alkogol","smoke","sendObj","_objectSpread","dayjs","format","postPersonInfo","saveMorby","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","saveVisit","patientVisitsList","postVisit","saveAnalyses","analyzesMediaList","postAnalyses","saveTreatment","treatmentDynamics","postTreatment","handleSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","setTimeout","fetchPatientId","sent","Promise","all","stop","apply","arguments","boxShadow","p","bg","borderRadius","_jsxs","Form","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","sendRequest","abrupt","data","t0","_ref2","_callee2","obj","_context2","_x","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","parse","DeleteVisitsTableRow","handleDelete","AnalysisTableSetting","columns","setIsOpen","analysisTableSetting","useLocalStorageStore","setAnalysisTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","AnalysisTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","setDataSourceAnalysisTable","visible","defaultVisible","length","undefined","find","ellipsis","width","render","value","Tooltip","placement","align","row","index","DeleteAnalysisTableRow","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","analyzesType","analyzesSubType","date","setFieldsValue","onRowTable","UploadForm","imageUrl","setImageUrl","_useState3","_useState4","imagePdfUrl","setImagePdfUrl","showImage","url","lastDotIndex","lastIndexOf","substring","analyzesContentUrl","beforeUpload","file","formData","FormData","append","analyzesContentName","handleDeleteImg","error","console","log","_Fragment","Flex","gap","m","Image","src","_hover","ml","CloseCircleOutlined","height","Upload","accept","listType","UploadOutlined","breastSelectOpnions","other","fetchAnalysisId","AnalysisFormBlok","values","analyzesId","resetFields","SimpleGrid","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","DatePicker","Select","allowClear","shouldUpdate","prevValues","currentValues","getFieldValue","selectOptions","showCount","maxLength","rows","Analysis","_Form$useForm","my","border"],"sourceRoot":""}