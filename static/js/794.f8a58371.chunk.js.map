{"version":3,"file":"static/js/794.f8a58371.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/PatientForm/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","components/SelectInputs/PathologistSelectInput.js","pages/DiseaseHistory/modules/components/DiseaseHistoryFormBloke/index.js","modules/consts/familyMembersSelectOptions.js","pages/DiseaseHistory/modules/components/FamilyMembersList/ModalFamilyMemberForm.js","pages/DiseaseHistory/modules/components/FamilyMembersList/HeaderFamilyMembersList.js","pages/DiseaseHistory/modules/components/FamilyMembersList/index.js","pages/DiseaseHistory/modules/components/BlockForm/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/Canvas/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/index.js","pages/DiseaseHistory/modules/components/DeleteDiseaseHistoryTableRow/index.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/DiseaseHistoryTableSetting.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/index.js","pages/DiseaseHistory/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Input, InputNumber, Button, Space } from \"antd\";\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport React, { memo } from \"react\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useGlobalContext } from \"../../modules/context/index.js\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\n\r\nfunction PatientForm({ button, form, readOnly=false }) {\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { inPatientCollapse, setInPatientCollapse } = useGlobalContext()\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                form={form}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input readOnly={readOnly} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly={readOnly} addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={form}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input readOnly={readOnly} placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"phoneNumber\" name=\"phoneNumber\" label=\"Phone number\">\r\n                            <Input readOnly={readOnly} placeholder=\"Phone number\" />\r\n                            {/* <MaskedInput\r\n                                allowClear\r\n                                style={{ width: \"130px\" }}\r\n                                mask={\"000 000 00 00\"}\r\n                            /> */}\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                {button}\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(PatientForm)","import React, { memo } from 'react'\r\nimport PatientForm from '../PatientForm'\r\nimport { Button, Form, Space, message } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\n\r\n\r\n\r\nconst ProfilePatientButton = () => {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, familyMembersList, treatmentHistoryForm } = useGlobalContext()\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const handleSave = async () => {\r\n        message.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            if (Object.keys(personInfoForm.getFieldsValue()).length) {\r\n                const {\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                } = patientForm.getFieldsValue()\r\n\r\n                const sendObj = {\r\n                    ...personInfoForm.getFieldsValue(),\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                };\r\n\r\n                postPersonInfo(sendObj);\r\n            }\r\n            if (Object.keys(diseaseHistoryForm.getFieldsValue()).length) {\r\n                savedDrawingCanvas.deseaseImageDesc =\r\n                    JSON.stringify(descriptionsCanvas);\r\n\r\n                const sendObj = {\r\n                    ...diseaseHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n                    familyMembersList,\r\n                    deseaseImagesList: savedDrawingCanvas,\r\n                    deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n                };\r\n                postMorby(sendObj);\r\n            }\r\n            if (dataSourceVisitTable) {\r\n                const sendObj = {\r\n                    patientVisitsList: dataSourceVisitTable,\r\n                    patientId\r\n                };\r\n                postVisit(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    analyzesMediaList: dataSourceAnalysisTable,\r\n                    patientId\r\n                };\r\n                postAnalyses(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    ...treatmentHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n\t\t\t\t\ttreatmentDynamics: dataSourceTreatmentTable,\r\n\t\t\t\t\trecipeList,\r\n                };\r\n                postTreatment(sendObj);\r\n            }\r\n        }\r\n\r\n        //patient\r\n        console.log('patientForm', patientForm.getFieldsValue());\r\n\r\n        //vite\r\n        console.log('personInfoForm', personInfoForm.getFieldsValue());\r\n\r\n        //morby  \r\n        console.log('diseaseHistoryForm', diseaseHistoryForm.getFieldsValue());\r\n        console.log('dataSourceDiseaseHistoryTable', dataSourceDiseaseHistoryTable);\r\n        console.log('familyMembersList', familyMembersList);\r\n        console.log('savedDrawingCanvas', savedDrawingCanvas);\r\n        console.log('descriptionsCanvas', descriptionsCanvas);\r\n\r\n        //visits\r\n        console.log('dataSourceVisitTable', dataSourceVisitTable);\r\n\r\n        //analyses\r\n        console.log('dataSourceAnalysisTable', dataSourceAnalysisTable);\r\n\r\n        //treatment\r\n        console.log('treatmentHistoryForm', treatmentHistoryForm.getFieldsValue());\r\n        console.log('dataSourceTreatmentTable', dataSourceTreatmentTable);\r\n        console.log('recipeList', recipeList);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Form.Item noStyle>\r\n\r\n            <Space>\r\n                <Button\r\n                    onClick={handleSave}\r\n                    form='patientForm'\r\n                    type=\"primary\"\r\n                    htmlType='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <Button danger>\r\n                    Clear\r\n                </Button>\r\n            </Space>\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const { patientForm } = useGlobalContext()\r\n\r\n    return (\r\n        <PatientForm\r\n            form={patientForm}\r\n            button={<ProfilePatientButton />}\r\n            readOnly={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { Select } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchPathologistsPlace } from '../../modules/api';\r\n\r\nfunction PathologistSelectInput() {\r\n\r\n    const { data: pathologistsList, isLoading, refetch } = useQuery([\"managers/pathologists\"], fetchPathologistsPlace, {\r\n        enabled: false,\r\n    })\r\n\r\n    return (\r\n        <Select\r\n            allowClear\r\n            lazyLoad\r\n            loading={isLoading}\r\n            onFocus={refetch}\r\n        >\r\n            {pathologistsList?.map((i) => {\r\n                return (\r\n                    <Select.Option key={i.pathologistId} value={i.pathologistName}>\r\n                        {i.pathologistName}\r\n                    </Select.Option>\r\n                );\r\n            })}\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default memo(PathologistSelectInput)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Button, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport { PathologistSelectInput } from '../../../../../components/SelectInputs';\r\n\r\nfunction DiseaseHistoryFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const onFinish = (values) => {\r\n        if (selectedRowKey) {\r\n            let newData = dataSourceDiseaseHistoryTable.map((i) => {\r\n                if (i.id === values.id) return values\r\n                else return i\r\n            })\r\n            setDataSourceDiseaseHistoryTable(newData)\r\n        } else {\r\n            let id = new Date().getTime()\r\n            values.id = id\r\n            values.key = id\r\n            setDataSourceDiseaseHistoryTable([...dataSourceDiseaseHistoryTable, values])\r\n        }\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Breast\" name=\"complaintBreastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"no\">Missing</Select.Option>\r\n                        <Select.Option value=\"right\">Right</Select.Option>\r\n                        <Select.Option value=\"left\">Left</Select.Option>\r\n                        <Select.Option value=\"both\">Both</Select.Option>\r\n                        <Select.Option value=\"postmastektR\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"postmastektL\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"axilaR\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"axilaL\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestR\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"anotherBrestL\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestBoth\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Duration of illness\"\r\n                    name=\"durationOfIllness\"\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Complaints\" name=\"complaintDescription\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkEr') === 1 ? (\r\n                                <Form.Item noStyle name=\"erN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkPr') === 1 ? (\r\n                                <Form.Item noStyle name=\"prN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" name=\"her2\">\r\n                    <InputNumber\r\n                        min={0}\r\n                        max={3}\r\n                        defaultValue={0}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('her2') === 2 ? (\r\n                            <Form.Item label=\"FT\" name=\"her2FT\">\r\n                                <InputNumber />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <PathologistSelectInput />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='diseaseHistoryFormBloke'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryFormBloke)","\r\n\r\nexport const familyMembersSelectOptions = [\r\n    'Mother',\r\n    'Father',\r\n    'Maternal grandmother',\r\n    'Paternal grandmother',\r\n    'Paternal grandfather',\r\n    'Maternal grandfather',\r\n    'Brother',\r\n    'Sister',\r\n    \"Father's brother\",\r\n    \"Mother's brother\",\r\n    \"Father's sister\",\r\n    \"Mother's sister\",\r\n]","import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy'\r\n\r\nfunction ModalFamilyMemberForm(props) {\r\n\r\n    const { isOpen, onClose, initialRef, finalRef, title, handleEdit, isEdit, handleAdd, form } = props\r\n\r\n\r\n\r\n    const onFinish = () => {\r\n        try {\r\n            const values = form.getFieldsValue()\r\n            const copyValues = deepCopy(values)\r\n            if (isEdit) {\r\n                handleEdit(copyValues)\r\n            }\r\n            else {\r\n                handleAdd(copyValues)\r\n            }\r\n            form.resetFields()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        form.resetFields()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>{title}</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n\r\n                    <Form\r\n                        form={form}\r\n                        labelWrap\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 16,\r\n                        }}\r\n                        style={{\r\n                            maxWidth: 600,\r\n                        }}\r\n                    >\r\n\r\n                        <Form.Item hidden name=\"Id\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item hidden name=\"familyMember\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Trauma\" name=\"familyMemberInjury\">\r\n                            <Input\r\n                                ref={initialRef}\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Deceased of cancer\" name=\"familyMemberDied\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Living with cancer\" name=\"familyMemberCurrentCancer\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Description\" name=\"familyMemberDesc\">\r\n                            <Input.TextArea showCount maxLength={3000}\r\n                                rows={3}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button\r\n                        type='primary'\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                        onClick={onFinish}\r\n                    >\r\n                        {isEdit ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalFamilyMemberForm","import React, { memo, useState } from 'react'\r\nimport { familyMembersSelectOptions } from '../../../../../modules/consts'\r\nimport { Alert, Button, Form, Select, Space } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nconst arrSeveralAdd = [\r\n    \"Brother\",\r\n    \"Sister\",\r\n    \"Father's-brother\",\r\n    \"Mother's-brother\",\r\n    \"Father's-sister\",\r\n    \"Mother's-sister\",\r\n];\r\n\r\nfunction HeaderFamilyMembersList() {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n    const [selectedMember, setSelectedMember] = useState()\r\n    const [countAddedFM, setCountAddedFM] = useState({});\r\n    const [isShowAlert, setIsShowAlert] = useState(false)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = (memberData) => {\r\n        memberData.familyMember = selectedMember\r\n        let id = new Date().getTime()\r\n        memberData.Id = id\r\n        setFamilyMembersList(prev => [...prev, memberData])\r\n        onClose()\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setIsShowAlert(false)\r\n        setSelectedMember(e)\r\n    }\r\n\r\n    const handleCloseAlert = () => {\r\n        setIsShowAlert(false)\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (!selectedMember) {\r\n            return\r\n        } else {\r\n            const findEl = familyMembersList.find((i) => i.familyMember === selectedMember)\r\n\r\n            if (!findEl) {\r\n                setSelectedMember(selectedMember)\r\n                onOpen()\r\n            } else if (arrSeveralAdd.includes(selectedMember)) {\r\n                let s = selectedMember;\r\n                let count = countAddedFM[selectedMember] || 2;\r\n                let newSelectedMember = s + \"_\" + count;\r\n                count += 1;\r\n                setCountAddedFM({ [selectedMember]: count });\r\n                setSelectedMember(newSelectedMember)\r\n                onOpen()\r\n            } else {\r\n                setIsShowAlert(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Form.Item labelAlign='left' label=\"Family members\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                    <Select\r\n                        onChange={onChange}\r\n                        allowClear\r\n                        ref={finalRef}\r\n                    >\r\n                        {familyMembersSelectOptions.map(i => {\r\n                            return (\r\n                                <Select.Option key={i} value={i}>{i}</Select.Option>\r\n                            )\r\n                        })}\r\n                    </Select>\r\n                    <Button disabled={!selectedMember} onClick={onClick}><PlusOutlined /></Button>\r\n                </Space.Compact>\r\n            </Form.Item>\r\n\r\n            {isShowAlert && <Alert\r\n                closable\r\n                afterClose={handleCloseAlert} \r\n                message=\"Selected family member already added\" type=\"info\"\r\n\r\n            />}\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedMember}\r\n                handleAdd={handleAdd}\r\n                form={form}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderFamilyMembersList)","import React, { memo, useState } from 'react'\r\nimport { Form, List } from 'antd'\r\nimport { Box, Flex, IconButton, Spacer, useDisclosure } from '@chakra-ui/react'\r\nimport HeaderFamilyMembersList from './HeaderFamilyMembersList'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\nfunction FamilyMembersList() {\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const [selectedListItem, setSelectedListItem] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n\r\n    const onClick = (item) => {\r\n        form.setFieldsValue(item)\r\n        setSelectedListItem(item)\r\n        onOpen()\r\n    }\r\n\r\n    const handleEdit = (memberData) => {\r\n        const newList = familyMembersList.map(i => {\r\n            if (i.Id === memberData.Id) return memberData\r\n            else return i\r\n        })\r\n        onClose()\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n    const handleDelete = (e,item) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newList = familyMembersList.filter(i => i.Id !== item.Id)\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n\r\n    return (\r\n        <Form.Item noStyle >\r\n\r\n            <List\r\n                size=\"small\"\r\n                header={<HeaderFamilyMembersList />}\r\n                bordered\r\n                dataSource={familyMembersList}\r\n                renderItem={(item, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={item.Id}\r\n                            onClick={() => onClick(item)}\r\n                            _hover={{ bg: 'pink.200' }}\r\n                            cursor='pointer'\r\n                        >\r\n                            <List.Item>\r\n                                <Flex w='100%'>\r\n                                    <Box>{index + 1}. {item.familyMember}</Box>\r\n                                    <Spacer />\r\n                                    <IconButton\r\n                                        isRound\r\n                                        variant='ghost'\r\n                                        fontWeight='bold'\r\n                                        size='xs'\r\n                                    >\r\n                                        <Box onClick={(e) => handleDelete(e,item)} color='pink.500'>X</Box>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            </List.Item>\r\n                        </Box>\r\n                    )\r\n                }}\r\n            />\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedListItem?.familyMember}\r\n                isEdit={true}\r\n                handleEdit={handleEdit}\r\n                form={form}\r\n            />\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nexport default memo(FamilyMembersList)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Input, Radio, Select, Form } from 'antd';\r\nimport React, { memo } from 'react'\r\nimport FamilyMembersList from '../FamilyMembersList';\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js';\r\n\r\nfunction BlockForm() {\r\n\r\n    const { diseaseHistoryForm } = useGlobalContext()\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n                    <Input.TextArea showCount maxLength={3000} allowClear rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Received traumas\" name=\"receivedTraumas\">\r\n                    <Radio.Group\r\n                    >\r\n                        <Radio value={1}>Yes</Radio>\r\n                        <Radio value={2}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.receivedTraumas !== currentValues.receivedTraumas}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('receivedTraumas') === 1 ? (\r\n                            <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                                <Input.TextArea showCount maxLength={3000} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Benign\" name=\"beniqen\">\r\n                    <Select>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <FamilyMembersList />\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(BlockForm)\r\n\r\n\r\n\r\n","import { Box, Circle } from '@chakra-ui/react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport React, { memo, useEffect, useRef, useState } from 'react'\r\nimport CanvasDraw from 'react-canvas-draw'\r\nimport { useStore } from '../../../../../../modules/store'\r\n\r\n\r\nfunction CanvasComponent({ image, imageName }) {\r\n\r\n    const descriptionsCanvas = useStore(store => store.descriptionsCanvas)\r\n    const setDescriptionsCanvas = useStore(store => store.setDescriptionsCanvas)\r\n\r\n    const savedDrawingCanvas = useStore(store => store.savedDrawingCanvas)\r\n    const setSavedDrawingCanvas = useStore(store => store.setSavedDrawingCanvas)\r\n\r\n    const refCanvas = useRef(null);\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const [colorCanvas, setColorCanvas] = useState('green')\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\r\n\r\n    const [X_PositionMouse, setX_PositionMouse] = useState()\r\n    const [Y_PositionMouse, setY_PositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setX_PositionMouse(event.nativeEvent.offsetX);\r\n        setY_PositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        arr.forEach((i, index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if (isY === true && isX === true && !isIf) {\r\n                    isIf = true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if (d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({ num, index: indexD })\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    const description = descriptionsCanvas[imageName + i.brushColor + findEl.num]\r\n                    form.setFieldsValue({ description })\r\n                    setColorCanvas(i.brushColor)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (disableCanvas) {\r\n            let data = refCanvas.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, X_PositionMouse, Y_PositionMouse)\r\n        }\r\n    };\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n    }\r\n\r\n    const onChangeCanvas = () => {\r\n        form.setFieldsValue({ description: '' })\r\n        setDisableSaveBtn(false)\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        if (Object.hasOwn(descriptionsCanvas, objProperty)) {\r\n            form.setFieldsValue({ description: descriptionsCanvas[objProperty] })\r\n        } else {\r\n            form.setFieldsValue({ description: '' })\r\n        }\r\n    }, [colorCanvas]);\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        descriptionsCanvas[objProperty] = e.target.value;\r\n        setDescriptionsCanvas(descriptionsCanvas);\r\n    };\r\n\r\n    const computationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = refCanvas.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if (i.brushColor === colorCanvas) {\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setBrushRadius(20);\r\n        setDisableCanvas(false);\r\n    };\r\n    const handleSave = () => {\r\n        setBrushRadius(0);\r\n        setDisableSaveBtn(true);\r\n        setDisableCanvas(true);\r\n        let data = refCanvas.current.getSaveData();\r\n        savedDrawingCanvas[imageName] = data;\r\n        setSavedDrawingCanvas(savedDrawingCanvas);\r\n    };\r\n    const handleClear = () => {\r\n        refCanvas.current.undo();\r\n    };\r\n\r\n    console.log('savedDrawingCanvas',savedDrawingCanvas);\r\n\r\n    return (\r\n        <Box bg='pink.100' p='1' borderRadius='10px'>\r\n\r\n            <Form\r\n                form={form}\r\n                onFieldsChange={onFieldsChange}\r\n                labelAlign='left'\r\n                style={{ width: '100%' }}\r\n            >\r\n\r\n                <Space.Compact width='100%' style={{ width: \"100%\", alignItems: 'center' }}>\r\n\r\n                    <Form.Item\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        <Form.Item noStyle name=\"colorCanvas\">\r\n                            <Select\r\n                                onSelect={(e) => setColorCanvas(e)}\r\n                                defaultValue='green'\r\n                                suffixIcon={<Circle mr='4' size='20px' bg={colorCanvas} />}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n                                <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n                                <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n                                <Select.Option value=\"blue\">My operation</Select.Option>\r\n                                <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button onClick={handleAdd}>Edit</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button disabled={disableSaveBtn} type='primary' onClick={handleSave}>Save</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button onClick={handleClear}>Clear</Button>\r\n                    </Form.Item>\r\n\r\n                </Space.Compact>\r\n\r\n                <Form.Item label='Description' name='description'>\r\n                    <Input.TextArea showCount maxLength={3000}\r\n                        onChange={onChangeDescription}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Box\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                position=\"relative\"\r\n                paddingBottom=\"100%\"\r\n                onMouseMove={handleMouseMove}\r\n                onClick={onClick}\r\n            >\r\n                <CanvasDraw\r\n                    style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n                    imgSrc={image}\r\n                    className=\"canvas-draw\"\r\n                    brushColor={colorCanvas}\r\n                    ref={refCanvas}\r\n                    onChange={onChangeCanvas}\r\n                    disabled={disableCanvas}\r\n                    brushRadius={brushRadius}\r\n                    saveData={savedDrawingCanvas[imageName] || \"\"\r\n                    }\r\n                />\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(CanvasComponent)","import { Grid, GridItem } from '@chakra-ui/react'\r\nimport React, { memo } from 'react'\r\nimport Canvas from './Canvas'\r\nimport image from '../../../../../modules/images/man.png'\r\n// import image from '../../../../../modules/images/man.png'\r\n\r\n// const image = '/images/deseaseImage1Data.png'\r\n// const image = '../../../../../modules/images/man.png'\r\n\r\nfunction BlockCanvas() {\r\n\r\n    return (\r\n        <Grid\r\n            templateRows='repeat(2, 1fr)'\r\n            templateColumns='repeat(5, 1fr)'\r\n            gap={4}\r\n            borderRadius='10px'\r\n        >\r\n            <GridItem borderRadius='10px' rowSpan={2} colSpan={[5, 5, 5, 3]} >\r\n\r\n                <Canvas imageName='image1' image={image} />\r\n\r\n            </GridItem>\r\n\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]} >\r\n\r\n                <Canvas imageName='image2' image={image} />\r\n\r\n            </GridItem>\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]}>\r\n\r\n                <Canvas imageName='image3' image={image} />\r\n\r\n            </GridItem>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(BlockCanvas)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteDiseaseHistoryTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteDiseaseHistoryTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction DiseaseHistoryTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    const setDiseaseHistoryTableSetting = useLocalStorageStore((store) => store.setDiseaseHistoryTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(diseaseHistoryTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setDiseaseHistoryTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setDiseaseHistoryTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = diseaseHistoryTableSetting\r\n            ? diseaseHistoryTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [diseaseHistoryTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteDiseaseHistoryTableRow from '../DeleteDiseaseHistoryTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport DiseaseHistoryTableSetting from './DiseaseHistoryTableSetting';\r\n\r\nfunction DiseaseHistoryTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    \r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return diseaseHistoryTableSetting?.find(i => i.dataIndex === dataIndex) ? diseaseHistoryTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        form.setFieldsValue(record)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n                isVisible: visible('complaintBreastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n                isVisible: visible('durationOfIllness'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n                isVisible: visible('complaintDescription'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                isVisible: visible('ihkEr'),\r\n                ellipsis: true,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"ER N\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                isVisible: visible('ihkPr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR N\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"HER2 FT\",\r\n                dataIndex: \"her2FT\",\r\n                key: \"her2FT\",\r\n                isVisible: visible('her2FT'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceDiseaseHistoryTable.filter(i => i.id !== row.id)\r\n                        setDataSourceDiseaseHistoryTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteDiseaseHistoryTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, diseaseHistoryTableSetting, dataSourceDiseaseHistoryTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <DiseaseHistoryTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceDiseaseHistoryTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTable)","import React, { memo, useState } from 'react'\r\nimport DiseaseHistoryFormBloke from './modules/components/DiseaseHistoryFormBloke'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport BlockForm from './modules/components/BlockForm'\r\nimport BlockCanvas from './modules/components/BlockCanvas'\r\nimport { Box } from '@chakra-ui/react'\r\nimport DiseaseHistoryTable from './modules/components/DiseaseHistoryTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction DiseaseHistory() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <DiseaseHistoryFormBloke form={form} selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <DiseaseHistoryTable form={form} selectedRowKey={selectedRowKey}\r\n                        setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockForm />\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockCanvas />\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistory)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","PatientForm","button","form","_ref$readOnly","readOnly","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","_useGlobalContext","useGlobalContext","inPatientCollapse","setInPatientCollapse","boxShadow","p","bg","borderRadius","_jsxs","Form","id","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","ProfilePatientButton","personInfoForm","diseaseHistoryForm","patientForm","familyMembersList","treatmentHistoryForm","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","handleSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","patientId","_patientForm$getField","patientName","patientSurName","patientPatronymic","_patientId","sendObj","_sendObj","_sendObj2","_sendObj3","_sendObj4","wrap","_context","next","message","content","key","getFieldsValue","fetchPatientId","sent","Object","keys","length","_objectSpread","postPersonInfo","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","patientVisitsList","postVisit","analyzesMediaList","postAnalyses","treatmentDynamics","postTreatment","console","log","stop","apply","arguments","htmlType","danger","ProfilePatientForm","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","duration","sendRequest","abrupt","data","t0","_ref2","_callee2","obj","_context2","_x","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","deepCopy","parse","PathologistSelectInput","_useQuery","useQuery","enabled","pathologistsList","isLoading","refetch","Select","allowClear","lazyLoad","loading","onFocus","map","i","value","pathologistName","pathologistId","DiseaseHistoryFormBloke","props","selectedRowKey","setSelectedRowKey","setDataSourceDiseaseHistoryTable","onFinish","values","newData","Date","getTime","_toConsumableArray","resetFields","SimpleGrid","columns","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","showCount","maxLength","rows","Radio","direction","shouldUpdate","prevValues","currentValues","ihkEr","getFieldValue","ihkPr","min","max","defaultValue","her2","offset","familyMembersSelectOptions","onClose","initialRef","finalRef","handleEdit","isEdit","handleAdd","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ref","ModalFooter","block","PlusOutlined","copyValues","error","arrSeveralAdd","HeaderFamilyMembersList","_useDisclosure","useDisclosure","onOpen","setFamilyMembersList","React","_useState","useState","_useState2","selectedMember","setSelectedMember","_useState3","_useState4","countAddedFM","setCountAddedFM","_useState5","_useState6","isShowAlert","setIsShowAlert","_Form$useForm","_Fragment","width","onChange","disabled","find","familyMember","includes","s","count","newSelectedMember","_defineProperty","Alert","closable","afterClose","ModalFamilyMemberForm","memberData","Id","FamilyMembersList","selectedListItem","setSelectedListItem","List","header","bordered","dataSource","renderItem","item","index","setFieldsValue","_hover","Flex","w","Spacer","fontWeight","preventDefault","newList","filter","handleDelete","BlockForm","gap","receivedTraumas","CanvasComponent","image","imageName","setDescriptionsCanvas","setSavedDrawingCanvas","refCanvas","useRef","colorCanvas","setColorCanvas","disableCanvas","setDisableCanvas","brushRadius","setBrushRadius","_useState7","_useState8","disableSaveBtn","setDisableSaveBtn","_useState9","_useState10","X_PositionMouse","setX_PositionMouse","_useState11","_useState12","Y_PositionMouse","setY_PositionMouse","useEffect","colorNumber","computationColorNumber","objProperty","hasOwn","description","_data","current","getSaveData","lines","forEach","brushColor","onFieldsChange","_ref3$","alignItems","onSelect","suffixIcon","Circle","mr","undo","target","h","position","paddingBottom","onMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","arr","x","y","isIf","points","c","isX","Math","abs","round","num","arrSelectedColors","d","indexD","push","findEl","f","CanvasDraw","height","imgSrc","className","saveData","BlockCanvas","Grid","templateRows","templateColumns","GridItem","rowSpan","colSpan","Canvas","DeleteDiseaseHistoryTableRow","DiseaseHistoryTableSetting","setIsOpen","diseaseHistoryTableSetting","useLocalStorageStore","setDiseaseHistoryTableSetting","onChangeCheckbox","dataIndex","isVisible","checked","copyCTS","colArr","useMemo","Checkbox","defaultChecked","DiseaseHistoryTable","isLargerThan400","visible","defaultVisible","undefined","ellipsis","render","Tooltip","placement","align","row","display","flexDirection","alignSelf","Table","scroll","window","innerHeight","pagination","rowClassName","record","onRow","onRowTable","DiseaseHistory","my","border"],"sourceRoot":""}