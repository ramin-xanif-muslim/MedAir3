{"version":3,"file":"static/js/903.11deffd7.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/PatientForm/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/functions/deepCopy.js","pages/DiseaseHistory/modules/components/DiseaseHistoryFormBloke/index.js","modules/consts/familyMembersSelectOptions.js","pages/DiseaseHistory/modules/components/FamilyMembersList/ModalFamilyMemberForm.js","pages/DiseaseHistory/modules/components/FamilyMembersList/HeaderFamilyMembersList.js","pages/DiseaseHistory/modules/components/FamilyMembersList/index.js","pages/DiseaseHistory/modules/components/BlockForm/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/Canvas/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/index.js","pages/DiseaseHistory/modules/components/DeleteDiseaseHistoryTableRow/index.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/DiseaseHistoryTableSetting.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/index.js","pages/DiseaseHistory/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Input, InputNumber, Button, Space } from \"antd\";\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport React, { memo } from \"react\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useGlobalContext } from \"../../modules/context/index.js\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\n\r\nfunction PatientForm({ button, form, readOnly=false }) {\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { inPatientCollapse, setInPatientCollapse } = useGlobalContext()\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                form={form}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input readOnly={readOnly} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly={readOnly} addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={form}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input readOnly={readOnly} placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"phoneNumber\" name=\"phoneNumber\" label=\"Phone number\">\r\n                            <Input readOnly={readOnly} placeholder=\"Phone number\" />\r\n                            {/* <MaskedInput\r\n                                allowClear\r\n                                style={{ width: \"130px\" }}\r\n                                mask={\"000 000 00 00\"}\r\n                            /> */}\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                {button}\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(PatientForm)","import React, { memo } from 'react'\r\nimport PatientForm from '../PatientForm'\r\nimport { Button, Form, Space, message } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport sendRequest from '../../modules/api/sendRequest'\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nconst fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nconst postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n};\r\n\r\nconst postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nconst postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nconst postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nconst postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nconst ProfilePatientButton = () => {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, familyMembersList, treatmentHistoryForm } = useGlobalContext()\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const handleSave = async () => {\r\n        message.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            if (Object.keys(personInfoForm.getFieldsValue()).length) {\r\n                const {\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                } = patientForm.getFieldsValue()\r\n\r\n                const sendObj = {\r\n                    ...personInfoForm.getFieldsValue(),\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                };\r\n\r\n                postPersonInfo(sendObj);\r\n            }\r\n            if (Object.keys(diseaseHistoryForm.getFieldsValue()).length) {\r\n                savedDrawingCanvas.deseaseImageDesc =\r\n                    JSON.stringify(descriptionsCanvas);\r\n\r\n                const sendObj = {\r\n                    ...diseaseHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n                    familyMembersList,\r\n                    deseaseImagesList: savedDrawingCanvas,\r\n                    deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n                };\r\n                postMorby(sendObj);\r\n            }\r\n            if (dataSourceVisitTable) {\r\n                const sendObj = {\r\n                    patientVisitsList: dataSourceVisitTable,\r\n                    patientId\r\n                };\r\n                postVisit(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    analyzesMediaList: dataSourceAnalysisTable,\r\n                    patientId\r\n                };\r\n                postAnalyses(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    ...treatmentHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n\t\t\t\t\ttreatmentDynamics: dataSourceTreatmentTable,\r\n\t\t\t\t\trecipeList,\r\n                };\r\n                postTreatment(sendObj);\r\n            }\r\n        }\r\n\r\n        //patient\r\n        console.log('patientForm', patientForm.getFieldsValue());\r\n\r\n        //vite\r\n        console.log('personInfoForm', personInfoForm.getFieldsValue());\r\n\r\n        //morby  \r\n        console.log('diseaseHistoryForm', diseaseHistoryForm.getFieldsValue());\r\n        console.log('dataSourceDiseaseHistoryTable', dataSourceDiseaseHistoryTable);\r\n        console.log('familyMembersList', familyMembersList);\r\n        console.log('savedDrawingCanvas', savedDrawingCanvas);\r\n        console.log('descriptionsCanvas', descriptionsCanvas);\r\n\r\n        //visits\r\n        console.log('dataSourceVisitTable', dataSourceVisitTable);\r\n\r\n        //analyses\r\n        console.log('dataSourceAnalysisTable', dataSourceAnalysisTable);\r\n\r\n        //treatment\r\n        console.log('treatmentHistoryForm', treatmentHistoryForm.getFieldsValue());\r\n        console.log('dataSourceTreatmentTable', dataSourceTreatmentTable);\r\n        console.log('recipeList', recipeList);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Form.Item noStyle>\r\n\r\n            <Space>\r\n                <Button\r\n                    onClick={handleSave}\r\n                    form='patientForm'\r\n                    type=\"primary\"\r\n                    htmlType='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <Button danger>\r\n                    Clear\r\n                </Button>\r\n            </Space>\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const { patientForm } = useGlobalContext()\r\n\r\n    return (\r\n        <PatientForm\r\n            form={patientForm}\r\n            button={<ProfilePatientButton />}\r\n            readOnly={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Button, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useStore } from '../../../../../modules/store';\r\n\r\nfunction DiseaseHistoryFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const onFinish = (values) => {\r\n        if (selectedRowKey) {\r\n            let newData = dataSourceDiseaseHistoryTable.map((i) => {\r\n                if (i.id === values.id) return values\r\n                else return i\r\n            })\r\n            setDataSourceDiseaseHistoryTable(newData)\r\n        } else {\r\n            let id = new Date().getTime()\r\n            values.id = id\r\n            values.key = id\r\n            setDataSourceDiseaseHistoryTable([...dataSourceDiseaseHistoryTable, values])\r\n        }\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Breast\" name=\"complaintBreastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"no\">Missing</Select.Option>\r\n                        <Select.Option value=\"right\">Right</Select.Option>\r\n                        <Select.Option value=\"left\">Left</Select.Option>\r\n                        <Select.Option value=\"both\">Both</Select.Option>\r\n                        <Select.Option value=\"postmastektR\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"postmastektL\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"axilaR\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"axilaL\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestR\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"anotherBrestL\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestBoth\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Duration of illness\"\r\n                    name=\"durationOfIllness\"\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Complaints\" name=\"complaintDescription\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkEr') === 1 ? (\r\n                                <Form.Item noStyle name=\"erN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkPr') === 1 ? (\r\n                                <Form.Item noStyle name=\"prN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" name=\"her2\">\r\n                    <InputNumber\r\n                        min={0}\r\n                        max={3}\r\n                        defaultValue={0}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('her2') === 2 ? (\r\n                            <Form.Item label=\"FT\" name=\"her2FT\">\r\n                                <InputNumber />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <Select allowClear>\r\n                        {/* {pathologistsList.map((i) => {\r\n                                return (\r\n                                    <Select.Option value={i.pathologistName}>\r\n                                        {i.pathologistName}\r\n                                    </Select.Option>\r\n                                );\r\n                            })} */}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='diseaseHistoryFormBloke'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryFormBloke)","\r\n\r\nexport const familyMembersSelectOptions = [\r\n    'Mother',\r\n    'Father',\r\n    'Maternal grandmother',\r\n    'Paternal grandmother',\r\n    'Paternal grandfather',\r\n    'Maternal grandfather',\r\n    'Brother',\r\n    'Sister',\r\n    \"Father's brother\",\r\n    \"Mother's brother\",\r\n    \"Father's sister\",\r\n    \"Mother's sister\",\r\n]","import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy'\r\n\r\nfunction ModalFamilyMemberForm(props) {\r\n\r\n    const { isOpen, onClose, initialRef, finalRef, title, handleEdit, isEdit, handleAdd, form } = props\r\n\r\n\r\n\r\n    const onFinish = () => {\r\n        try {\r\n            const values = form.getFieldsValue()\r\n            const copyValues = deepCopy(values)\r\n            if (isEdit) {\r\n                handleEdit(copyValues)\r\n            }\r\n            else {\r\n                handleAdd(copyValues)\r\n            }\r\n            form.resetFields()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        form.resetFields()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>{title}</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n\r\n                    <Form\r\n                        form={form}\r\n                        labelWrap\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 16,\r\n                        }}\r\n                        style={{\r\n                            maxWidth: 600,\r\n                        }}\r\n                    >\r\n\r\n                        <Form.Item hidden name=\"Id\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item hidden name=\"familyMember\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Trauma\" name=\"familyMemberInjury\">\r\n                            <Input\r\n                                ref={initialRef}\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Deceased of cancer\" name=\"familyMemberDied\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Living with cancer\" name=\"familyMemberCurrentCancer\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Description\" name=\"familyMemberDesc\">\r\n                            <Input.TextArea showCount maxLength={3000}\r\n                                rows={3}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button\r\n                        type='primary'\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                        onClick={onFinish}\r\n                    >\r\n                        {isEdit ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalFamilyMemberForm","import React, { memo, useState } from 'react'\r\nimport { familyMembersSelectOptions } from '../../../../../modules/consts'\r\nimport { Button, Form, Select, Space } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\n\r\nfunction HeaderFamilyMembersList({ setList }) {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n    const [selectedMember, setSelectedMember] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = (memberData) => {\r\n        memberData.familyMember = selectedMember\r\n        let id = new Date().getTime()\r\n        memberData.Id = id\r\n        setList(prev => [...prev, memberData])\r\n        onClose()\r\n    }\r\n\r\n    const onSelect = (e) => {\r\n        setSelectedMember(e)\r\n    }\r\n\r\n    const onClick = () => {\r\n        onOpen()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form.Item labelAlign='left' label=\"Family members\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                    <Select\r\n                        onSelect={onSelect}\r\n                        allowClear\r\n                        ref={finalRef}\r\n                    >\r\n                        {familyMembersSelectOptions.map(i => {\r\n                            return (\r\n                                <Select.Option key={i} value={i}>{i}</Select.Option>\r\n                            )\r\n                        })}\r\n                    </Select>\r\n                    <Button onClick={onClick}><PlusOutlined /></Button>\r\n                </Space.Compact>\r\n            </Form.Item>\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedMember}\r\n                handleAdd={handleAdd}\r\n                form={form}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderFamilyMembersList)","import React, { memo, useState } from 'react'\r\nimport { Form, List } from 'antd'\r\nimport { Box, Flex, IconButton, Spacer, useDisclosure } from '@chakra-ui/react'\r\nimport HeaderFamilyMembersList from './HeaderFamilyMembersList'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\nfunction FamilyMembersList() {\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const [selectedListItem, setSelectedListItem] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n\r\n    const onClick = (item) => {\r\n        form.setFieldsValue(item)\r\n        setSelectedListItem(item)\r\n        onOpen()\r\n    }\r\n\r\n    const handleEdit = (memberData) => {\r\n        const newList = familyMembersList.map(i => {\r\n            if (i.Id === memberData.Id) return memberData\r\n            else return i\r\n        })\r\n        onClose()\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n    const handleDelete = (e,item) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newList = familyMembersList.filter(i => i.Id !== item.Id)\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n\r\n    return (\r\n        <Form.Item noStyle >\r\n\r\n            <List\r\n                size=\"small\"\r\n                header={<HeaderFamilyMembersList setList={setFamilyMembersList} />}\r\n                bordered\r\n                dataSource={familyMembersList}\r\n                renderItem={(item, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={item.Id}\r\n                            onClick={() => onClick(item)}\r\n                            _hover={{ bg: 'pink.200' }}\r\n                            cursor='pointer'\r\n                        >\r\n                            <List.Item>\r\n                                <Flex w='100%'>\r\n                                    <Box>{index + 1}. {item.familyMember}</Box>\r\n                                    <Spacer />\r\n                                    <IconButton\r\n                                        isRound\r\n                                        variant='ghost'\r\n                                        fontWeight='bold'\r\n                                        size='xs'\r\n                                    >\r\n                                        <Box onClick={(e) => handleDelete(e,item)} color='pink.500'>X</Box>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            </List.Item>\r\n                        </Box>\r\n                    )\r\n                }}\r\n            />\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedListItem?.familyMember}\r\n                isEdit={true}\r\n                handleEdit={handleEdit}\r\n                form={form}\r\n            />\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nexport default memo(FamilyMembersList)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Input, Radio, Select, Form } from 'antd';\r\nimport React, { memo } from 'react'\r\nimport FamilyMembersList from '../FamilyMembersList';\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js';\r\n\r\nfunction BlockForm() {\r\n\r\n    const { diseaseHistoryForm } = useGlobalContext()\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n                    <Input.TextArea showCount maxLength={3000} allowClear rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Received traumas\" name=\"receivedTraumas\">\r\n                    <Radio.Group\r\n                    >\r\n                        <Radio value={1}>Yes</Radio>\r\n                        <Radio value={2}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.receivedTraumas !== currentValues.receivedTraumas}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('receivedTraumas') === 1 ? (\r\n                            <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                                <Input.TextArea showCount maxLength={3000} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Benign\" name=\"beniqen\">\r\n                    <Select>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <FamilyMembersList />\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(BlockForm)\r\n\r\n\r\n\r\n","import { Box, Circle } from '@chakra-ui/react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport React, { memo, useEffect, useRef, useState } from 'react'\r\nimport CanvasDraw from 'react-canvas-draw'\r\nimport { useStore } from '../../../../../../modules/store'\r\n\r\n\r\nfunction CanvasComponent({ image, imageName }) {\r\n\r\n    const descriptionsCanvas = useStore(store => store.descriptionsCanvas)\r\n    const setDescriptionsCanvas = useStore(store => store.setDescriptionsCanvas)\r\n\r\n    const savedDrawingCanvas = useStore(store => store.savedDrawingCanvas)\r\n    const setSavedDrawingCanvas = useStore(store => store.setSavedDrawingCanvas)\r\n\r\n    const refCanvas = useRef(null);\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const [colorCanvas, setColorCanvas] = useState('green')\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\r\n\r\n    const [X_PositionMouse, setX_PositionMouse] = useState()\r\n    const [Y_PositionMouse, setY_PositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setX_PositionMouse(event.nativeEvent.offsetX);\r\n        setY_PositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        arr.forEach((i, index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if (isY === true && isX === true && !isIf) {\r\n                    isIf = true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if (d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({ num, index: indexD })\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    const description = descriptionsCanvas[imageName + i.brushColor + findEl.num]\r\n                    form.setFieldsValue({ description })\r\n                    setColorCanvas(i.brushColor)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (disableCanvas) {\r\n            let data = refCanvas.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, X_PositionMouse, Y_PositionMouse)\r\n        }\r\n    };\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n    }\r\n\r\n    const onChangeCanvas = () => {\r\n        form.setFieldsValue({ description: '' })\r\n        setDisableSaveBtn(false)\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        if (Object.hasOwn(descriptionsCanvas, objProperty)) {\r\n            form.setFieldsValue({ description: descriptionsCanvas[objProperty] })\r\n        } else {\r\n            form.setFieldsValue({ description: '' })\r\n        }\r\n    }, [colorCanvas]);\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        descriptionsCanvas[objProperty] = e.target.value;\r\n        setDescriptionsCanvas(descriptionsCanvas);\r\n    };\r\n\r\n    const computationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = refCanvas.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if (i.brushColor === colorCanvas) {\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setBrushRadius(20);\r\n        setDisableCanvas(false);\r\n    };\r\n    const handleSave = () => {\r\n        setBrushRadius(0);\r\n        setDisableSaveBtn(true);\r\n        setDisableCanvas(true);\r\n        let data = refCanvas.current.getSaveData();\r\n        savedDrawingCanvas[imageName] = data;\r\n        setSavedDrawingCanvas(savedDrawingCanvas);\r\n    };\r\n    const handleClear = () => {\r\n        refCanvas.current.undo();\r\n    };\r\n\r\n    console.log('savedDrawingCanvas',savedDrawingCanvas);\r\n\r\n    return (\r\n        <Box bg='pink.100' p='1' borderRadius='10px'>\r\n\r\n            <Form\r\n                form={form}\r\n                onFieldsChange={onFieldsChange}\r\n                labelAlign='left'\r\n                style={{ width: '100%' }}\r\n            >\r\n\r\n                <Space.Compact width='100%' style={{ width: \"100%\", alignItems: 'center' }}>\r\n\r\n                    <Form.Item\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        <Form.Item noStyle name=\"colorCanvas\">\r\n                            <Select\r\n                                onSelect={(e) => setColorCanvas(e)}\r\n                                defaultValue='green'\r\n                                suffixIcon={<Circle mr='4' size='20px' bg={colorCanvas} />}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n                                <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n                                <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n                                <Select.Option value=\"blue\">My operation</Select.Option>\r\n                                <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button onClick={handleAdd}>Edit</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button disabled={disableSaveBtn} type='primary' onClick={handleSave}>Save</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button onClick={handleClear}>Clear</Button>\r\n                    </Form.Item>\r\n\r\n                </Space.Compact>\r\n\r\n                <Form.Item label='Description' name='description'>\r\n                    <Input.TextArea showCount maxLength={3000}\r\n                        onChange={onChangeDescription}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Box\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                position=\"relative\"\r\n                paddingBottom=\"100%\"\r\n                onMouseMove={handleMouseMove}\r\n                onClick={onClick}\r\n            >\r\n                <CanvasDraw\r\n                    style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n                    imgSrc={image}\r\n                    className=\"canvas-draw\"\r\n                    brushColor={colorCanvas}\r\n                    ref={refCanvas}\r\n                    onChange={onChangeCanvas}\r\n                    disabled={disableCanvas}\r\n                    brushRadius={brushRadius}\r\n                    saveData={savedDrawingCanvas[imageName] || \"\"\r\n                    }\r\n                />\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(CanvasComponent)","import { Grid, GridItem } from '@chakra-ui/react'\r\nimport React, { memo } from 'react'\r\nimport Canvas from './Canvas'\r\n\r\nconst image = '/images/deseaseImage1Data.png'\r\n\r\nfunction BlockCanvas() {\r\n\r\n    return (\r\n        <Grid\r\n            templateRows='repeat(2, 1fr)'\r\n            templateColumns='repeat(5, 1fr)'\r\n            gap={4}\r\n            borderRadius='10px'\r\n        >\r\n            <GridItem borderRadius='10px' rowSpan={2} colSpan={[5, 5, 5, 3]} >\r\n\r\n                <Canvas imageName='image1' image={image} />\r\n\r\n            </GridItem>\r\n\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]} >\r\n\r\n                <Canvas imageName='image2' image={image} />\r\n\r\n            </GridItem>\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]}>\r\n\r\n                <Canvas imageName='image3' image={image} />\r\n\r\n            </GridItem>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(BlockCanvas)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteDiseaseHistoryTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteDiseaseHistoryTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction DiseaseHistoryTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    const setDiseaseHistoryTableSetting = useLocalStorageStore((store) => store.setDiseaseHistoryTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(diseaseHistoryTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setDiseaseHistoryTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setDiseaseHistoryTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = diseaseHistoryTableSetting\r\n            ? diseaseHistoryTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [diseaseHistoryTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteDiseaseHistoryTableRow from '../DeleteDiseaseHistoryTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport DiseaseHistoryTableSetting from './DiseaseHistoryTableSetting';\r\n\r\nfunction DiseaseHistoryTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    \r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return diseaseHistoryTableSetting?.find(i => i.dataIndex === dataIndex) ? diseaseHistoryTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        form.setFieldsValue(record)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n                isVisible: visible('complaintBreastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n                isVisible: visible('durationOfIllness'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n                isVisible: visible('complaintDescription'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                isVisible: visible('ihkEr'),\r\n                ellipsis: true,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"ER N\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                isVisible: visible('ihkPr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR N\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"HER2 FT\",\r\n                dataIndex: \"her2FT\",\r\n                key: \"her2FT\",\r\n                isVisible: visible('her2FT'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceDiseaseHistoryTable.filter(i => i.id !== row.id)\r\n                        setDataSourceDiseaseHistoryTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteDiseaseHistoryTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, diseaseHistoryTableSetting, dataSourceDiseaseHistoryTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <DiseaseHistoryTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceDiseaseHistoryTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTable)","import React, { memo, useState } from 'react'\r\nimport DiseaseHistoryFormBloke from './modules/components/DiseaseHistoryFormBloke'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport BlockForm from './modules/components/BlockForm'\r\nimport BlockCanvas from './modules/components/BlockCanvas'\r\nimport { Box } from '@chakra-ui/react'\r\nimport DiseaseHistoryTable from './modules/components/DiseaseHistoryTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction DiseaseHistory() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <DiseaseHistoryFormBloke form={form} selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <DiseaseHistoryTable form={form} selectedRowKey={selectedRowKey}\r\n                        setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockForm />\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockCanvas />\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistory)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","PatientForm","button","form","_ref$readOnly","readOnly","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","_useGlobalContext","useGlobalContext","inPatientCollapse","setInPatientCollapse","boxShadow","p","bg","borderRadius","_jsxs","Form","id","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","messageOnSave","res","nameFunc","message","content","key","duration","fetchPatientId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sendRequest","sent","abrupt","data","t0","stop","apply","arguments","postPersonInfo","_ref2","_callee2","obj","_context2","_x","postMorby","_ref3","_callee3","_context3","_x2","postVisit","_ref4","_callee4","_context4","_x3","postAnalyses","_ref5","_callee5","_context5","_x4","postTreatment","_ref6","_callee6","_context6","_x5","ProfilePatientButton","personInfoForm","diseaseHistoryForm","patientForm","familyMembersList","treatmentHistoryForm","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","handleSave","_ref7","_callee7","patientId","_patientForm$getField","patientName","patientSurName","patientPatronymic","_patientId","sendObj","_sendObj","_sendObj4","_context7","getFieldsValue","Object","keys","length","_objectSpread","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","patientVisitsList","analyzesMediaList","treatmentDynamics","console","log","htmlType","danger","ProfilePatientForm","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","deepCopy","parse","DiseaseHistoryFormBloke","props","selectedRowKey","setSelectedRowKey","setDataSourceDiseaseHistoryTable","onFinish","values","newData","map","i","Date","getTime","concat","_toConsumableArray","resetFields","SimpleGrid","columns","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","Select","allowClear","value","showCount","maxLength","rows","Radio","direction","shouldUpdate","prevValues","currentValues","ihkEr","getFieldValue","ihkPr","min","max","defaultValue","her2","offset","familyMembersSelectOptions","onClose","initialRef","finalRef","handleEdit","isEdit","handleAdd","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ref","ModalFooter","block","PlusOutlined","copyValues","error","HeaderFamilyMembersList","setList","_useDisclosure","useDisclosure","onOpen","React","_useState","useState","_useState2","selectedMember","setSelectedMember","_Form$useForm","_Fragment","width","onSelect","ModalFamilyMemberForm","memberData","familyMember","Id","FamilyMembersList","setFamilyMembersList","selectedListItem","setSelectedListItem","List","header","bordered","dataSource","renderItem","item","index","setFieldsValue","_hover","Flex","w","Spacer","fontWeight","preventDefault","newList","filter","handleDelete","BlockForm","gap","receivedTraumas","CanvasComponent","image","imageName","setDescriptionsCanvas","setSavedDrawingCanvas","refCanvas","useRef","colorCanvas","setColorCanvas","_useState3","_useState4","disableCanvas","setDisableCanvas","_useState5","_useState6","brushRadius","setBrushRadius","_useState7","_useState8","disableSaveBtn","setDisableSaveBtn","_useState9","_useState10","X_PositionMouse","setX_PositionMouse","_useState11","_useState12","Y_PositionMouse","setY_PositionMouse","useEffect","colorNumber","computationColorNumber","objProperty","hasOwn","description","_data","current","getSaveData","lines","forEach","brushColor","onFieldsChange","_ref3$","alignItems","suffixIcon","Circle","mr","disabled","undo","onChange","target","h","position","paddingBottom","onMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","arr","x","y","isIf","points","c","isX","Math","abs","round","num","arrSelectedColors","d","indexD","push","findEl","find","f","CanvasDraw","height","imgSrc","className","saveData","BlockCanvas","Grid","templateRows","templateColumns","GridItem","rowSpan","colSpan","Canvas","DeleteDiseaseHistoryTableRow","DiseaseHistoryTableSetting","setIsOpen","diseaseHistoryTableSetting","useLocalStorageStore","setDiseaseHistoryTableSetting","onChangeCheckbox","dataIndex","isVisible","checked","copyCTS","colArr","useMemo","Checkbox","defaultChecked","DiseaseHistoryTable","isLargerThan400","visible","defaultVisible","undefined","ellipsis","render","Tooltip","placement","align","row","display","flexDirection","alignSelf","Table","scroll","window","innerHeight","pagination","rowClassName","record","onRow","onRowTable","DiseaseHistory","my","border"],"sourceRoot":""}