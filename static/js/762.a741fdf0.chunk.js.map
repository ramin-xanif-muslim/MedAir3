{"version":3,"file":"static/js/762.a741fdf0.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/EditTableComponent/modules/components/UseTabs.js","components/EditTableComponent/modules/components/CureTabType.js","components/EditTableComponent/modules/components/InputComponent.js","components/EditTableComponent/modules/components/EditInputType.js","components/EditTableComponent/modules/hooks/useChildrenNode.js","components/EditTableComponent/index.js","components/PatientForm/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","pages/Treatment/modules/components/TreatmentFormBloke/index.js","pages/Treatment/modules/components/TreatmentTableFormBloke/index.js","pages/Treatment/modules/components/DeleteTreatmentTableRow/index.js","pages/Treatment/modules/components/TreatmentTable/TreatmentTableTableSetting.js","pages/Treatment/modules/components/TreatmentTable/index.js","pages/Treatment/modules/components/DeleteTreatmentMedicationsTableRow/index.js","pages/Treatment/modules/components/TreatmentMedicationsTable/TreatmentMedicationsTableSetting.js","pages/Treatment/modules/components/TreatmentMedicationsTable/index.js","pages/Treatment/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Select } from \"antd\";\r\nimport React, { memo, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport sendRequest from \"../../../../modules/api/sendRequest\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nconst fetchManagersTabs = async () => {\r\n  let res = await sendRequest(\"managers/tabs\");\r\n  if (res?.data) return res.data\r\n};\r\n\r\nconst UseTabs = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n  const onBlur = () => {\r\n    let inputType = 'select'\r\n    save(inputType)\r\n  };\r\n\r\n  const { data: managersList, isLoading, refetch } = useQuery([\"managers/tabs\"], fetchManagersTabs,{\r\n    enabled: false,\r\n  })\r\n\r\n  return (\r\n    <Form.Item\r\n      style={{\r\n        margin: 0,\r\n      }}\r\n      name={dataIndex}\r\n    >\r\n      <Select\r\n        allowClear\r\n        ref={inputRef}\r\n        lazyLoad\r\n        onBlur={onBlur}\r\n        loading={isLoading}\r\n        onFocus={refetch}\r\n      >\r\n        {managersList?.map((c, index) => {\r\n          return (\r\n            <Option key={c.cureTabId} value={JSON.stringify(c)}>\r\n              {c.cureTabName}\r\n            </Option>\r\n          );\r\n        })}\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default memo(UseTabs);\r\n","import { Form, Select } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CureTabType = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n    const onBlur = () => {\r\n        let inputType = 'select'\r\n        save(inputType)\r\n    }\r\n\r\n    return (\r\n        <Form.Item\r\n            style={{\r\n                margin: 0,\r\n            }}\r\n            name={dataIndex}\r\n        >\r\n            <Select\r\n                allowClear\r\n                ref={inputRef}\r\n                lazyLoad\r\n                onBlur={onBlur}\r\n            >\r\n                <Option value=\"Tablet\">Tablet</Option>\r\n                <Option value=\"Ampoule\">Ampoule</Option>\r\n                <Option value=\"Drops\">Drops</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(CureTabType);","import { Form, Input } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst InputComponent = ({ dataIndex, title, inputRef, save }) => {\r\n    return (\r\n        <Form.Item\r\n            name={dataIndex}\r\n        >\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(InputComponent);","import React, { memo } from \"react\";\r\nimport UseTabs from \"./UseTabs\";\r\nimport CureTabType from \"./CureTabType\";\r\nimport InputComponent from \"./InputComponent\";\r\n\r\nconst EditInputType = (props) => {\r\n  const { dataIndex, title, inputRef, save, inputType } = props;\r\n  if (\r\n    dataIndex === \"useTabs\" ||\r\n    (dataIndex === \"cureTabName\" && inputType === \"select\")\r\n  ) {\r\n    return (\r\n      <UseTabs\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else if (dataIndex === \"cureTabType\" && inputType === 'select') {\r\n    return (\r\n      <CureTabType\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <InputComponent\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(EditInputType);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport EditInputType from \"../components/EditInputType\";\r\n\r\nconst useChildrenNode = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    form,\r\n    inputType,\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        if (setShowSaveButton) {\r\n            setShowSaveButton(true);\r\n        }\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (inputType) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            if (Object.keys(values).includes(\"useTabs\") && inputType === 'select') {\r\n                const manager = JSON.parse(values.useTabs);\r\n                values.useTabs = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            if (Object.keys(values).includes(\"cureTabName\")  && inputType === 'select') {\r\n                const manager = JSON.parse(values.cureTabName);\r\n                values.cureTabName = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log(\"Save failed:\", errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <EditInputType\r\n                dataIndex={dataIndex}\r\n                title={title}\r\n                inputRef={inputRef}\r\n                save={save}\r\n                inputType={inputType}\r\n            />\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                    height: \"35px\",\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n    return { childNode };\r\n};\r\n\r\nexport default useChildrenNode;\r\n","import { Form, Table } from \"antd\";\r\nimport React, { memo, useContext } from \"react\";\r\nimport useChildrenNode from \"./modules/hooks/useChildrenNode\";\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    inputType,\r\n    ...restProps\r\n}) => {\r\n    const form = useContext(EditableContext);\r\n\r\n    const { childNode } = useChildrenNode({\r\n        title,\r\n        editable,\r\n        children,\r\n        dataIndex,\r\n        record,\r\n        handleSave,\r\n        setShowSaveButton,\r\n        inputType,\r\n        form,\r\n    });\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nconst EditTable = (props) => {\r\n    const {\r\n        dataSource,\r\n        setDataSource,\r\n        defaultColumns,\r\n        onChange,\r\n    } = props;\r\n\r\n    const handleSave = (row) => {\r\n        const newData = [...dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setDataSource(newData);\r\n        onChange?.()\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n    const columns = defaultColumns?.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                inputType: col.inputType,\r\n                handleSave,\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <div>\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                rowClassName={() => \"editable-row\"}\r\n                components={components}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                pagination={false}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(EditTable);\r\n","import { Form, Input, InputNumber, Button, Space } from \"antd\";\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport React, { memo } from \"react\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useGlobalContext } from \"../../modules/context/index.js\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\n\r\nfunction PatientForm({ button, form, readOnly=false }) {\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { inPatientCollapse, setInPatientCollapse } = useGlobalContext()\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                form={form}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input readOnly={readOnly} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly={readOnly} addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={form}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input readOnly={readOnly} placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"phoneNumber\" name=\"phoneNumber\" label=\"Phone number\">\r\n                            <Input readOnly={readOnly} placeholder=\"Phone number\" />\r\n                            {/* <MaskedInput\r\n                                allowClear\r\n                                style={{ width: \"130px\" }}\r\n                                mask={\"000 000 00 00\"}\r\n                            /> */}\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                {button}\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(PatientForm)","import React, { memo } from 'react'\r\nimport PatientForm from '../PatientForm'\r\nimport { Button, Form, Space, message } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\n\r\n\r\n\r\nconst ProfilePatientButton = () => {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, familyMembersList, treatmentHistoryForm } = useGlobalContext()\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const handleSave = async () => {\r\n        message.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            if (Object.keys(personInfoForm.getFieldsValue()).length) {\r\n                const {\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                } = patientForm.getFieldsValue()\r\n\r\n                const sendObj = {\r\n                    ...personInfoForm.getFieldsValue(),\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                };\r\n\r\n                postPersonInfo(sendObj);\r\n            }\r\n            if (Object.keys(diseaseHistoryForm.getFieldsValue()).length) {\r\n                savedDrawingCanvas.deseaseImageDesc =\r\n                    JSON.stringify(descriptionsCanvas);\r\n\r\n                const sendObj = {\r\n                    ...diseaseHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n                    familyMembersList,\r\n                    deseaseImagesList: savedDrawingCanvas,\r\n                    deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n                };\r\n                postMorby(sendObj);\r\n            }\r\n            if (dataSourceVisitTable) {\r\n                const sendObj = {\r\n                    patientVisitsList: dataSourceVisitTable,\r\n                    patientId\r\n                };\r\n                postVisit(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    analyzesMediaList: dataSourceAnalysisTable,\r\n                    patientId\r\n                };\r\n                postAnalyses(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    ...treatmentHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n\t\t\t\t\ttreatmentDynamics: dataSourceTreatmentTable,\r\n\t\t\t\t\trecipeList,\r\n                };\r\n                postTreatment(sendObj);\r\n            }\r\n        }\r\n\r\n        //patient\r\n        console.log('patientForm', patientForm.getFieldsValue());\r\n\r\n        //vite\r\n        console.log('personInfoForm', personInfoForm.getFieldsValue());\r\n\r\n        //morby  \r\n        console.log('diseaseHistoryForm', diseaseHistoryForm.getFieldsValue());\r\n        console.log('dataSourceDiseaseHistoryTable', dataSourceDiseaseHistoryTable);\r\n        console.log('familyMembersList', familyMembersList);\r\n        console.log('savedDrawingCanvas', savedDrawingCanvas);\r\n        console.log('descriptionsCanvas', descriptionsCanvas);\r\n\r\n        //visits\r\n        console.log('dataSourceVisitTable', dataSourceVisitTable);\r\n\r\n        //analyses\r\n        console.log('dataSourceAnalysisTable', dataSourceAnalysisTable);\r\n\r\n        //treatment\r\n        console.log('treatmentHistoryForm', treatmentHistoryForm.getFieldsValue());\r\n        console.log('dataSourceTreatmentTable', dataSourceTreatmentTable);\r\n        console.log('recipeList', recipeList);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Form.Item noStyle>\r\n\r\n            <Space>\r\n                <Button\r\n                    onClick={handleSave}\r\n                    form='patientForm'\r\n                    type=\"primary\"\r\n                    htmlType='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <Button danger>\r\n                    Clear\r\n                </Button>\r\n            </Space>\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const { patientForm } = useGlobalContext()\r\n\r\n    return (\r\n        <PatientForm\r\n            form={patientForm}\r\n            button={<ProfilePatientButton />}\r\n            readOnly={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import React, { memo } from 'react'\r\nimport { Form, Input } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nfunction TreatmentFormBloke() {\r\n\r\n    const { treatmentHistoryForm } = useGlobalContext()\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={treatmentHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Pre menopause\" name=\"preMenopause\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"treatmentDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={treatmentHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Menopause\" name=\"menopause\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Recommendation\" name=\"recommendation\">\r\n                    <Input.TextArea showCount maxLength={3000} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Advise\" name=\"advise\">\r\n                    <Input.TextArea showCount maxLength={3000} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentFormBloke)","import React, { memo, useState } from 'react'\r\nimport { Button, DatePicker, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\n\r\nfunction TreatmentTableFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isBenign, setIsBenign] = useState(false)\r\n\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const onFinish = (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceTreatmentTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        values.treatmentDate = dayjs(values.treatmentDate).format('YYYY-MM-DD HH:mm')\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceTreatmentTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                values.treatmentDate = dayjs(values.treatmentDate).format('YYYY-MM-DD HH:mm')\r\n                setDataSourceTreatmentTable([...dataSourceTreatmentTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n        const nameFormInput = name && name[0]\r\n        if (nameFormInput === 'treatmentTypeName') setIsBenign(value === 'benign')\r\n    }\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='treatmentTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Date\" name=\"treatmentDate\">\r\n                    <DatePicker\r\n                        format=\"YYYY-MM-DD HH:mm\"\r\n                        defaultValue={dayjs()}\r\n                        showTime\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Urgent Histology\"\r\n                    name=\"histologyUrgent\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Histology Final\"\r\n                    name=\"histologyFinal\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                {isBenign ? '' : (\r\n                    <>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                        >\r\n                            {({ getFieldValue }) => getFieldValue('treatmentTypeName') !== 'benign' ? (\r\n                                <Form.Item label=\"SLNB\" name=\"SLNB\">\r\n                                    <Radio.Group>\r\n                                        <Radio value={1}>Yes</Radio>\r\n                                        <Radio value={2}>No</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                            ) : ''\r\n                            }\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.SLNB !== currentValues.SLNB}\r\n                        >\r\n                            {({ getFieldValue }) =>\r\n                                getFieldValue('SLNB') === 1 ? (\r\n                                    <>\r\n                                        <Form.Item\r\n                                            label=\"Reactive\"\r\n                                            name=\"SLNB_reactive\"\r\n                                        >\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item label=\"MTS\" name=\"SLNB_mts\">\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </>\r\n                                ) : ''}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Axilla dissection\"\r\n                            name=\"axillaDeseksiya\"\r\n                        >\r\n                            <Radio.Group>\r\n                                <Radio value={1}>Yes</Radio>\r\n                                <Radio value={2}>No</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.axillaDeseksiya !== currentValues.axillaDeseksiya}\r\n                        >\r\n                            {({ getFieldValue }) =>\r\n                                getFieldValue('axillaDeseksiya') === 1 ? (\r\n                                    <>\r\n                                        <Form.Item\r\n                                            label=\"Reactive\"\r\n                                            name=\"axillaDeseksiyaActive\"\r\n                                        >\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item label=\"MTS\" name=\"axillaDeseksiyaMts\">\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </>\r\n                                ) : ''}\r\n                        </Form.Item>\r\n\r\n                    </>\r\n\r\n                )}\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='treatmentTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkEr') === 1 ? (\r\n                                <Form.Item noStyle name=\"erN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"horizontal\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) =>\r\n                            getFieldValue('ihkPr') === 1 ? (\r\n                                <Form.Item noStyle name=\"prN\">\r\n                                    <InputNumber size='small' />\r\n                                </Form.Item>\r\n                            ) : ''}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" name=\"her2\">\r\n                    <InputNumber\r\n                        min={0}\r\n                        max={3}\r\n                        defaultValue={0}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('her2') === 2 ? (\r\n                            <Form.Item label=\"FT\" name=\"her2FT\">\r\n                                <InputNumber />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <Select allowClear>\r\n                        {[].map((i) => {\r\n                            return (\r\n                                <Select.Option value={i.pathologistName}>\r\n                                    {i.pathologistName}\r\n                                </Select.Option>\r\n                            );\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item label=\"Brest type\" name=\"breastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Missing\">Missing</Select.Option>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                        <Select.Option value=\"Both\">Both</Select.Option>\r\n                        <Select.Option value=\"Post mastectomy right\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"Post mastectomy left\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"Axilla right\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"Axilla left\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"Extra breast right\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"Extra breast left\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"Both extra breasts\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Type of treatment\" name=\"treatmentTypeName\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"benign\">Benign</Select.Option>\r\n                        <Select.Option value=\"malign\">Malignant</Select.Option>\r\n                        <Select.Option value=\"Nak\">Nak</Select.Option>\r\n                        <Select.Option value=\"AK\">AK</Select.Option>\r\n                        <Select.Option value=\"RT\">RT</Select.Option>\r\n                        <Select.Option value=\"target\">Target</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'malign' ? (\r\n                            <>\r\n                                <Form.Item label=\"Əməliyyat növü\" name=\"treatmentSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"Organgoruyucu\">Organoprotector</Select.Option>\r\n                                        <Select.Option value=\"Masektamiya\">Masectomy</Select.Option>\r\n                                        <Select.Option value=\"SLNB\">SLNB</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item label=\"TB\" name=\"treatmentSubSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"lumA\">Lum A</Select.Option>\r\n                                        <Select.Option value=\"lumB\">Lum B</Select.Option>\r\n                                        <Select.Option value=\"tripleN\">Triple negative</Select.Option>\r\n                                        <Select.Option value=\"hormoneP\">Hormone positive Her positive</Select.Option>\r\n                                        <Select.Option value=\"hormoneN\">Hormone negative Her positive</Select.Option>\r\n                                        <Select.Option value=\"prN\">PR negative</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'benign' ? (\r\n                            <>\r\n                                <Form.Item label=\"Alt növ\" name=\"treatmentSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"lumpektamiya\">Lumpectamia</Select.Option>\r\n                                        <Select.Option value=\"reduksiya\">Reduction</Select.Option>\r\n                                        <Select.Option value=\"mastopeksiya\">Mastopexy</Select.Option>\r\n                                        <Select.Option value=\"augumentasiya\">Augmentation</Select.Option>\r\n                                        <Select.Option value=\"Extra breast\">Extra breast</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item label=\"Alt alt növ\" name=\"treatmentSubSubType\">\r\n                                    <Select allowClear >\r\n                                        <Select.Option value=\"right\">Right</Select.Option>\r\n                                        <Select.Option value=\"left\">Left</Select.Option>\r\n                                        <Select.Option value=\"both\">Both</Select.Option>\r\n                                        <Select.Option value=\"sectoral\">Sectoral</Select.Option>\r\n                                        <Select.Option value=\"sectoral round block\">\r\n                                            Sectoral round block\r\n                                        </Select.Option>\r\n                                        <Select.Option value=\"expander\">Expander</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'Nak' || getFieldValue('treatmentTypeName') === 'RT' ? (\r\n                            <Form.Item label=\"patamarfoz\" name=\"treatmentSubType\">\r\n                                <Select allowClear>\r\n                                    <Select.Option value=\"1\">&#8544;</Select.Option>\r\n                                    <Select.Option value=\"2\">&#8545;</Select.Option>\r\n                                    <Select.Option value=\"3\">&#8546;</Select.Option>\r\n                                    <Select.Option value=\"4\">&#8547;</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') ? (\r\n                            <Form.Item label=\"Description\" name=\"treatmentTypeDesc\">\r\n                                <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='treatmentTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTableFormBloke)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteTreatmentTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteTreatmentTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction TreatmentTableTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const treatmentTableTableSetting = useLocalStorageStore((store) => store.treatmentTableTableSetting)\r\n    const setTreatmentTableTableSetting = useLocalStorageStore((store) => store.setTreatmentTableTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(treatmentTableTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setTreatmentTableTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setTreatmentTableTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = treatmentTableTableSetting\r\n            ? treatmentTableTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [treatmentTableTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTableTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteTreatmentTableRow from '../DeleteTreatmentTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport TreatmentTableTableSetting from './TreatmentTableTableSetting';\r\nimport dayjs from 'dayjs';\r\n\r\nfunction TreatmentTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const treatmentTableTableSetting = useLocalStorageStore((store) => store.treatmentTableTableSetting)\r\n\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return treatmentTableTableSetting?.find(i => i.dataIndex === dataIndex) ? treatmentTableTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const copy = { ...record };\r\n        copy.treatmentDate = dayjs(record.treatmentDate)\r\n        form.setFieldsValue(copy)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"treatmentDate\",\r\n                key: \"treatmentDate\",\r\n                isVisible: visible('treatmentDate'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Brest type\",\r\n                dataIndex: \"breastType\",\r\n                key: \"breastType\",\r\n                isVisible: visible('breastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Treatment type\",\r\n                dataIndex: \"treatmentTypeName\",\r\n                key: \"treatmentTypeName\",\r\n                isVisible: visible('treatmentTypeName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub type\",\r\n                dataIndex: \"treatmentSubType\",\r\n                key: \"treatmentSubType\",\r\n                isVisible: visible('treatmentSubType'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub sub type\",\r\n                dataIndex: \"treatmentSubSubType\",\r\n                key: \"treatmentSubSubType\",\r\n                isVisible: visible('treatmentSubSubType'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"treatmentTypeDesc\",\r\n                key: \"treatmentTypeDesc\",\r\n                isVisible: visible('treatmentTypeDesc'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                isVisible: visible('ihkEr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"ER N\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                isVisible: visible('ihkPr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR N\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"HER2 FT\",\r\n                dataIndex: \"her2FT\",\r\n                key: \"her2FT\",\r\n                isVisible: visible('her2FT'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceTreatmentTable.filter(i => i.id !== row.id)\r\n                        setDataSourceTreatmentTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteTreatmentTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, treatmentTableTableSetting, dataSourceTreatmentTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <TreatmentTableTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceTreatmentTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTable)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteTreatmentMedicationsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteTreatmentMedicationsTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction TreatmentMedicationsTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const treatmentMedicationsTableSetting = useLocalStorageStore((store) => store.treatmentMedicationsTableSetting)\r\n    const setTreatmentMedicationsTableSetting = useLocalStorageStore((store) => store.setTreatmentMedicationsTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(treatmentMedicationsTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setTreatmentMedicationsTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setTreatmentMedicationsTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = treatmentMedicationsTableSetting\r\n            ? treatmentMedicationsTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [treatmentMedicationsTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentMedicationsTableSetting)","import React, { memo, useMemo, useState } from 'react'\r\nimport EditTableComponent from '../../../../../components/EditTableComponent'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport { Button, Tooltip } from 'antd';\r\nimport DeleteTreatmentMedicationsTableRow from '../DeleteTreatmentMedicationsTableRow';\r\nimport { Box, Flex, Spacer, Text } from '@chakra-ui/react';\r\nimport TreatmentMedicationsTableSetting from './TreatmentMedicationsTableSetting';\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport dayjs from 'dayjs';\r\n\r\nfunction TreatmentMedicationsTable() {\r\n\r\n    const recipeList = useStore((store) => store.recipeList)\r\n    const setRecipeList = useStore((store) => store.setRecipeList)\r\n\r\n\r\n    const treatmentMedicationsTableSetting = useLocalStorageStore((store) => store.treatmentMedicationsTableSetting)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return treatmentMedicationsTableSetting?.find(i => i.dataIndex === dataIndex) ? treatmentMedicationsTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Name\",\r\n                dataIndex: \"cureTabName\",\r\n                key: \"cureTabName\",\r\n                isVisible: visible('cureTabName'),\r\n                inputType: 'select',\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Type\",\r\n                dataIndex: \"cureTabType\",\r\n                key: \"cureTabType\",\r\n                isVisible: visible('cureTabType'),\r\n                inputType: 'select',\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Mg/Ml\",\r\n                dataIndex: \"cureTabDose\",\r\n                key: \"cureTabDose\",\r\n                isVisible: visible('cureTabDose'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Usage guide\",\r\n                dataIndex: \"cureTabUsing\",\r\n                key: \"cureTabUsing\",\r\n                isVisible: visible('cureTabUsing'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = recipeList.filter(i => i.Id !== row.Id)\r\n                        setRecipeList(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteTreatmentMedicationsTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [treatmentMedicationsTableSetting, recipeList]);\r\n\r\n\r\n    const onClickNewRecipe = () => {\r\n        let key = new Date().getTime()\r\n        let Id = new Date().getTime()\r\n        let newData = { key, Id, date: dayjs().format(\"DD-MM-YYYY\") };\r\n        setRecipeList([...recipeList, newData]);\r\n    };\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Flex m='2'>\r\n                <Text fontSize='20' fontWeight='600' >Medications</Text>\r\n\r\n                <Spacer />\r\n\r\n                <TreatmentMedicationsTableSetting columns={columns} />\r\n            </Flex>\r\n\r\n            <EditTableComponent\r\n                dataSource={recipeList}\r\n                setDataSource={setRecipeList}\r\n                defaultColumns={columns.filter(i => i.isVisible === true)}\r\n            />\r\n\r\n            <Button block icon={<PlusOutlined />} onClick={onClickNewRecipe}>\r\n                New medications\r\n            </Button>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentMedicationsTable)","import { Box } from '@chakra-ui/react'\r\nimport React, { memo, useState } from 'react'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport TreatmentFormBloke from './modules/components/TreatmentFormBloke'\r\nimport TreatmentTableFormBloke from './modules/components/TreatmentTableFormBloke'\r\nimport TreatmentTable from './modules/components/TreatmentTable'\r\nimport TreatmentMedicationsTable from './modules/components/TreatmentMedicationsTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction Treatment() {\r\n\r\n  const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n  const [form] = Form.useForm()\r\n\r\n  return (\r\n    <>\r\n      <ProfilePatientForm />\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <TreatmentFormBloke />\r\n\r\n      </Box>\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n          <TreatmentTableFormBloke selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n        </Box>\r\n\r\n        <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n          <TreatmentTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n        </Box>\r\n\r\n      </Box>\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <TreatmentMedicationsTable />\r\n\r\n      </Box>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(Treatment)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","Option","Select","fetchManagersTabs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","sendRequest","sent","data","abrupt","stop","apply","arguments","UseTabs","_ref2","dataIndex","inputRef","save","_useQuery","useQuery","enabled","managersList","isLoading","refetch","Form","style","margin","name","allowClear","ref","lazyLoad","onBlur","loading","onFocus","map","c","index","value","JSON","stringify","cureTabName","cureTabId","CureTabType","_jsxs","InputComponent","Input","onPressEnter","EditInputType","props","inputType","editable","record","handleSave","setShowSaveButton","form","_useState","useState","_useState2","_slicedToArray","editing","setEditing","useRef","useEffect","current","focus","toggleEdit","setFieldsValue","_defineProperty","values","manager","_manager","validateFields","Object","keys","includes","parse","useTabs","cureTabType","_objectSpread","t0","console","log","_x","childNode","className","paddingRight","height","EditableContext","React","EditableRow","_objectWithoutProperties","_excluded","_Form$useForm","component","Provider","EditableCell","restProps","_excluded2","useContext","useChildrenNode","EditTable","dataSource","setDataSource","defaultColumns","onChange","row","newData","_toConsumableArray","findIndex","item","key","splice","components","body","cell","columns","col","onCell","Table","size","bordered","scroll","x","window","innerHeight","rowClassName","pagination","PatientForm","button","_ref$readOnly","readOnly","_useMediaQuery","useMediaQuery","isLargerThan600","_useGlobalContext","useGlobalContext","inPatientCollapse","setInPatientCollapse","boxShadow","p","bg","borderRadius","id","layout","label","Space","noStyle","placeholder","InputNumber","addonBefore","Button","type","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","ProfilePatientButton","personInfoForm","diseaseHistoryForm","patientForm","familyMembersList","treatmentHistoryForm","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","patientId","_patientForm$getField","patientName","patientSurName","patientPatronymic","_patientId","sendObj","_sendObj","_sendObj2","_sendObj3","_sendObj4","message","content","getFieldsValue","fetchPatientId","length","postPersonInfo","deseaseImageDesc","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","patientVisitsList","postVisit","analyzesMediaList","postAnalyses","treatmentDynamics","postTreatment","htmlType","danger","ProfilePatientForm","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","isRound","SettingOutlined","messageOnSave","nameFunc","duration","_callee2","obj","_context2","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","deepCopy","TreatmentFormBloke","SimpleGrid","gap","labelWrap","labelAlign","labelCol","span","wrapperCol","maxWidth","showCount","maxLength","rows","TreatmentTableFormBloke","selectedRowKey","setSelectedRowKey","isBenign","setIsBenign","setDataSourceTreatmentTable","onFinish","i","treatmentDate","dayjs","format","Date","getTime","resetFields","error","hidden","DatePicker","defaultValue","showTime","_Fragment","shouldUpdate","prevValues","currentValues","treatmentTypeName","getFieldValue","Radio","SLNB","min","axillaDeseksiya","onFieldsChange","_ref2$","direction","ihkEr","ihkPr","max","her2","pathologistName","_ref12","DeleteTreatmentTableRow","handleDelete","TreatmentTableTableSetting","setIsOpen","treatmentTableTableSetting","useLocalStorageStore","setTreatmentTableTableSetting","onChangeCheckbox","target","isVisible","checked","copyCTS","forEach","colArr","useMemo","Checkbox","defaultChecked","TreatmentTable","isLargerThan400","visible","defaultVisible","undefined","find","ellipsis","width","render","Tooltip","placement","align","filter","display","flexDirection","alignSelf","onRow","copy","onRowTable","DeleteTreatmentMedicationsTableRow","TreatmentMedicationsTableSetting","treatmentMedicationsTableSetting","setTreatmentMedicationsTableSetting","TreatmentMedicationsTable","setRecipeList","Id","Flex","m","Text","fontSize","fontWeight","Spacer","EditTableComponent","block","PlusOutlined","date","Treatment","my","border"],"sourceRoot":""}