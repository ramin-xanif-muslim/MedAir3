{"version":3,"file":"static/js/649.79a23797.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/SelectInputs/PathologistSelectInput.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","pages/DiseaseHistory/modules/components/DiseaseHistoryFormBloke/index.js","modules/consts/familyMembersSelectOptions.js","pages/DiseaseHistory/modules/components/FamilyMembersList/ModalFamilyMemberForm.js","pages/DiseaseHistory/modules/components/FamilyMembersList/HeaderFamilyMembersList.js","pages/DiseaseHistory/modules/components/FamilyMembersList/index.js","pages/DiseaseHistory/modules/components/BlockForm/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/Canvas/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/index.js","pages/DiseaseHistory/modules/components/DeleteDiseaseHistoryTableRow/index.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/DiseaseHistoryTableSetting.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/index.js","pages/DiseaseHistory/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo, useState } from 'react'\r\nimport { Button, Form, Space, message, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport dayjs from 'dayjs'\r\n// import { MaskedInput } from \"antd-mask-input\";\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const { patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const savePersonInfo = (patientId) => {\r\n            const {\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n            } = patientForm.getFieldsValue()\r\n\r\n            let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n\r\n            const sendObj = {\r\n                ...personInfoForm.getFieldsValue(),\r\n                birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n                alkogol: alkogol ? 1 : 0,\r\n                smoke: smoke ? 1 : 0,\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n                patientId,\r\n            };\r\n\r\n            postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n            savedDrawingCanvas.deseaseImageDesc =\r\n                JSON.stringify(descriptionsCanvas);\r\n\r\n            const sendObj = {\r\n                ...diseaseHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                familyMembersList,\r\n                deseaseImagesList: savedDrawingCanvas,\r\n                deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n            };\r\n            postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n            const sendObj = {\r\n                patientVisitsList: dataSourceVisitTable,\r\n                patientId\r\n            };\r\n            postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n            const sendObj = {\r\n                analyzesMediaList: dataSourceAnalysisTable,\r\n                patientId\r\n            };\r\n            postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n            const sendObj = {\r\n                ...treatmentHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                treatmentDynamics: dataSourceTreatmentTable,\r\n                recipeList,\r\n            };\r\n            postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Select } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchPathologistsPlace } from '../../modules/api';\r\n\r\nfunction PathologistSelectInput() {\r\n\r\n    const { data: pathologistsList, isLoading, refetch } = useQuery([\"managers/pathologists\"], fetchPathologistsPlace, {\r\n        enabled: false,\r\n    })\r\n\r\n    return (\r\n        <Select\r\n            allowClear\r\n            lazyLoad\r\n            loading={isLoading}\r\n            onFocus={refetch}\r\n        >\r\n            {pathologistsList?.map((i) => {\r\n                return (\r\n                    <Select.Option key={i.pathologistId} value={i.pathologistName}>\r\n                        {i.pathologistName}\r\n                    </Select.Option>\r\n                );\r\n            })}\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default memo(PathologistSelectInput)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Button, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport { PathologistSelectInput } from '../../../../../components/SelectInputs';\r\n\r\nfunction DiseaseHistoryFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const onFinish = (values) => {\r\n        if (selectedRowKey) {\r\n            let newData = dataSourceDiseaseHistoryTable.map((i) => {\r\n                if (i.id === values.id) return values\r\n                else return i\r\n            })\r\n            setDataSourceDiseaseHistoryTable(newData)\r\n        } else {\r\n            let id = new Date().getTime()\r\n            values.id = id\r\n            values.key = id\r\n            setDataSourceDiseaseHistoryTable([...dataSourceDiseaseHistoryTable, values])\r\n        }\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Breast\" name=\"complaintBreastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"no\">Missing</Select.Option>\r\n                        <Select.Option value=\"right\">Right</Select.Option>\r\n                        <Select.Option value=\"left\">Left</Select.Option>\r\n                        <Select.Option value=\"both\">Both</Select.Option>\r\n                        <Select.Option value=\"postmastektR\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"postmastektL\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"axilaR\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"axilaL\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestR\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"anotherBrestL\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestBoth\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Duration of illness\"\r\n                    name=\"durationOfIllness\"\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Complaints\" name=\"complaintDescription\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkEr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"erN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkPr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"prN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" >\r\n                    <Form.Item noStyle name=\"her2\">\r\n                        <InputNumber\r\n                            min={0}\r\n                            max={3}\r\n                            defaultValue={0}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('her2') === 2) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"her2FT\">\r\n                                        <InputNumber addonBefore=\"FT\" />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else {\r\n                                form.setFieldValue?.({her2FT:''})\r\n                                return ''\r\n                            }\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <PathologistSelectInput />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='diseaseHistoryFormBloke'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryFormBloke)","\r\n\r\nexport const familyMembersSelectOptions = [\r\n    'Mother',\r\n    'Father',\r\n    'Maternal grandmother',\r\n    'Paternal grandmother',\r\n    'Paternal grandfather',\r\n    'Maternal grandfather',\r\n    'Brother',\r\n    'Sister',\r\n    \"Father's brother\",\r\n    \"Mother's brother\",\r\n    \"Father's sister\",\r\n    \"Mother's sister\",\r\n]","import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy'\r\n\r\nfunction ModalFamilyMemberForm(props) {\r\n\r\n    const { isOpen, onClose, initialRef, finalRef, title, handleEdit, isEdit, handleAdd, form } = props\r\n\r\n\r\n\r\n    const onFinish = () => {\r\n        try {\r\n            const values = form.getFieldsValue()\r\n            const copyValues = deepCopy(values)\r\n            if (isEdit) {\r\n                handleEdit(copyValues)\r\n            }\r\n            else {\r\n                handleAdd(copyValues)\r\n            }\r\n            form.resetFields()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        form.resetFields()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>{title}</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n\r\n                    <Form\r\n                        form={form}\r\n                        labelWrap\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 16,\r\n                        }}\r\n                        style={{\r\n                            maxWidth: 600,\r\n                        }}\r\n                    >\r\n\r\n                        <Form.Item hidden name=\"Id\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item hidden name=\"familyMember\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Trauma\" name=\"familyMemberInjury\">\r\n                            <Input\r\n                                ref={initialRef}\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Deceased of cancer\" name=\"familyMemberDied\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Living with cancer\" name=\"familyMemberCurrentCancer\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Description\" name=\"familyMemberDesc\">\r\n                            <Input.TextArea showCount maxLength={3000}\r\n                                rows={3}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button\r\n                        type='primary'\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                        onClick={onFinish}\r\n                    >\r\n                        {isEdit ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalFamilyMemberForm","import React, { memo, useState } from 'react'\r\nimport { familyMembersSelectOptions } from '../../../../../modules/consts'\r\nimport { Alert, Button, Form, Select, Space } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nconst arrSeveralAdd = [\r\n    \"Brother\",\r\n    \"Sister\",\r\n    \"Father's-brother\",\r\n    \"Mother's-brother\",\r\n    \"Father's-sister\",\r\n    \"Mother's-sister\",\r\n];\r\n\r\nfunction HeaderFamilyMembersList() {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n    const [selectedMember, setSelectedMember] = useState()\r\n    const [countAddedFM, setCountAddedFM] = useState({});\r\n    const [isShowAlert, setIsShowAlert] = useState(false)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = (memberData) => {\r\n        memberData.familyMember = selectedMember\r\n        let id = new Date().getTime()\r\n        memberData.Id = id\r\n        setFamilyMembersList(prev => [...prev, memberData])\r\n        onClose()\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setIsShowAlert(false)\r\n        setSelectedMember(e)\r\n    }\r\n\r\n    const handleCloseAlert = () => {\r\n        setIsShowAlert(false)\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (!selectedMember) {\r\n            return\r\n        } else {\r\n            const findEl = familyMembersList.find((i) => i.familyMember === selectedMember)\r\n\r\n            if (!findEl) {\r\n                setSelectedMember(selectedMember)\r\n                onOpen()\r\n            } else if (arrSeveralAdd.includes(selectedMember)) {\r\n                let s = selectedMember;\r\n                let count = countAddedFM[selectedMember] || 2;\r\n                let newSelectedMember = s + \"_\" + count;\r\n                count += 1;\r\n                setCountAddedFM({ [selectedMember]: count });\r\n                setSelectedMember(newSelectedMember)\r\n                onOpen()\r\n            } else {\r\n                setIsShowAlert(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Form.Item labelAlign='left' label=\"Family members\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                    <Select\r\n                        onChange={onChange}\r\n                        allowClear\r\n                        ref={finalRef}\r\n                    >\r\n                        {familyMembersSelectOptions.map(i => {\r\n                            return (\r\n                                <Select.Option key={i} value={i}>{i}</Select.Option>\r\n                            )\r\n                        })}\r\n                    </Select>\r\n                    <Button disabled={!selectedMember} onClick={onClick}><PlusOutlined /></Button>\r\n                </Space.Compact>\r\n            </Form.Item>\r\n\r\n            {isShowAlert && <Alert\r\n                closable\r\n                afterClose={handleCloseAlert} \r\n                message=\"Selected family member already added\" type=\"info\"\r\n\r\n            />}\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedMember}\r\n                handleAdd={handleAdd}\r\n                form={form}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderFamilyMembersList)","import React, { memo, useState } from 'react'\r\nimport { Form, List } from 'antd'\r\nimport { Box, Flex, IconButton, Spacer, useDisclosure } from '@chakra-ui/react'\r\nimport HeaderFamilyMembersList from './HeaderFamilyMembersList'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\nfunction FamilyMembersList() {\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const [selectedListItem, setSelectedListItem] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n\r\n    const onClick = (item) => {\r\n        form.setFieldsValue(item)\r\n        setSelectedListItem(item)\r\n        onOpen()\r\n    }\r\n\r\n    const handleEdit = (memberData) => {\r\n        const newList = familyMembersList.map(i => {\r\n            if (i.Id === memberData.Id) return memberData\r\n            else return i\r\n        })\r\n        onClose()\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n    const handleDelete = (e,item) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newList = familyMembersList.filter(i => i.Id !== item.Id)\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n\r\n    return (\r\n        <Form.Item noStyle >\r\n\r\n            <List\r\n                size=\"small\"\r\n                header={<HeaderFamilyMembersList />}\r\n                bordered\r\n                dataSource={familyMembersList}\r\n                renderItem={(item, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={item.Id}\r\n                            onClick={() => onClick(item)}\r\n                            _hover={{ bg: 'pink.200' }}\r\n                            cursor='pointer'\r\n                        >\r\n                            <List.Item>\r\n                                <Flex w='100%'>\r\n                                    <Box>{index + 1}. {item.familyMember}</Box>\r\n                                    <Spacer />\r\n                                    <IconButton\r\n                                        isRound\r\n                                        variant='ghost'\r\n                                        fontWeight='bold'\r\n                                        size='xs'\r\n                                    >\r\n                                        <Box onClick={(e) => handleDelete(e,item)} color='pink.500'>X</Box>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            </List.Item>\r\n                        </Box>\r\n                    )\r\n                }}\r\n            />\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedListItem?.familyMember}\r\n                isEdit={true}\r\n                handleEdit={handleEdit}\r\n                form={form}\r\n            />\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nexport default memo(FamilyMembersList)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Input, Radio, Select, Form } from 'antd';\r\nimport React, { memo } from 'react'\r\nimport FamilyMembersList from '../FamilyMembersList';\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js';\r\n\r\nfunction BlockForm() {\r\n\r\n    const { diseaseHistoryForm } = useGlobalContext()\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n                    <Input.TextArea showCount maxLength={3000} allowClear rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Received traumas\" name=\"receivedTraumas\">\r\n                    <Radio.Group\r\n                    >\r\n                        <Radio value={1}>Yes</Radio>\r\n                        <Radio value={2}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.receivedTraumas !== currentValues.receivedTraumas}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('receivedTraumas') === 1 ? (\r\n                            <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                                <Input.TextArea showCount maxLength={3000} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Benign\" name=\"beniqen\">\r\n                    <Select>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <FamilyMembersList />\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(BlockForm)\r\n\r\n\r\n\r\n","import { Box, Circle } from '@chakra-ui/react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport React, { memo, useEffect, useRef, useState } from 'react'\r\nimport CanvasDraw from 'react-canvas-draw'\r\nimport { useStore } from '../../../../../../modules/store'\r\n\r\n\r\nfunction CanvasComponent({ image, imageName }) {\r\n\r\n    const descriptionsCanvas = useStore(store => store.descriptionsCanvas)\r\n    const setDescriptionsCanvas = useStore(store => store.setDescriptionsCanvas)\r\n\r\n    const savedDrawingCanvas = useStore(store => store.savedDrawingCanvas)\r\n    const setSavedDrawingCanvas = useStore(store => store.setSavedDrawingCanvas)\r\n\r\n    const refCanvas = useRef(null);\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const [colorCanvas, setColorCanvas] = useState('green')\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\r\n\r\n    const [X_PositionMouse, setX_PositionMouse] = useState()\r\n    const [Y_PositionMouse, setY_PositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setX_PositionMouse(event.nativeEvent.offsetX);\r\n        setY_PositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        arr.forEach((i, index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if (isY === true && isX === true && !isIf) {\r\n                    isIf = true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if (d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({ num, index: indexD })\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    const description = descriptionsCanvas[imageName + i.brushColor + findEl.num]\r\n                    form.setFieldsValue({ description })\r\n                    setColorCanvas(i.brushColor)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (disableCanvas) {\r\n            let data = refCanvas.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, X_PositionMouse, Y_PositionMouse)\r\n        }\r\n    };\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n    }\r\n\r\n    const onChangeCanvas = () => {\r\n        form.setFieldsValue({ description: '' })\r\n        setDisableSaveBtn(false)\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        if (Object.hasOwn(descriptionsCanvas, objProperty)) {\r\n            form.setFieldsValue({ description: descriptionsCanvas[objProperty] })\r\n        } else {\r\n            form.setFieldsValue({ description: '' })\r\n        }\r\n    }, [colorCanvas]);\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = imageName + colorCanvas + colorNumber;\r\n        descriptionsCanvas[objProperty] = e.target.value;\r\n        setDescriptionsCanvas(descriptionsCanvas);\r\n    };\r\n\r\n    const computationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = refCanvas.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if (i.brushColor === colorCanvas) {\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setBrushRadius(20);\r\n        setDisableCanvas(false);\r\n    };\r\n    const handleSave = () => {\r\n        setBrushRadius(0);\r\n        setDisableSaveBtn(true);\r\n        setDisableCanvas(true);\r\n        let data = refCanvas.current.getSaveData();\r\n        savedDrawingCanvas[imageName] = data;\r\n        setSavedDrawingCanvas(savedDrawingCanvas);\r\n    };\r\n    const handleClear = () => {\r\n        refCanvas.current.undo();\r\n    };\r\n\r\n    return (\r\n        <Box bg='pink.100' p='1' borderRadius='10px'>\r\n\r\n            <Form\r\n                form={form}\r\n                onFieldsChange={onFieldsChange}\r\n                labelAlign='left'\r\n                style={{ width: '100%' }}\r\n            >\r\n\r\n                <Space.Compact width='100%' style={{ width: \"100%\", alignItems: 'center' }}>\r\n\r\n                    <Form.Item\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        <Form.Item noStyle name=\"colorCanvas\">\r\n                            <Select\r\n                                onSelect={(e) => setColorCanvas(e)}\r\n                                defaultValue='green'\r\n                                suffixIcon={<Circle mr='4' size='20px' bg={colorCanvas} />}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n                                <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n                                <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n                                <Select.Option value=\"blue\">My operation</Select.Option>\r\n                                <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button onClick={handleAdd}>Edit</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button disabled={disableSaveBtn} type='primary' onClick={handleSave}>Save</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button onClick={handleClear}>Clear</Button>\r\n                    </Form.Item>\r\n\r\n                </Space.Compact>\r\n\r\n                <Form.Item label='Description' name='description'>\r\n                    <Input.TextArea disabled={disableSaveBtn} showCount maxLength={3000}\r\n                        onChange={onChangeDescription}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Box\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                position=\"relative\"\r\n                paddingBottom=\"100%\"\r\n                onMouseMove={handleMouseMove}\r\n                onClick={onClick}\r\n            >\r\n                <CanvasDraw\r\n                    style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n                    imgSrc={image}\r\n                    className=\"canvas-draw\"\r\n                    brushColor={colorCanvas}\r\n                    ref={refCanvas}\r\n                    onChange={onChangeCanvas}\r\n                    disabled={disableCanvas}\r\n                    brushRadius={brushRadius}\r\n                    saveData={savedDrawingCanvas ? savedDrawingCanvas[imageName] : \"\"\r\n                    }\r\n                />\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(CanvasComponent)","import { Grid, GridItem } from '@chakra-ui/react'\r\nimport React, { memo } from 'react'\r\nimport Canvas from './Canvas'\r\nimport image from '../../../../../modules/images/man.png'\r\n\r\nfunction BlockCanvas() {\r\n\r\n    return (\r\n        <Grid\r\n            templateRows='repeat(2, 1fr)'\r\n            templateColumns='repeat(5, 1fr)'\r\n            gap={4}\r\n            borderRadius='10px'\r\n        >\r\n            <GridItem borderRadius='10px' rowSpan={2} colSpan={[5, 5, 5, 3]} >\r\n\r\n                <Canvas imageName='image1' image={image} />\r\n\r\n            </GridItem>\r\n\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]} >\r\n\r\n                <Canvas imageName='image2' image={image} />\r\n\r\n            </GridItem>\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]}>\r\n\r\n                <Canvas imageName='image3' image={image} />\r\n\r\n            </GridItem>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(BlockCanvas)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteDiseaseHistoryTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteDiseaseHistoryTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction DiseaseHistoryTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    const setDiseaseHistoryTableSetting = useLocalStorageStore((store) => store.setDiseaseHistoryTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(diseaseHistoryTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setDiseaseHistoryTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setDiseaseHistoryTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = diseaseHistoryTableSetting\r\n            ? diseaseHistoryTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [diseaseHistoryTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTableSetting)","import { Box, Flex, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteDiseaseHistoryTableRow from '../DeleteDiseaseHistoryTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport DiseaseHistoryTableSetting from './DiseaseHistoryTableSetting';\r\n\r\nfunction DiseaseHistoryTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return diseaseHistoryTableSetting?.find(i => i.dataIndex === dataIndex) ? diseaseHistoryTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const { erN, prN } = record\r\n        let initialForm = {\r\n            ...record,\r\n            ihkEr: erN ? 1 : 2,\r\n            ihkPr: prN ? 1 : 2,\r\n        }\r\n        form.setFieldsValue(initialForm)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n                isVisible: visible('complaintBreastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n                isVisible: visible('durationOfIllness'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n                isVisible: visible('complaintDescription'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value, row) => {\r\n                    if (+value === 2) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>{value}</Box>\r\n                                <Flex>\r\n                                    <Box>FT:</Box>\r\n                                    <Box ml='2' color='blue.400' fontWeight='semibold'>{row.her2FT}</Box>\r\n                                </Flex>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <Tooltip placement=\"topLeft\" title={value}>\r\n                                {value}\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceDiseaseHistoryTable.filter(i => i.id !== row.id)\r\n                        setDataSourceDiseaseHistoryTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteDiseaseHistoryTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, diseaseHistoryTableSetting, dataSourceDiseaseHistoryTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <DiseaseHistoryTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceDiseaseHistoryTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTable)","import React, { memo, useState } from 'react'\r\nimport DiseaseHistoryFormBloke from './modules/components/DiseaseHistoryFormBloke'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport BlockForm from './modules/components/BlockForm'\r\nimport BlockCanvas from './modules/components/BlockCanvas'\r\nimport { Box } from '@chakra-ui/react'\r\nimport DiseaseHistoryTable from './modules/components/DiseaseHistoryTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction DiseaseHistory() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <DiseaseHistoryFormBloke form={form} selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <DiseaseHistoryTable form={form} selectedRowKey={selectedRowKey}\r\n                        setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockForm />\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockCanvas />\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistory)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","personInfoForm","diseaseHistoryForm","familyMembersList","treatmentHistoryForm","_useMediaQuery","useMediaQuery","isLargerThan600","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","patientId","_patientForm$getField","getFieldsValue","patientName","patientSurName","patientPatronymic","_personInfoForm$getFi","birthDate","alkogol","smoke","sendObj","_objectSpread","dayjs","format","postPersonInfo","saveMorby","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","saveVisit","patientVisitsList","postVisit","saveAnalyses","analyzesMediaList","postAnalyses","saveTreatment","treatmentDynamics","postTreatment","handleSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","setTimeout","fetchPatientId","sent","Promise","all","stop","apply","arguments","boxShadow","p","bg","borderRadius","_jsxs","Form","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","PathologistSelectInput","_useQuery","useQuery","fetchPathologistsPlace","enabled","pathologistsList","data","refetch","Select","allowClear","lazyLoad","onFocus","map","i","value","pathologistName","pathologistId","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","sendRequest","abrupt","t0","_ref2","_callee2","obj","_context2","_x","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","parse","DiseaseHistoryFormBloke","props","selectedRowKey","setSelectedRowKey","setDataSourceDiseaseHistoryTable","values","newData","Date","getTime","_toConsumableArray","resetFields","SimpleGrid","columns","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","showCount","maxLength","rows","Radio","direction","shouldUpdate","prevValues","currentValues","ihkEr","getFieldValue","ihkPr","min","max","defaultValue","her2","_form$setFieldValue","setFieldValue","call","her2FT","offset","familyMembersSelectOptions","onClose","initialRef","finalRef","handleEdit","isEdit","handleAdd","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ref","ModalFooter","block","PlusOutlined","copyValues","error","console","log","arrSeveralAdd","HeaderFamilyMembersList","_useDisclosure","useDisclosure","onOpen","setFamilyMembersList","React","selectedMember","setSelectedMember","_useState3","_useState4","countAddedFM","setCountAddedFM","_useState5","_useState6","isShowAlert","setIsShowAlert","_Form$useForm","_Fragment","width","onChange","disabled","find","familyMember","includes","s","count","newSelectedMember","_defineProperty","Alert","closable","afterClose","ModalFamilyMemberForm","memberData","Id","FamilyMembersList","selectedListItem","setSelectedListItem","List","header","bordered","dataSource","renderItem","item","index","setFieldsValue","_hover","Flex","w","Spacer","fontWeight","preventDefault","newList","filter","handleDelete","BlockForm","gap","receivedTraumas","CanvasComponent","image","imageName","setDescriptionsCanvas","setSavedDrawingCanvas","refCanvas","useRef","colorCanvas","setColorCanvas","disableCanvas","setDisableCanvas","brushRadius","setBrushRadius","_useState7","_useState8","disableSaveBtn","setDisableSaveBtn","_useState9","_useState10","X_PositionMouse","setX_PositionMouse","_useState11","_useState12","Y_PositionMouse","setY_PositionMouse","useEffect","colorNumber","computationColorNumber","objProperty","Object","hasOwn","description","_data","current","getSaveData","lines","forEach","brushColor","onFieldsChange","_ref3$","alignItems","onSelect","suffixIcon","Circle","mr","undo","target","h","position","paddingBottom","onMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","arr","x","y","isIf","points","c","isX","Math","abs","round","num","arrSelectedColors","d","indexD","push","findEl","f","CanvasDraw","height","imgSrc","className","saveData","BlockCanvas","Grid","templateRows","templateColumns","GridItem","rowSpan","colSpan","Canvas","DeleteDiseaseHistoryTableRow","DiseaseHistoryTableSetting","setIsOpen","diseaseHistoryTableSetting","useLocalStorageStore","setDiseaseHistoryTableSetting","onChangeCheckbox","dataIndex","isVisible","checked","copyCTS","colArr","useMemo","Checkbox","defaultChecked","DiseaseHistoryTable","isLargerThan400","visible","defaultVisible","length","undefined","ellipsis","render","Tooltip","placement","justifyContent","pr","ml","row","align","display","flexDirection","alignSelf","Table","scroll","window","innerHeight","pagination","rowClassName","record","onRow","erN","prN","initialForm","onRowTable","DiseaseHistory","my","border"],"sourceRoot":""}