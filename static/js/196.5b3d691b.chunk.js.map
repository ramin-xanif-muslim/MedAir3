{"version":3,"file":"static/js/196.5b3d691b.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","pages/Visits/modules/components/VisitsTableSetting.js","pages/Visits/modules/components/DeleteVisitsTableRow/index.js","pages/Visits/modules/components/VisitsTable/index.js","pages/Visits/modules/components/VisitsFormBloke/index.js","pages/Visits/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo, useState } from 'react'\r\nimport { Button, Form, Space, message, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport dayjs from 'dayjs'\r\n// import { MaskedInput } from \"antd-mask-input\";\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const { patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const savePersonInfo = (patientId) => {\r\n            const {\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n            } = patientForm.getFieldsValue()\r\n\r\n            let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n\r\n            const sendObj = {\r\n                ...personInfoForm.getFieldsValue(),\r\n                birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n                alkogol: alkogol ? 1 : 0,\r\n                smoke: smoke ? 1 : 0,\r\n                patientName,\r\n                patientSurName,\r\n                patientPatronymic,\r\n                patientId,\r\n            };\r\n\r\n            postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n            savedDrawingCanvas.deseaseImageDesc =\r\n                JSON.stringify(descriptionsCanvas);\r\n\r\n            const sendObj = {\r\n                ...diseaseHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                familyMembersList,\r\n                deseaseImagesList: savedDrawingCanvas,\r\n                deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n            };\r\n            postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n            const sendObj = {\r\n                patientVisitsList: dataSourceVisitTable,\r\n                patientId\r\n            };\r\n            postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n            const sendObj = {\r\n                analyzesMediaList: dataSourceAnalysisTable,\r\n                patientId\r\n            };\r\n            postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n            const sendObj = {\r\n                ...treatmentHistoryForm.getFieldsValue(),\r\n                patientId,\r\n                treatmentDynamics: dataSourceTreatmentTable,\r\n                recipeList,\r\n            };\r\n            postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../modules/store';\r\nimport { deepCopy } from '../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../components/TableSetting';\r\n\r\nfunction VisitsTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const visitsTableSetting = useLocalStorageStore((store) => store.visitsTableSetting)\r\n    const setVisitsTableSetting = useLocalStorageStore((store) => store.setVisitsTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(visitsTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setVisitsTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setVisitsTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = visitsTableSetting\r\n            ? visitsTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [visitsTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(VisitsTableSetting)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport VisitsTableSetting from '../VisitsTableSetting'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteVisitsTableRow from '../DeleteVisitsTableRow'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction VisitsTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const visitsTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return visitsTableSetting?.find(i => i.dataIndex === dataIndex) ? visitsTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const {\r\n            visitDate,\r\n            benignDescription,\r\n            usmDescription,\r\n            bloodDescription,\r\n            lungsDescription,\r\n            reasonDescription,\r\n        } = record\r\n\r\n        let newData = {\r\n            ...record,\r\n            usm: usmDescription ? true : false,\r\n            blood: bloodDescription ? true : false,\r\n            lungs: lungsDescription ? true : false,\r\n            reason: reasonDescription ? true : false,\r\n            visitDate: dayjs(visitDate),\r\n            Prophylactic: benignDescription ? \"Benign\" : \"Maligant\",\r\n        }\r\n        form.setFieldsValue(newData)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"visitDate\",\r\n                key: \"visitDate\",\r\n                isVisible: visible('visitDate'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Status\",\r\n                dataIndex: \"status\",\r\n                key: \"status\",\r\n                isVisible: visible('status'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Visit type\",\r\n                dataIndex: \"visitType\",\r\n                key: \"visitType\",\r\n                isVisible: visible('visitType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Reason\",\r\n                dataIndex: \"visitReason\",\r\n                key: \"visitReason\",\r\n                isVisible: visible('visitReason'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"visitDesc\",\r\n                key: \"visitDesc\",\r\n                isVisible: visible('visitDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceVisitTable.filter(i => i.id !== row.id)\r\n                        setDataSourceVisitTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteVisitsTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, visitsTableSetting, dataSourceVisitTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <VisitsTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceVisitTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(VisitsTable)","import React, { memo, useEffect, useState } from 'react'\r\nimport { Button, Checkbox, DatePicker, Form, Input, Radio, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\nimport { useQuery } from 'react-query';\r\nimport { fetchManagersPlace } from '../../../../../modules/api';\r\n\r\n\r\nfunction VisitsFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const onFinish = (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceVisitTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        values.visitDate = dayjs(values.visitDate).format('YYYY-MM-DD HH:mm')\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceVisitTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                values.visitDate = dayjs(values.visitDate).format('YYYY-MM-DD HH:mm')\r\n                setDataSourceVisitTable([...dataSourceVisitTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const managersPlaces = useLocalStorageStore(store => store.managersPlaces);\r\n    const setManagersPlaces = useLocalStorageStore(store => store.setManagersPlaces);\r\n\r\n    const { data, isFetching } = useQuery([\"managers/places\"], fetchManagersPlace)\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && data) {\r\n            setManagersPlaces(data)\r\n        }\r\n    }, [isFetching])\r\n\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='visitTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Date' name=\"visitDate\">\r\n                    <DatePicker\r\n                        format=\"YYYY-MM-DD HH:mm\"\r\n                        defaultValue={dayjs()}\r\n                        showTime\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Address\" name=\"placeName\" >\r\n                    <Select allowClear>\r\n                        {managersPlaces.map((i) => {\r\n                            let val =\r\n                                i.placeName +\r\n                                \" \" +\r\n                                i.placeCity +\r\n                                \" \" +\r\n                                i.placeCountry;\r\n                            return <Select.Option value={val}>{val}</Select.Option>;\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Status\" name=\"status\">\r\n                    <Select allowClear >\r\n                        <Select.Option value=\"Unsolved\">Unsolved</Select.Option>\r\n                        <Select.Option value=\"Approved\">Approved</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={\"Reception Type\"} name=\"visitType\">\r\n                    <Select\r\n                        allowClear\r\n                        defaultValue='Face to face'\r\n                    >\r\n                        <Select.Option value=\"Face to face\">Face to face</Select.Option>\r\n                        <Select.Option value=\"By phone\">By phone</Select.Option>\r\n                        <Select.Option value=\"By chat\">By chat</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={\"Visit reason\"} name=\"visitReason\">\r\n                    <Select\r\n                        allowClear\r\n                    >\r\n                        <Select.Option value=\"Inspection\">Inspection</Select.Option>\r\n                        <Select.Option value=\"Treatment\">Treatment</Select.Option>\r\n                        <Select.Option value=\"Operation\">Operation</Select.Option>\r\n                        <Select.Option value=\"Control\">Control</Select.Option>\r\n                        <Select.Option value=\"Aesthetics\">Aesthetics</Select.Option>\r\n                        <Select.Option value=\"Prophylactic\">Prophylactic</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label={\"Description\"}\r\n                    name=\"visitDesc\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='visitTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.visitReason !== currentValues.visitReason}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n                        if (getFieldValue('visitReason') === 'Prophylactic') {\r\n\r\n                            return (\r\n                                <>\r\n                                    <Form.Item name='Prophylactic'>\r\n                                        <Radio.Group>\r\n                                            <Radio.Button value=\"Maligant\">Maligant</Radio.Button>\r\n                                            <Radio.Button value=\"Benign\">Benign</Radio.Button>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        noStyle\r\n                                        shouldUpdate={(prevValues, currentValues) => prevValues.Prophylactic !== currentValues.Prophylactic}\r\n                                    >\r\n                                        {({ getFieldValue }) =>\r\n                                            getFieldValue('Prophylactic') === 'Maligant' ? (\r\n                                                <>\r\n\r\n                                                    <Form.Item label=\"USM\"  >\r\n                                                        <Form.Item\r\n                                                            valuePropName=\"checked\" noStyle name=\"usm\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"usmDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Blood\"  >\r\n                                                        <Form.Item noStyle name=\"blood\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"bloodDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Lungs\"  >\r\n                                                        <Form.Item noStyle name=\"lungs\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"lungsDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Reason\"  >\r\n                                                        <Form.Item noStyle name=\"reason\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"reasonDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            ) : (\r\n                                                <Form.Item label=\"Description\" name=\"benignDescription\" >\r\n                                                    <Input.TextArea showCount maxLength={3000} />\r\n                                                </Form.Item>\r\n                                            )}\r\n\r\n                                    </Form.Item>\r\n\r\n                                </>\r\n\r\n                            )\r\n                        } else return ''\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='visitTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(VisitsFormBloke)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport VisitsTable from './modules/components/VisitsTable';\r\nimport VisitsFormBloke from './modules/components/VisitsFormBloke';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Visits() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <VisitsFormBloke selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <VisitsTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Visits)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","personInfoForm","diseaseHistoryForm","familyMembersList","treatmentHistoryForm","_useMediaQuery","useMediaQuery","isLargerThan600","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","patientId","_patientForm$getField","getFieldsValue","patientName","patientSurName","patientPatronymic","_personInfoForm$getFi","birthDate","alkogol","smoke","sendObj","_objectSpread","dayjs","format","postPersonInfo","saveMorby","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","saveVisit","patientVisitsList","postVisit","saveAnalyses","analyzesMediaList","postAnalyses","saveTreatment","treatmentDynamics","postTreatment","handleSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","setTimeout","fetchPatientId","sent","Promise","all","stop","apply","arguments","boxShadow","p","bg","borderRadius","_jsxs","Form","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","sendRequest","abrupt","data","t0","_ref2","_callee2","obj","_context2","_x","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","parse","VisitsTableSetting","columns","setIsOpen","visitsTableSetting","useLocalStorageStore","setVisitsTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","DeleteVisitsTableRow","handleDelete","VisitsTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","setDataSourceVisitTable","visible","defaultVisible","length","undefined","find","ellipsis","width","render","value","Tooltip","placement","align","row","index","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","benignDescription","usmDescription","bloodDescription","lungsDescription","reasonDescription","usm","blood","lungs","reason","Prophylactic","setFieldsValue","onRowTable","VisitsFormBloke","values","Date","getTime","resetFields","error","console","log","managersPlaces","setManagersPlaces","_useQuery","useQuery","isFetching","SimpleGrid","gap","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","DatePicker","defaultValue","showTime","Select","allowClear","val","placeName","placeCity","placeCountry","showCount","maxLength","rows","shouldUpdate","prevValues","currentValues","getFieldValue","_Fragment","Radio","valuePropName","offset","Visits","_Form$useForm","my","border"],"sourceRoot":""}