{"version":3,"file":"static/js/375.3b4b00ec.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/EditTableComponent/modules/components/UseTabs.js","components/EditTableComponent/modules/components/CureTabType.js","components/EditTableComponent/modules/components/InputComponent.js","components/EditTableComponent/modules/components/EditInputType.js","components/EditTableComponent/modules/hooks/useChildrenNode.js","components/EditTableComponent/index.js","pages/Medications/index.js","../node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","../node_modules/@ant-design/icons/es/icons/PlusOutlined.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Select } from \"antd\";\r\nimport React, { memo, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport sendRequest from \"../../../../modules/api/sendRequest\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nconst fetchManagersTabs = async () => {\r\n  let res = await sendRequest(\"managers/tabs\");\r\n  if (res?.data) return res.data\r\n};\r\n\r\nconst UseTabs = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n  const onBlur = () => {\r\n    let inputType = 'select'\r\n    save(inputType)\r\n  };\r\n\r\n  const { data: managersList, isLoading, refetch } = useQuery([\"managers/tabs\"], fetchManagersTabs,{\r\n    enabled: false,\r\n  })\r\n\r\n  return (\r\n    <Form.Item\r\n      style={{\r\n        margin: 0,\r\n      }}\r\n      name={dataIndex}\r\n    >\r\n      <Select\r\n        allowClear\r\n        ref={inputRef}\r\n        lazyLoad\r\n        onBlur={onBlur}\r\n        loading={isLoading}\r\n        onFocus={refetch}\r\n      >\r\n        {managersList?.map((c, index) => {\r\n          return (\r\n            <Option key={c.cureTabId} value={JSON.stringify(c)}>\r\n              {c.cureTabName}\r\n            </Option>\r\n          );\r\n        })}\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default memo(UseTabs);\r\n","import { Form, Select } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CureTabType = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n    const onBlur = () => {\r\n        let inputType = 'select'\r\n        save(inputType)\r\n    }\r\n\r\n    return (\r\n        <Form.Item\r\n            style={{\r\n                margin: 0,\r\n            }}\r\n            name={dataIndex}\r\n        >\r\n            <Select\r\n                allowClear\r\n                ref={inputRef}\r\n                lazyLoad\r\n                onBlur={onBlur}\r\n            >\r\n                <Option value=\"Tablet\">Tablet</Option>\r\n                <Option value=\"Ampoule\">Ampoule</Option>\r\n                <Option value=\"Drops\">Drops</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(CureTabType);","import { Form, Input } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst InputComponent = ({ dataIndex, title, inputRef, save }) => {\r\n    return (\r\n        <Form.Item\r\n            name={dataIndex}\r\n        >\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(InputComponent);","import React, { memo } from \"react\";\r\nimport UseTabs from \"./UseTabs\";\r\nimport CureTabType from \"./CureTabType\";\r\nimport InputComponent from \"./InputComponent\";\r\n\r\nconst EditInputType = (props) => {\r\n  const { dataIndex, title, inputRef, save, inputType } = props;\r\n  if (\r\n    dataIndex === \"useTabs\" ||\r\n    (dataIndex === \"cureTabName\" && inputType === \"select\")\r\n  ) {\r\n    return (\r\n      <UseTabs\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else if (dataIndex === \"cureTabType\" && inputType === 'select') {\r\n    return (\r\n      <CureTabType\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <InputComponent\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(EditInputType);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport EditInputType from \"../components/EditInputType\";\r\n\r\nconst useChildrenNode = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    form,\r\n    inputType,\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        if (setShowSaveButton) {\r\n            setShowSaveButton(true);\r\n        }\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (inputType) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            if (Object.keys(values).includes(\"useTabs\") && inputType === 'select') {\r\n                const manager = JSON.parse(values.useTabs);\r\n                values.useTabs = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            if (Object.keys(values).includes(\"cureTabName\")  && inputType === 'select') {\r\n                const manager = JSON.parse(values.cureTabName);\r\n                values.cureTabName = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log(\"Save failed:\", errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <EditInputType\r\n                dataIndex={dataIndex}\r\n                title={title}\r\n                inputRef={inputRef}\r\n                save={save}\r\n                inputType={inputType}\r\n            />\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                    height: \"35px\",\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n    return { childNode };\r\n};\r\n\r\nexport default useChildrenNode;\r\n","import { Form, Table } from \"antd\";\r\nimport React, { memo, useContext } from \"react\";\r\nimport useChildrenNode from \"./modules/hooks/useChildrenNode\";\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    inputType,\r\n    ...restProps\r\n}) => {\r\n    const form = useContext(EditableContext);\r\n\r\n    const { childNode } = useChildrenNode({\r\n        title,\r\n        editable,\r\n        children,\r\n        dataIndex,\r\n        record,\r\n        handleSave,\r\n        setShowSaveButton,\r\n        inputType,\r\n        form,\r\n    });\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nconst EditTable = (props) => {\r\n    const {\r\n        dataSource,\r\n        setDataSource,\r\n        defaultColumns,\r\n        onChange,\r\n    } = props;\r\n\r\n    const handleSave = (row) => {\r\n        const newData = [...dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setDataSource(newData);\r\n        onChange?.()\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n    const columns = defaultColumns?.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                inputType: col.inputType,\r\n                handleSave,\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <div>\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                rowClassName={() => \"editable-row\"}\r\n                components={components}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                pagination={false}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(EditTable);\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport EditTableComponent from '../../components/EditTableComponent'\r\nimport { Button, Tooltip, message } from 'antd'\r\nimport sendRequest from '../../modules/api/sendRequest'\r\nimport { useQuery } from 'react-query'\r\nimport DeleteTableRow from '../../components/DeleteTableRow'\r\n\r\nconst fetchManagersTabs = async () => {\r\n    let res = await sendRequest(\"managers/tabs\");\r\n    if (res?.data) {\r\n        res.data.forEach(i => i.Id = i.cureTabId)\r\n        return res.data\r\n    }\r\n};\r\n\r\n\r\nfunction Medications() {\r\n\r\n    const [disabledShowButton, setDisabledShowButton] = useState(true)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const { data, isFetching, refetch } = useQuery(\"managers/tabs\", fetchManagersTabs)\r\n\r\n    const [list, setList] = useState(data || [])\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && data) {\r\n            setList(data)\r\n        }\r\n    }, [isFetching])\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Name\",\r\n                dataIndex: \"cureTabName\",\r\n                key: \"cureTabName\",\r\n                ellipsis: true,\r\n                editable: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Type\",\r\n                dataIndex: \"cureTabType\",\r\n                key: \"cureTabType\",\r\n                inputType: 'select',\r\n                ellipsis: true,\r\n                editable: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Mg/Ml\",\r\n                dataIndex: \"cureTabSize\",\r\n                key: \"cureTabSize\",\r\n                ellipsis: true,\r\n                editable: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        deletePlace(row)\r\n                    }\r\n                    return (\r\n                        <DeleteTableRow onClick={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [list]);\r\n\r\n    const deleteItem = (delItem) => {\r\n        let newList = list.filter(i => i.Id !== delItem.Id)\r\n        setList(newList)\r\n        message.success('Deleted')\r\n    }\r\n    const deletePlace = async (delItem) => {\r\n        let Id = delItem.visitPlaceId;\r\n        if (!Id) {\r\n            return deleteItem(delItem)\r\n        }\r\n        let res = await sendRequest(\"managers/places/\" + Id, {}, \"delete\");\r\n        if (res?.data === 'success') {\r\n            message.success('Deleted!')\r\n            let newData = list.filter(i => i.Id !== delItem.Id)\r\n            setList(newData)\r\n            refetch()\r\n        } else {\r\n            message.warning('Something get wrong')\r\n        }\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        setLoading(true);\r\n        for (let i = 0; i < list.length; i++) {\r\n            let sendObj = { ...list[i] };\r\n            let res = await sendRequest(\"managers/tabs\", sendObj, \"post\");\r\n            if (res) {\r\n                message.success({\r\n                    content: 'Saved',\r\n                    key: 'save_manager'\r\n                })\r\n                refetch()\r\n            } else {\r\n                message.error('Error')\r\n            }\r\n        }\r\n        setLoading(false)\r\n        setDisabledShowButton(true)\r\n    };\r\n\r\n    const handleAddNew = () => {\r\n        let key = new Date().getTime()\r\n        let newData = { key, Id: key };\r\n        setList(prev => [...prev, newData]);\r\n        setDisabledShowButton(false)\r\n    }\r\n\r\n    const onChange = () => {\r\n        setDisabledShowButton(false)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n\r\n            <Box display='flex' flexDirection='column'>\r\n\r\n                <Button\r\n                    disabled={disabledShowButton}\r\n                    loading={loading}\r\n                    block\r\n                    onClick={handleSave}\r\n                    type='primary'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <EditTableComponent\r\n                    dataSource={list}\r\n                    setDataSource={setList}\r\n                    defaultColumns={columns}\r\n                    onChange={onChange}\r\n                />\r\n\r\n                <Button\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                    onClick={handleAddNew}\r\n                >\r\n                    New\r\n                </Button>\r\n\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Medications","// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","Option","Select","fetchManagersTabs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","sendRequest","sent","data","abrupt","stop","apply","arguments","UseTabs","_ref2","dataIndex","inputRef","save","_useQuery","useQuery","enabled","managersList","isLoading","refetch","Form","style","margin","name","allowClear","ref","lazyLoad","onBlur","loading","onFocus","map","c","index","value","JSON","stringify","cureTabName","cureTabId","CureTabType","_jsxs","InputComponent","Input","onPressEnter","EditInputType","props","inputType","editable","record","handleSave","setShowSaveButton","form","_useState","useState","_useState2","_slicedToArray","editing","setEditing","useRef","useEffect","current","focus","toggleEdit","setFieldsValue","_defineProperty","values","manager","_manager","validateFields","Object","keys","includes","parse","useTabs","cureTabType","_objectSpread","t0","console","log","_x","childNode","className","paddingRight","height","EditableContext","React","EditableRow","_objectWithoutProperties","_excluded","_Form$useForm","component","Provider","EditableCell","restProps","_excluded2","useContext","useChildrenNode","EditTable","dataSource","setDataSource","defaultColumns","onChange","row","newData","_toConsumableArray","findIndex","item","key","splice","components","body","cell","columns","col","onCell","Table","size","bordered","scroll","x","window","innerHeight","rowClassName","pagination","forEach","i","Id","disabledShowButton","setDisabledShowButton","_useState3","_useState4","setLoading","isFetching","_useState5","_useState6","list","setList","useMemo","ellipsis","render","Tooltip","placement","width","align","deletePlace","deleteItem","delItem","newList","filter","message","_callee2","_context2","visitPlaceId","_ref3","_callee3","sendObj","_context3","length","content","boxShadow","p","bg","borderRadius","display","flexDirection","Button","disabled","block","type","EditTableComponent","icon","PlusOutlined","Date","getTime","concat","AntdIcon","PlusOutlinedSvg","displayName"],"sourceRoot":""}