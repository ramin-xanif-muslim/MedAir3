{"version":3,"file":"static/js/838.3039cc53.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/PatientForm/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/functions/deepCopy.js","pages/Analysis/modules/components/DeleteAnalysisTableRow/index.js","pages/Analysis/modules/components/AnalysisTable/AnalysisTableSetting.js","pages/Analysis/modules/components/AnalysisTable/index.js","pages/Analysis/modules/components/UploadForm/index.js","pages/Analysis/modules/components/AnalysisFormBlok/index.js","pages/Analysis/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Input, InputNumber, Button, Space } from \"antd\";\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport React, { memo } from \"react\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useGlobalContext } from \"../../modules/context/index.js\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\n\r\nfunction PatientForm({ button, form, readOnly=false }) {\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { inPatientCollapse, setInPatientCollapse } = useGlobalContext()\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                form={form}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input readOnly={readOnly} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly={readOnly} addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={form}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input readOnly={readOnly} placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"phoneNumber\" name=\"phoneNumber\" label=\"Phone number\">\r\n                            <Input readOnly={readOnly} placeholder=\"Phone number\" />\r\n                            {/* <MaskedInput\r\n                                allowClear\r\n                                style={{ width: \"130px\" }}\r\n                                mask={\"000 000 00 00\"}\r\n                            /> */}\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                {button}\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(PatientForm)","import React, { memo } from 'react'\r\nimport PatientForm from '../PatientForm'\r\nimport { Button, Form, Space, message } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport sendRequest from '../../modules/api/sendRequest'\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nconst fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nconst postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n};\r\n\r\nconst postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nconst postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nconst postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nconst postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nconst ProfilePatientButton = () => {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, familyMembersList, treatmentHistoryForm } = useGlobalContext()\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const handleSave = async () => {\r\n        message.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            if (Object.keys(personInfoForm.getFieldsValue()).length) {\r\n                const {\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                } = patientForm.getFieldsValue()\r\n\r\n                const sendObj = {\r\n                    ...personInfoForm.getFieldsValue(),\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                };\r\n\r\n                postPersonInfo(sendObj);\r\n            }\r\n            if (Object.keys(diseaseHistoryForm.getFieldsValue()).length) {\r\n                savedDrawingCanvas.deseaseImageDesc =\r\n                    JSON.stringify(descriptionsCanvas);\r\n\r\n                const sendObj = {\r\n                    ...diseaseHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n                    familyMembersList,\r\n                    deseaseImagesList: savedDrawingCanvas,\r\n                    deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n                };\r\n                postMorby(sendObj);\r\n            }\r\n            if (dataSourceVisitTable) {\r\n                const sendObj = {\r\n                    patientVisitsList: dataSourceVisitTable,\r\n                    patientId\r\n                };\r\n                postVisit(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    analyzesMediaList: dataSourceAnalysisTable,\r\n                    patientId\r\n                };\r\n                postAnalyses(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    ...treatmentHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n\t\t\t\t\ttreatmentDynamics: dataSourceTreatmentTable,\r\n\t\t\t\t\trecipeList,\r\n                };\r\n                postTreatment(sendObj);\r\n            }\r\n        }\r\n\r\n        //patient\r\n        console.log('patientForm', patientForm.getFieldsValue());\r\n\r\n        //vite\r\n        console.log('personInfoForm', personInfoForm.getFieldsValue());\r\n\r\n        //morby  \r\n        console.log('diseaseHistoryForm', diseaseHistoryForm.getFieldsValue());\r\n        console.log('dataSourceDiseaseHistoryTable', dataSourceDiseaseHistoryTable);\r\n        console.log('familyMembersList', familyMembersList);\r\n        console.log('savedDrawingCanvas', savedDrawingCanvas);\r\n        console.log('descriptionsCanvas', descriptionsCanvas);\r\n\r\n        //visits\r\n        console.log('dataSourceVisitTable', dataSourceVisitTable);\r\n\r\n        //analyses\r\n        console.log('dataSourceAnalysisTable', dataSourceAnalysisTable);\r\n\r\n        //treatment\r\n        console.log('treatmentHistoryForm', treatmentHistoryForm.getFieldsValue());\r\n        console.log('dataSourceTreatmentTable', dataSourceTreatmentTable);\r\n        console.log('recipeList', recipeList);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Form.Item noStyle>\r\n\r\n            <Space>\r\n                <Button\r\n                    onClick={handleSave}\r\n                    form='patientForm'\r\n                    type=\"primary\"\r\n                    htmlType='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <Button danger>\r\n                    Clear\r\n                </Button>\r\n            </Space>\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const { patientForm } = useGlobalContext()\r\n\r\n    return (\r\n        <PatientForm\r\n            form={patientForm}\r\n            button={<ProfilePatientButton />}\r\n            readOnly={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction AnalysisTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.analysisTableSetting)\r\n    const setAnalysisTableSetting = useLocalStorageStore((store) => store.setAnalysisTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(analysisTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setAnalysisTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setAnalysisTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = analysisTableSetting\r\n            ? analysisTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [analysisTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteAnalysisTableRow from '../DeleteAnalysisTableRow'\r\nimport AnalysisTableSetting from './AnalysisTableSetting'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction AnalysisTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return analysisTableSetting?.find(i => i.dataIndex === dataIndex) ? analysisTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const copy = { ...record };\r\n        form.setFieldsValue(copy)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast Type\",\r\n                dataIndex: \"analyzesType\",\r\n                key: \"analyzesType\",\r\n                isVisible: visible('analyzesType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub Type\",\r\n                dataIndex: \"analyzesSubType\",\r\n                key: \"analyzesSubType\",\r\n                isVisible: visible('analyzesSubType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"analyzesDesc\",\r\n                key: \"analyzesDesc\",\r\n                isVisible: visible('analyzesDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Image\",\r\n                dataIndex: \"analyzesContentName\",\r\n                key: \"analyzesContentName\",\r\n                isVisible: visible('analyzesContentName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceAnalysisTable.filter(i => i.id !== row.id)\r\n                        setDataSourceAnalysisTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteAnalysisTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, analysisTableSetting, dataSourceAnalysisTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <AnalysisTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceAnalysisTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTable)","import { Button, Image, Upload } from \"antd\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { UploadOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport sendRequest from \"../../../../../modules/api/sendRequest\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\n\r\nconst UploadForm = ({ form, selectedRowKey }) => {\r\n\r\n    const [imageUrl, setImageUrl] = useState();\r\n    const [imagePdfUrl, setImagePdfUrl] = useState();\r\n\r\n    const showImage = (url) => {\r\n        if (url) {\r\n            const lastDotIndex = url.lastIndexOf(\".\");\r\n            const result = url.substring(lastDotIndex + 1);\r\n            if (result === 'pdf') {\r\n                setImageUrl(null)\r\n                setImagePdfUrl(url)\r\n            } else {\r\n                setImagePdfUrl(null)\r\n                setImageUrl(url)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowKey) {\r\n            const url = form.getFieldsValue().analyzesContentUrl\r\n            showImage(url)\r\n        } else {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n        }\r\n    }, [selectedRowKey])\r\n\r\n    const beforeUpload = async (file) => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        let res = await sendRequest(\"analysesImage\", formData, \"post\");\r\n        if (res?.data) {\r\n            const url = res.data\r\n            showImage(url)\r\n            form.setFieldsValue({ analyzesContentName: file.name });\r\n            form.setFieldsValue({ analyzesContentUrl: res.data });\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handleDeleteImg = () => {\r\n        try {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n            form.setFieldsValue({ analyzesContentName: '', analyzesContentUrl: '' })\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                imageUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <Image width={200} src={imageUrl} />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : imagePdfUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <embed src={imagePdfUrl} type=\"application/pdf\" width=\"100%\" height=\"600px\" \r\n                        />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : (\r\n\r\n                    <Upload\r\n                        accept=\".png,.pdf,.jpeg,.jpg\"\r\n                        listType=\"picture\"\r\n                        beforeUpload={beforeUpload}\r\n                    >\r\n                        {!imageUrl ? (\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                    </Upload>\r\n\r\n                )}\r\n        </>\r\n    );\r\n};\r\nexport default memo(UploadForm);\r\n","import React, { memo } from 'react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport UploadForm from '../UploadForm';\r\nimport { useStore } from '../../../../../modules/store';\r\n\r\nconst breastSelectOpnions = [\r\n    \"USM\",\r\n    \"Mammography\",\r\n    \"Tomosynthesis\",\r\n    \"MRT\",\r\n    \"KT\",\r\n    \"Biopsy\",\r\n    \"Сlips\",\r\n];\r\nconst other = [\r\n    \"Blood analysis\",\r\n    \"USM\",\r\n    \"X-ray\",\r\n    \"Bone osten\",\r\n    \"Bone naf\",\r\n    \"KT\",\r\n    \"Pet\",\r\n    \"Echocardiography\",\r\n    \"Electrocardiography\",\r\n    \"PET-CT\",\r\n    \"PET-MRI\",\r\n];\r\n\r\nfunction AnalysisFormBlok(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const onFinish = (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceAnalysisTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceAnalysisTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                setDataSourceAnalysisTable([...dataSourceAnalysisTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Analyzes type' name=\"analyzesType\">\r\n                    <Select\r\n                        allowClear\r\n                        defaultValue=\"Breast\"\r\n                    >\r\n                        <Select.Option value=\"Breast\">Breast</Select.Option>\r\n                        <Select.Option value=\"Other analysis\">Other analysis</Select.Option>\r\n                        <Select.Option value=\"Other healthcare area\">\r\n                            Other healthcare area\r\n                        </Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesType !== currentValues.analyzesType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n\r\n                        let selectOptions = []\r\n\r\n                        if (getFieldValue('analyzesType') === 'Breast') {\r\n                            selectOptions = breastSelectOpnions\r\n                        } else if (getFieldValue('analyzesType') === 'Other analysis') {\r\n                            selectOptions = other\r\n                        } else if (getFieldValue('analyzesType') === 'Other healthcare area') {\r\n                            return ''\r\n                        }\r\n\r\n                        return (\r\n                            <Form.Item label=\"Analysis sub type\" name=\"analyzesSubType\">\r\n\r\n                                <Select allowClear >\r\n                                    {\r\n                                        selectOptions.map((i) => (\r\n                                            <Select.Option key={i} value={i}>\r\n                                                {i}\r\n                                            </Select.Option>\r\n                                        ))\r\n                                    }\r\n                                </Select>\r\n\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentUrl\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentName\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n\r\n                <Form.Item hidden name='analyzesContentName'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='analyzesContentUrl'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='analysisTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesSubType !== currentValues.analyzesSubType}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('analyzesSubType') ? (\r\n                            <UploadForm form={form} selectedRowKey={selectedRowKey} />\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisFormBlok)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport AnalysisTable from './modules/components/AnalysisTable';\r\nimport AnalysisFormBlok from './modules/components/AnalysisFormBlok';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Analysis() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <AnalysisFormBlok selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <AnalysisTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Analysis)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","PatientForm","button","form","_ref$readOnly","readOnly","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","_useGlobalContext","useGlobalContext","inPatientCollapse","setInPatientCollapse","boxShadow","p","bg","borderRadius","_jsxs","Form","id","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","messageOnSave","res","nameFunc","message","content","key","duration","fetchPatientId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sendRequest","sent","abrupt","data","t0","stop","apply","arguments","postPersonInfo","_ref2","_callee2","obj","_context2","_x","postMorby","_ref3","_callee3","_context3","_x2","postVisit","_ref4","_callee4","_context4","_x3","postAnalyses","_ref5","_callee5","_context5","_x4","postTreatment","_ref6","_callee6","_context6","_x5","ProfilePatientButton","personInfoForm","diseaseHistoryForm","patientForm","familyMembersList","treatmentHistoryForm","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","handleSave","_ref7","_callee7","patientId","_patientForm$getField","patientName","patientSurName","patientPatronymic","_patientId","sendObj","_sendObj","_sendObj4","_context7","getFieldsValue","Object","keys","length","_objectSpread","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","patientVisitsList","analyzesMediaList","treatmentDynamics","console","log","htmlType","danger","ProfilePatientForm","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","deepCopy","parse","DeleteVisitsTableRow","handleDelete","AnalysisTableSetting","columns","_useState","useState","_useState2","setIsOpen","analysisTableSetting","useLocalStorageStore","setAnalysisTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","AnalysisTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","setDataSourceAnalysisTable","visible","defaultVisible","undefined","find","ellipsis","width","render","value","Tooltip","placement","align","row","index","DeleteAnalysisTableRow","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","copy","setFieldsValue","onRowTable","UploadForm","imageUrl","setImageUrl","_useState3","_useState4","imagePdfUrl","setImagePdfUrl","showImage","url","lastDotIndex","lastIndexOf","substring","analyzesContentUrl","beforeUpload","file","formData","FormData","append","analyzesContentName","handleDeleteImg","error","_Fragment","Flex","gap","m","Image","src","_hover","ml","CloseCircleOutlined","height","Upload","accept","listType","UploadOutlined","breastSelectOpnions","other","AnalysisFormBlok","onFinish","values","Date","getTime","concat","resetFields","SimpleGrid","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","Select","allowClear","defaultValue","shouldUpdate","prevValues","currentValues","analyzesType","getFieldValue","selectOptions","showCount","maxLength","rows","analyzesSubType","Analysis","_Form$useForm","my","border"],"sourceRoot":""}