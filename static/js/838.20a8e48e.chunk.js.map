{"version":3,"file":"static/js/838.20a8e48e.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/PatientForm/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","pages/Analysis/modules/components/DeleteAnalysisTableRow/index.js","pages/Analysis/modules/components/AnalysisTable/AnalysisTableSetting.js","pages/Analysis/modules/components/AnalysisTable/index.js","pages/Analysis/modules/components/UploadForm/index.js","pages/Analysis/modules/components/AnalysisFormBlok/index.js","pages/Analysis/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import { Form, Input, InputNumber, Button, Space } from \"antd\";\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport React, { memo } from \"react\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useGlobalContext } from \"../../modules/context/index.js\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\n\r\nfunction PatientForm({ button, form, readOnly=false }) {\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { inPatientCollapse, setInPatientCollapse } = useGlobalContext()\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                form={form}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input readOnly={readOnly} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly={readOnly} addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={form}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input readOnly={readOnly} placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"phoneNumber\" name=\"phoneNumber\" label=\"Phone number\">\r\n                            <Input readOnly={readOnly} placeholder=\"Phone number\" />\r\n                            {/* <MaskedInput\r\n                                allowClear\r\n                                style={{ width: \"130px\" }}\r\n                                mask={\"000 000 00 00\"}\r\n                            /> */}\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                {button}\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(PatientForm)","import React, { memo } from 'react'\r\nimport PatientForm from '../PatientForm'\r\nimport { Button, Form, Space, message } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { useStore } from '../../modules/store'\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from '../../modules/api'\r\n\r\n\r\n\r\nconst ProfilePatientButton = () => {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, familyMembersList, treatmentHistoryForm } = useGlobalContext()\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n    const handleSave = async () => {\r\n        message.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            if (Object.keys(personInfoForm.getFieldsValue()).length) {\r\n                const {\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                } = patientForm.getFieldsValue()\r\n\r\n                const sendObj = {\r\n                    ...personInfoForm.getFieldsValue(),\r\n                    patientName,\r\n                    patientSurName,\r\n                    patientPatronymic,\r\n                    patientId,\r\n                };\r\n\r\n                postPersonInfo(sendObj);\r\n            }\r\n            if (Object.keys(diseaseHistoryForm.getFieldsValue()).length) {\r\n                savedDrawingCanvas.deseaseImageDesc =\r\n                    JSON.stringify(descriptionsCanvas);\r\n\r\n                const sendObj = {\r\n                    ...diseaseHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n                    familyMembersList,\r\n                    deseaseImagesList: savedDrawingCanvas,\r\n                    deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n                };\r\n                postMorby(sendObj);\r\n            }\r\n            if (dataSourceVisitTable) {\r\n                const sendObj = {\r\n                    patientVisitsList: dataSourceVisitTable,\r\n                    patientId\r\n                };\r\n                postVisit(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    analyzesMediaList: dataSourceAnalysisTable,\r\n                    patientId\r\n                };\r\n                postAnalyses(sendObj);\r\n            }\r\n            if (dataSourceAnalysisTable) {\r\n                const sendObj = {\r\n                    ...treatmentHistoryForm.getFieldsValue(),\r\n                    patientId,\r\n\t\t\t\t\ttreatmentDynamics: dataSourceTreatmentTable,\r\n\t\t\t\t\trecipeList,\r\n                };\r\n                postTreatment(sendObj);\r\n            }\r\n        }\r\n\r\n        //patient\r\n        console.log('patientForm', patientForm.getFieldsValue());\r\n\r\n        //vite\r\n        console.log('personInfoForm', personInfoForm.getFieldsValue());\r\n\r\n        //morby  \r\n        console.log('diseaseHistoryForm', diseaseHistoryForm.getFieldsValue());\r\n        console.log('dataSourceDiseaseHistoryTable', dataSourceDiseaseHistoryTable);\r\n        console.log('familyMembersList', familyMembersList);\r\n        console.log('savedDrawingCanvas', savedDrawingCanvas);\r\n        console.log('descriptionsCanvas', descriptionsCanvas);\r\n\r\n        //visits\r\n        console.log('dataSourceVisitTable', dataSourceVisitTable);\r\n\r\n        //analyses\r\n        console.log('dataSourceAnalysisTable', dataSourceAnalysisTable);\r\n\r\n        //treatment\r\n        console.log('treatmentHistoryForm', treatmentHistoryForm.getFieldsValue());\r\n        console.log('dataSourceTreatmentTable', dataSourceTreatmentTable);\r\n        console.log('recipeList', recipeList);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Form.Item noStyle>\r\n\r\n            <Space>\r\n                <Button\r\n                    onClick={handleSave}\r\n                    form='patientForm'\r\n                    type=\"primary\"\r\n                    htmlType='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                <Button danger>\r\n                    Clear\r\n                </Button>\r\n            </Space>\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const { patientForm } = useGlobalContext()\r\n\r\n    return (\r\n        <PatientForm\r\n            form={patientForm}\r\n            button={<ProfilePatientButton />}\r\n            readOnly={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction AnalysisTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.analysisTableSetting)\r\n    const setAnalysisTableSetting = useLocalStorageStore((store) => store.setAnalysisTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(analysisTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setAnalysisTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setAnalysisTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = analysisTableSetting\r\n            ? analysisTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [analysisTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteAnalysisTableRow from '../DeleteAnalysisTableRow'\r\nimport AnalysisTableSetting from './AnalysisTableSetting'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction AnalysisTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return analysisTableSetting?.find(i => i.dataIndex === dataIndex) ? analysisTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const copy = { ...record };\r\n        form.setFieldsValue(copy)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast Type\",\r\n                dataIndex: \"analyzesType\",\r\n                key: \"analyzesType\",\r\n                isVisible: visible('analyzesType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub Type\",\r\n                dataIndex: \"analyzesSubType\",\r\n                key: \"analyzesSubType\",\r\n                isVisible: visible('analyzesSubType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"analyzesDesc\",\r\n                key: \"analyzesDesc\",\r\n                isVisible: visible('analyzesDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Image\",\r\n                dataIndex: \"analyzesContentName\",\r\n                key: \"analyzesContentName\",\r\n                isVisible: visible('analyzesContentName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        let newData = dataSourceAnalysisTable.filter(i => i.id !== row.id)\r\n                        setDataSourceAnalysisTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteAnalysisTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, analysisTableSetting, dataSourceAnalysisTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <AnalysisTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceAnalysisTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTable)","import { Button, Image, Upload } from \"antd\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { UploadOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport sendRequest from \"../../../../../modules/api/sendRequest\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\n\r\nconst UploadForm = ({ form, selectedRowKey }) => {\r\n\r\n    const [imageUrl, setImageUrl] = useState();\r\n    const [imagePdfUrl, setImagePdfUrl] = useState();\r\n\r\n    const showImage = (url) => {\r\n        if (url) {\r\n            const lastDotIndex = url.lastIndexOf(\".\");\r\n            const result = url.substring(lastDotIndex + 1);\r\n            if (result === 'pdf') {\r\n                setImageUrl(null)\r\n                setImagePdfUrl(url)\r\n            } else {\r\n                setImagePdfUrl(null)\r\n                setImageUrl(url)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowKey) {\r\n            const url = form.getFieldsValue().analyzesContentUrl\r\n            showImage(url)\r\n        } else {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n        }\r\n    }, [selectedRowKey])\r\n\r\n    const beforeUpload = async (file) => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        let res = await sendRequest(\"analysesImage\", formData, \"post\");\r\n        if (res?.data) {\r\n            const url = res.data\r\n            showImage(url)\r\n            form.setFieldsValue({ analyzesContentName: file.name });\r\n            form.setFieldsValue({ analyzesContentUrl: res.data });\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handleDeleteImg = () => {\r\n        try {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n            form.setFieldsValue({ analyzesContentName: '', analyzesContentUrl: '' })\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                imageUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <Image width={200} src={imageUrl} />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : imagePdfUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <embed src={imagePdfUrl} type=\"application/pdf\" width=\"100%\" height=\"600px\" \r\n                        />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : (\r\n\r\n                    <Upload\r\n                        accept=\".png,.pdf,.jpeg,.jpg\"\r\n                        listType=\"picture\"\r\n                        beforeUpload={beforeUpload}\r\n                    >\r\n                        {!imageUrl ? (\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                    </Upload>\r\n\r\n                )}\r\n        </>\r\n    );\r\n};\r\nexport default memo(UploadForm);\r\n","import React, { memo } from 'react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport UploadForm from '../UploadForm';\r\nimport { useStore } from '../../../../../modules/store';\r\n\r\nconst breastSelectOpnions = [\r\n    \"USM\",\r\n    \"Mammography\",\r\n    \"Tomosynthesis\",\r\n    \"MRT\",\r\n    \"KT\",\r\n    \"Biopsy\",\r\n    \"Сlips\",\r\n];\r\nconst other = [\r\n    \"Blood analysis\",\r\n    \"USM\",\r\n    \"X-ray\",\r\n    \"Bone osten\",\r\n    \"Bone naf\",\r\n    \"KT\",\r\n    \"Pet\",\r\n    \"Echocardiography\",\r\n    \"Electrocardiography\",\r\n    \"PET-CT\",\r\n    \"PET-MRI\",\r\n];\r\n\r\nfunction AnalysisFormBlok(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const onFinish = (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceAnalysisTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceAnalysisTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                setDataSourceAnalysisTable([...dataSourceAnalysisTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Analyzes type' name=\"analyzesType\">\r\n                    <Select\r\n                        allowClear\r\n                        defaultValue=\"Breast\"\r\n                    >\r\n                        <Select.Option value=\"Breast\">Breast</Select.Option>\r\n                        <Select.Option value=\"Other analysis\">Other analysis</Select.Option>\r\n                        <Select.Option value=\"Other healthcare area\">\r\n                            Other healthcare area\r\n                        </Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesType !== currentValues.analyzesType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n\r\n                        let selectOptions = []\r\n\r\n                        if (getFieldValue('analyzesType') === 'Breast') {\r\n                            selectOptions = breastSelectOpnions\r\n                        } else if (getFieldValue('analyzesType') === 'Other analysis') {\r\n                            selectOptions = other\r\n                        } else if (getFieldValue('analyzesType') === 'Other healthcare area') {\r\n                            return ''\r\n                        }\r\n\r\n                        return (\r\n                            <Form.Item label=\"Analysis sub type\" name=\"analyzesSubType\">\r\n\r\n                                <Select allowClear >\r\n                                    {\r\n                                        selectOptions.map((i) => (\r\n                                            <Select.Option key={i} value={i}>\r\n                                                {i}\r\n                                            </Select.Option>\r\n                                        ))\r\n                                    }\r\n                                </Select>\r\n\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentUrl\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentName\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n\r\n                <Form.Item hidden name='analyzesContentName'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='analyzesContentUrl'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='analysisTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesSubType !== currentValues.analyzesSubType}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('analyzesSubType') ? (\r\n                            <UploadForm form={form} selectedRowKey={selectedRowKey} />\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisFormBlok)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport AnalysisTable from './modules/components/AnalysisTable';\r\nimport AnalysisFormBlok from './modules/components/AnalysisFormBlok';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Analysis() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <AnalysisFormBlok selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <AnalysisTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Analysis)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","PatientForm","button","form","_ref$readOnly","readOnly","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","_useGlobalContext","useGlobalContext","inPatientCollapse","setInPatientCollapse","boxShadow","p","bg","borderRadius","_jsxs","Form","id","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","ProfilePatientButton","personInfoForm","diseaseHistoryForm","patientForm","familyMembersList","treatmentHistoryForm","dataSourceDiseaseHistoryTable","useStore","store","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","handleSave","_asyncToGenerator","_regeneratorRuntime","mark","_callee","patientId","_patientForm$getField","patientName","patientSurName","patientPatronymic","_patientId","sendObj","_sendObj","_sendObj2","_sendObj3","_sendObj4","wrap","_context","next","message","content","key","getFieldsValue","fetchPatientId","sent","Object","keys","length","_objectSpread","postPersonInfo","deseaseImageDesc","JSON","stringify","deseaseImagesList","deseaseHistoryDynamicsList","postMorby","patientVisitsList","postVisit","analyzesMediaList","postAnalyses","treatmentDynamics","postTreatment","console","log","stop","apply","arguments","htmlType","danger","ProfilePatientForm","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","duration","sendRequest","abrupt","data","t0","_ref2","_callee2","obj","_context2","_x","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","deepCopy","parse","DeleteVisitsTableRow","handleDelete","AnalysisTableSetting","columns","_useState","useState","_useState2","setIsOpen","analysisTableSetting","useLocalStorageStore","setAnalysisTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","AnalysisTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","setDataSourceAnalysisTable","visible","defaultVisible","undefined","find","ellipsis","width","render","value","Tooltip","placement","align","row","index","DeleteAnalysisTableRow","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","copy","setFieldsValue","onRowTable","UploadForm","imageUrl","setImageUrl","_useState3","_useState4","imagePdfUrl","setImagePdfUrl","showImage","url","lastDotIndex","lastIndexOf","substring","analyzesContentUrl","beforeUpload","file","formData","FormData","append","analyzesContentName","handleDeleteImg","error","_Fragment","Flex","gap","m","Image","src","_hover","ml","CloseCircleOutlined","height","Upload","accept","listType","UploadOutlined","breastSelectOpnions","other","AnalysisFormBlok","onFinish","values","Date","getTime","resetFields","SimpleGrid","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","Select","allowClear","defaultValue","shouldUpdate","prevValues","currentValues","analyzesType","getFieldValue","selectOptions","showCount","maxLength","rows","analyzesSubType","Analysis","_Form$useForm","my","border"],"sourceRoot":""}