{"version":3,"file":"static/js/196.f1db2d8c.chunk.js","mappings":"sKAKA,SAASA,EAAcC,GAAe,IAAZC,EAAOD,EAAPC,QAEtB,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,KAAe,CAAAC,UACZF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACC,MAAM,MAAML,QAAS,SAACM,GAAC,OAAKA,EAAEC,iBAAiB,EAACJ,UACjDF,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CACPC,MAAM,6CACNC,OAAO,MACPC,WAAW,KACXC,UAAWZ,EAAQG,UAEnBF,EAAAA,EAAAA,KAACY,EAAAA,EAAc,SAKnC,CAEA,KAAeC,EAAAA,EAAAA,MAAKhB,E,kMCbpB,SAASiB,IAEL,IAAAC,GAIIC,EAAAA,EAAAA,KAHAC,EAAWF,EAAXE,YACAC,EAAiBH,EAAjBG,kBACAC,EAAoBJ,EAApBI,qBAIJC,GAA0BC,EAAAA,EAAAA,GAAc,sBAAjCC,GAAsDC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC,GAEdI,GAAwBC,EAAAA,EAAAA,KAAxBD,oBAMRE,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAUF,EAAVE,WAAYC,EAASH,EAATG,UAEdC,GAAiBC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,cAAc,IAE/D,OACI9B,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC8B,UAAU,KAAKC,EAAE,IAAIC,GAAG,WAAWC,aAAa,OAAMlC,UACvDmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDC,GAAG,cACHC,SAAUZ,EACVa,KAAMxB,EACNyB,OAAQpB,EAAkB,SAAW,WACrCQ,eAAgBA,EAAe5B,SAAA,EAE/BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNK,MAAM,OAAMzC,UAEZmC,EAAAA,EAAAA,MAACO,EAAAA,EAAAA,QAAa,CAAA1C,SAAA,EAEVF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EAEPC,KAAK,cAAa5C,UAElBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,YAAY,UAHf,gBAMRhD,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNQ,KAAK,YACLD,SAAO,EAAA3C,UAEPF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAACC,UAAQ,EAACC,YAAY,SAAIH,YAAY,sBAGtDhD,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHC,KAAK,QACLtD,QAAS,kBAAMoB,GAAqB,SAAAmC,GAAI,OAAKA,CAAI,GAAC,EAClDC,KAAMrC,GAAoBlB,EAAAA,EAAAA,KAACwD,EAAAA,EAAiB,KAAMxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAc,YAO7EzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACC,GAAIzC,EAAmB0C,gBAAc,EAAA1D,UAC3CmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDG,KAAMxB,EACNyB,OAAQpB,EAAkB,SAAW,WACrCQ,eAAgBA,EAAe5B,SAAA,EAG/BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAsBQ,KAAK,iBAAiBH,MAAM,WAAUzC,UAClEF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,YAAY,cADR,mBAIfhD,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAyBK,MAAM,aAAaG,KAAK,oBAAmB5C,UAC1EF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,KADK,2BAOvB/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAAA3C,UACdmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAAA1C,SAAA,EACFF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHrD,QAAS6B,EACTa,KAAK,cACLY,KAAK,UACLQ,SAAS,SACTC,QAASjC,EAAU3B,SACtB,UAIDF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QA7ER,WAChByB,GACJ,EA2EkDuC,QAAM,EAAA7D,SAAC,mBAS7D,CAEA,KAAeW,EAAAA,EAAAA,MAAKC,E,qFC1GpB,SAASkD,EAAYlE,GAAmC,IAAhCmE,EAAKnE,EAALmE,MAAOC,EAAMpE,EAANoE,OAAQC,EAAYrE,EAAZqE,aACrC,OACEnE,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACiE,OAAO,UAASlE,UACnBF,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,CACPC,QAAS,CAAC,SACVC,KAAM,CAAEN,MAAAA,GACRO,KAAMN,EACNC,aAAcA,EAAajE,UAE3BF,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CACTC,QAAQ,QACRtE,MAAM,WACNuE,KAAK,KACLC,SAAO,EACP,aAAW,kBACXrB,MAAMvD,EAAAA,EAAAA,KAAC6E,EAAAA,EAAe,SAKhC,CAEA,KAAehE,EAAAA,EAAAA,MAAKmD,E,oSCvBdc,EAAgB,SAACC,EAAKC,GACpBD,GAAsB,kBAARA,EACdE,EAAAA,GAAAA,QAAgB,CACZC,QAASF,EAAW,SACpBG,IAAKH,EAAW,QAChBI,SAAU,IAGdH,EAAAA,GAAAA,MAAc,CACVC,QAASF,EAAW,eACpBG,IAAKH,EAAW,QAChBI,SAAU,GAGtB,EAEaC,EAAc,eAAAvF,GAAAwF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAV,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAArC,KAAAqC,EAAAC,MAAA,cAAAD,EAAArC,KAAA,EAAAqC,EAAAC,KAAA,GAENC,EAAAA,EAAAA,GAAY,YAAa,CAAC,EAAG,OAAO,KAAD,EAA5C,OAAHd,EAAGY,EAAAG,KAAAH,EAAAI,OAAA,SACAhB,EAAIiB,MAAI,OAAAL,EAAArC,KAAA,EAAAqC,EAAAM,GAAAN,EAAA,SAEfV,EAAAA,GAAAA,MAAc,CACVC,QAAOS,EAAAM,GACPd,IAAK,WACLC,SAAU,IACX,yBAAAO,EAAAO,OAAA,GAAAT,EAAA,kBAEV,kBAX0B,OAAA3F,EAAAqG,MAAA,KAAAC,UAAA,KAadC,EAAc,eAAAC,GAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAe,EAAOC,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAe,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAb,MAAA,cAAAa,EAAAb,KAAA,GACpBC,EAAAA,EAAAA,GAAY,OAAQW,EAAK,QAAQ,KAAD,EACd,OAD9BzB,EAAG0B,EAAAX,KACPhB,EAAcC,EAAK,eAAe0B,EAAAV,OAAA,SAC3BhB,GAAG,wBAAA0B,EAAAP,OAAA,GAAAK,EAAA,KACb,gBAJ0BG,GAAA,OAAAJ,EAAAH,MAAA,KAAAC,UAAA,KAMdO,EAAS,eAAAC,GAAAtB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqB,EAAOL,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAoB,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAlB,MAAA,cAAAkB,EAAAlB,KAAA,GACfC,EAAAA,EAAAA,GAAY,QAASW,EAAK,QAAQ,KAAD,EAA7CzB,EAAG+B,EAAAhB,KACPhB,EAAcC,EAAK,mBAAmB,wBAAA+B,EAAAZ,OAAA,GAAAW,EAAA,KACzC,gBAHqBE,GAAA,OAAAH,EAAAT,MAAA,KAAAC,UAAA,KAKTY,EAAS,eAAAC,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0B,EAAOV,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAyB,GAAA,cAAAA,EAAA7D,KAAA6D,EAAAvB,MAAA,cAAAuB,EAAAvB,KAAA,GACfC,EAAAA,EAAAA,GAAY,SAAUW,EAAK,QAAQ,KAAD,EAA9CzB,EAAGoC,EAAArB,KACPhB,EAAcC,EAAK,SAAS,wBAAAoC,EAAAjB,OAAA,GAAAgB,EAAA,KAC/B,gBAHqBE,GAAA,OAAAH,EAAAd,MAAA,KAAAC,UAAA,KAKTiB,EAAY,eAAAC,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAOf,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAA8B,GAAA,cAAAA,EAAAlE,KAAAkE,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,GAClBC,EAAAA,EAAAA,GAAY,WAAYW,EAAK,QAAQ,KAAD,EAAhDzB,EAAGyC,EAAA1B,KACPhB,EAAcC,EAAK,YAAY,wBAAAyC,EAAAtB,OAAA,GAAAqB,EAAA,KAClC,gBAHwBE,GAAA,OAAAH,EAAAnB,MAAA,KAAAC,UAAA,KAKZsB,EAAa,eAAAC,GAAArC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoC,EAAOpB,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAmC,GAAA,cAAAA,EAAAvE,KAAAuE,EAAAjC,MAAA,cAAAiC,EAAAjC,KAAA,GACnBC,EAAAA,EAAAA,GAAY,YAAaW,EAAK,QAAQ,KAAD,EAAjDzB,EAAG8C,EAAA/B,KACPhB,EAAcC,EAAK,aAAa,wBAAA8C,EAAA3B,OAAA,GAAA0B,EAAA,KACnC,gBAHyBE,GAAA,OAAAH,EAAAxB,MAAA,KAAAC,UAAA,KAKb2B,EAAoB,eAAAC,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyC,EAAOzB,GAAG,OAAAjB,EAAAA,EAAAA,KAAAG,MAAA,SAAAwC,GAAA,cAAAA,EAAA5E,KAAA4E,EAAAtC,MAAA,cAAAsC,EAAAnC,OAAA,UAC1CF,EAAAA,EAAAA,GAAY,qBAAsBW,EAAK,SAAO,wBAAA0B,EAAAhC,OAAA,GAAA+B,EAAA,qBADjBE,GAAA,OAAAH,EAAA7B,MAAA,KAAAC,UAAA,KAG3BgC,EAAc,eAAAC,GAAA/C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8C,EAAOC,GAAS,OAAAhD,EAAAA,EAAAA,KAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAAlF,KAAAkF,EAAA5C,MAAA,cAAA4C,EAAAzC,OAAA,UACnCF,EAAAA,EAAAA,GAAY,YAAD4C,OAAaF,KAAY,wBAAAC,EAAAtC,OAAA,GAAAoC,EAAA,qBADpBI,GAAA,OAAAL,EAAAlC,MAAA,KAAAC,UAAA,KAGPuC,EAAc,eAAAC,GAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqD,EAAAC,GAAA,IAAAC,EAAAR,EAAAhG,EAAAyG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjE,EAAAA,EAAAA,KAAAG,MAAA,SAAA+D,GAAA,cAAAA,EAAAnG,KAAAmG,EAAA7D,MAAA,OAAgB,KAAPmD,EAAOD,EAAPC,SAEvBR,UAAU,CAADkB,EAAA7D,KAAA,QACbrD,EAAKwG,EAAQR,UACjBH,EAAe7F,GAAImH,MAAK,SAAC3E,GACb,OAAHA,QAAG,IAAHA,GAAAA,EAAKiB,KAONuC,EAAYQ,EAAQR,UANpBtD,EAAAA,GAAAA,QAAgB,CACZC,QAAS,uBACTC,IAAK,eACLC,SAAU,GAKtB,IAEAmD,EAAYQ,EAAQR,UAAUkB,EAAA7D,KAAA,uBAAA6D,EAAA7D,KAAA,EAEZP,IAAiB,KAAD,EAAlCkD,EAASkB,EAAA3D,KAAA,QA2BX,GAxBEkD,EAOAD,EAPAC,YACAC,EAMAF,EANAE,eACAC,EAKAH,EALAG,kBACAC,EAIAJ,EAJAI,UACAC,EAGAL,EAHAK,YACAC,EAEAN,EAFAM,OACAC,EACAP,EADAO,YAEAC,EAAe,CACfI,kBAAmB,CACf,CACIpB,UAAAA,EACAc,OAAAA,EACAF,UAAAA,EACAG,YAAAA,KAIRE,EAAiB,CACjBjB,UAAAA,EACAS,YAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAE,YAAAA,IAEAb,EAAU,CAADkB,EAAA7D,KAAA,YACJmD,EAAQR,UAAU,CAADkB,EAAA7D,KAAA,gBAAA6D,EAAA7D,KAAA,GACZS,EAAemD,GAAgB,KAAD,UAAAC,EAAA7D,KAAA,GAExBmC,EAAqBwB,GAAc,KAAD,GAA3CE,EAAA3D,KAAA,eAAA2D,EAAA1D,OAAA,UAEJ,GAAI,yBAAA0D,EAAAvD,OAAA,GAAA2C,EAAA,KACd,gBArD0Be,GAAA,OAAAhB,EAAAzC,MAAA,KAAAC,UAAA,KAwDdyD,EAAsB,eAAAC,GAAAxE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuE,IAAA,IAAAhF,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAsE,GAAA,cAAAA,EAAA1G,KAAA0G,EAAApE,MAAA,cAAAoE,EAAApE,KAAA,GAClBC,EAAAA,EAAAA,GAAY,yBAAyB,KAAD,EAA7C,GACA,QADHd,EAAGiF,EAAAlE,YACA,IAAHf,IAAAA,EAAKiB,KAAI,CAAAgE,EAAApE,KAAA,eAAAoE,EAAAjE,OAAA,SACFhB,EAAIiB,MAAI,wBAAAgE,EAAA9D,OAAA,GAAA6D,EAAA,KAEtB,kBALkC,OAAAD,EAAA3D,MAAA,KAAAC,UAAA,KAMtB6D,EAAkB,eAAAC,GAAA5E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2E,IAAA,IAAApF,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAA0E,GAAA,cAAAA,EAAA9G,KAAA8G,EAAAxE,MAAA,cAAAwE,EAAAxE,KAAA,GACdC,EAAAA,EAAAA,GAAY,mBAAmB,KAAD,EAAvC,GACA,QADHd,EAAGqF,EAAAtE,YACA,IAAHf,IAAAA,EAAKiB,KAAI,CAAAoE,EAAAxE,KAAA,eAAAwE,EAAArE,OAAA,SACFhB,EAAIiB,MAAI,wBAAAoE,EAAAlE,OAAA,GAAAiE,EAAA,KAEtB,kBAL8B,OAAAD,EAAA/D,MAAA,KAAAC,UAAA,I,uBC7HxB,SAASiE,EAASrE,GAErB,OADWsE,KAAKC,MAAMD,KAAKE,UAAUxE,GAEzC,C,8ECqCA,IAvCA,WAEI,IAAAjF,GAA2HC,EAAAA,EAAAA,KAAnHyJ,EAAc1J,EAAd0J,eAAgBC,EAAkB3J,EAAlB2J,mBAAoBzJ,EAAWF,EAAXE,YAAa0J,EAAoB5J,EAApB4J,qBAAsBC,EAAoB7J,EAApB6J,qBAAsBC,EAAiB9J,EAAjB8J,kBAE/FC,GAAmC/I,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8I,gCAAgC,IAE7FC,GAAwBhJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM+I,qBAAqB,IAGvEC,GAAwBjJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMgJ,qBAAqB,IAEvEC,GAA0BlJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiJ,uBAAuB,IAE3EC,GAA6BnJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMkJ,0BAA0B,IAEjFC,GAA8BpJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMmJ,2BAA2B,IAEnFC,GAAgBrJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMoJ,aAAa,IAmB7D,MAAO,CAAE5J,oBAhBmB,WACxBqJ,EAAkBQ,cAClBpK,EAAYoK,cACZZ,EAAeY,cACfX,EAAmBW,cACnBT,EAAqBS,cACrBV,EAAqB,IACrBG,EAAiC,IACjCC,EAAsB,CAAC,GACvBC,EAAsB,CAAC,GACvBC,EAAwB,IACxBC,EAA2B,IAC3BC,EAA4B,IAC5BC,EAAc,GAClB,EAGJ,C,8HCgFA,IAjHA,WAEI,IAAAE,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA1CzJ,EAAS2J,EAAA,GAAEC,EAAYD,EAAA,GAE9BzK,GAMIC,EAAAA,EAAAA,KALCC,EAAWF,EAAXE,YACDwJ,EAAc1J,EAAd0J,eACAC,EAAkB3J,EAAlB2J,mBACAgB,EAAiB3K,EAAjB2K,kBACAd,EAAoB7J,EAApB6J,qBAIEe,GAAgC5J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2J,6BAA6B,IACvFC,GAAqB7J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM4J,kBAAkB,IACjEC,GAAqB9J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM6J,kBAAkB,IACjEC,GAAuB/J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8J,oBAAoB,IACrEC,GAA0BhK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM+J,uBAAuB,IAC3EC,GAA2BjK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMgK,wBAAwB,IAC7EC,GAAalK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiK,UAAU,IAGjDC,EAAiB,SAAC3D,GACpB,IAAA4D,EAIIlL,EAAYmL,iBAHZpD,EAAWmD,EAAXnD,YACAC,EAAckD,EAAdlD,eACAC,EAAiBiD,EAAjBjD,kBAGJmD,EAAoC5B,EAAe2B,iBAA7CE,EAASD,EAATC,UAAWC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAEpBzD,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNhC,EAAe2B,kBAAgB,IAClCE,UAAWI,IAAMJ,GAAWK,OAAO,cACnCJ,QAASA,EAAU,EAAI,EACvBC,MAAOA,EAAQ,EAAI,EACnBxD,YAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAX,UAAAA,KAGJlC,EAAAA,EAAAA,IAAe0C,EACnB,EAEM6D,EAAY,SAACrE,GACfqD,EAAmBiB,iBACfvC,KAAKE,UAAUqB,GAEnB,IAAM9C,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN/B,EAAmB0B,kBAAgB,IACtC7D,UAAAA,EACAmD,kBAAAA,EACAoB,kBAAmBlB,EACnBmB,2BAA4BpB,KAEhChF,EAAAA,EAAAA,IAAUoC,EACd,EAEMiE,EAAY,SAACzE,GACf,IAAMQ,EAAU,CACZY,kBAAmBmC,EACnBvD,UAAAA,IAEJvB,EAAAA,EAAAA,IAAU+B,EACd,EAEMkE,EAAe,SAAC1E,GAClB,IAAMQ,EAAU,CACZmE,kBAAmBnB,EACnBxD,UAAAA,IAEJlB,EAAAA,EAAAA,IAAa0B,EACjB,EAEMoE,EAAgB,SAAC5E,GACnB,IAAMQ,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN7B,EAAqBwB,kBAAgB,IACxC7D,UAAAA,EACA6E,kBAAmBpB,EACnBC,WAAAA,KAEJvE,EAAAA,EAAAA,IAAcqB,EAClB,EAEMnH,EAAU,eAAA9B,GAAAwF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAlD,EAAAgG,EAAA,OAAAhD,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAArC,KAAAqC,EAAAC,MAAA,OAMiC,GALhD6F,GAAa,GACb4B,YAAW,WACP5B,GAAa,EACjB,GAAG,OAEClJ,EAAKtB,EAAYmL,iBAAiB7D,WAE/B,CAAD5C,EAAAC,KAAA,QACF2C,EAAYhG,EAAGoD,EAAAC,KAAA,uBAAAD,EAAAC,KAAA,GAEGP,EAAAA,EAAAA,MAAiB,KAAD,EAAlCkD,EAAS5C,EAAAG,KAAA,QAETyC,GACA+E,QAAQC,IAAI,CACRrB,EAAe3D,GACfqE,EAAUrE,GACVyE,EAAUzE,GACV0E,EAAa1E,GACb4E,EAAc5E,KAErB,yBAAA5C,EAAAO,OAAA,GAAAT,EAAA,KACJ,kBAtBe,OAAA3F,EAAAqG,MAAA,KAAAC,UAAA,KAyBhB,MAAO,CAAExE,WAAAA,EAAYC,UAAAA,EACzB,C,uMChHA,SAAS2L,EAAkB1N,GAAe,IAAZ2N,EAAO3N,EAAP2N,QAC1BnC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAApCpH,EAAMsH,EAAA,GAAEkC,EAASlC,EAAA,GAElBmC,GAAqBC,EAAAA,EAAAA,IAAqB,SAAC5L,GAAK,OAAKA,EAAM2L,kBAAkB,IAC7EE,GAAwBD,EAAAA,EAAAA,IAAqB,SAAC5L,GAAK,OAAKA,EAAM6L,qBAAqB,IAEnFC,EAAmB,SAACzN,GACtB,IAAI0N,EAAY1N,EAAE2N,OAAOzL,GACrB0L,EAAY5N,EAAE2N,OAAOE,QACnBC,GAAU9D,EAAAA,EAAAA,GAASsD,GACzBQ,EAAQC,SAAQ,SAAAC,GACRA,EAAEN,YAAcA,IAChBM,EAAEJ,UAAYA,EAEtB,IACAJ,GAAqBS,EAAAA,EAAAA,GAAKH,GAC9B,GAEAI,EAAAA,EAAAA,YAAU,WACN,IAAIC,EAASf,EAAQgB,KAAI,SAAAnI,GAAmC,MAAQ,CAAEnB,IAAvCmB,EAAHnB,IAA+C4I,UAAjCzH,EAATyH,UAAqDE,UAAjC3H,EAAT2H,UAAqDzN,MAArC8F,EAAL9F,MAAiD,IACxGqN,EAAsBW,EAC1B,GAAG,IAEH,IAAMvK,GAAQyK,EAAAA,EAAAA,UAAQ,WAclB,OAbYf,EACY,OAAlBA,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBc,KAAI,SAAAJ,GAAC,MACvB,CACI1L,OAAO3C,EAAAA,EAAAA,KAAC2O,EAAAA,EAAQ,CACZpM,GAAK,OAAD8L,QAAC,IAADA,OAAC,EAADA,EAAGN,UACPa,SAAUd,EACVe,eAAiB,OAADR,QAAC,IAADA,OAAC,EAADA,EAAGJ,UAAU/N,SAE5BmO,EAAE7N,QAEV,IAEH,EAEV,GAAG,CAACmN,IAMJ,OACI3N,EAAAA,EAAAA,KAACgE,EAAAA,EAAY,CACTC,MAAOA,EACPC,OAAQA,EACRC,aARa,SAAC9D,GAClBqN,EAAUrN,EACd,GASJ,CAEA,OAAeQ,EAAAA,EAAAA,MAAK2M,G,UCxDpB,SAASsB,EAAoBhP,GAAkB,IAAhBiP,EAAYjP,EAAZiP,aAC7B,OACE/O,EAAAA,EAAAA,KAACH,EAAAA,EAAc,CAACE,QAASgP,GAE7B,CAEA,OAAelO,EAAAA,EAAAA,MAAKiO,G,mBCDpB,SAASE,EAAYC,GAEjB,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmB1M,EAASwM,EAATxM,KAE3CrB,GAA0BC,EAAAA,EAAAA,GAAc,sBAAjC+N,GAAsD7N,EAAAA,EAAAA,GAAAH,EAAA,GAAvC,GAEhBuM,GAAqBC,EAAAA,EAAAA,IAAqB,SAAC5L,GAAK,OAAKA,EAAMqN,0BAA0B,IAErFvD,GAAuB/J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8J,oBAAoB,IACrEb,GAA0BlJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiJ,uBAAuB,IAE3EqE,EAAU,SAACvB,GAAsC,IAA3BwB,IAAcnJ,UAAAoJ,OAAA,QAAAC,IAAArJ,UAAA,KAAAA,UAAA,GACtC,OAAyB,OAAlBuH,QAAkB,IAAlBA,GAAAA,EAAoB+B,MAAK,SAAArB,GAAC,OAAIA,EAAEN,YAAcA,CAAS,IAAIJ,EAAmB+B,MAAK,SAAArB,GAAC,OAAIA,EAAEN,YAAcA,CAAS,IAAEE,UAAYsB,CAC1I,EAwBMI,GAAoB5N,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2N,iBAAiB,IAE/DlC,GAAUiB,EAAAA,EAAAA,UAAQ,WACpB,MAAO,CACH,CACIlO,MAAO,OACPuN,UAAW,YACX5I,IAAK,YACL8I,UAAWqB,EAAQ,aACnBM,UAAU,EACVC,OAAOT,GAA0B,IACjCU,OAAQ,SAACC,GAAK,OACV/P,EAAAA,EAAAA,KAACgQ,EAAAA,EAAO,CAACC,UAAU,UAAUzP,MAAOuP,EAAM7P,SACrC6P,GACK,GAGlB,CACIvP,MAAO,SACPuN,UAAW,SACX5I,IAAK,SACL8I,UAAWqB,EAAQ,UACnBM,UAAU,EACVC,OAAOT,GAA0B,IACjCU,OAAQ,SAACC,GAAK,OACV/P,EAAAA,EAAAA,KAACgQ,EAAAA,EAAO,CAACC,UAAU,UAAUzP,MAAOuP,EAAM7P,SACrC6P,GACK,GAGlB,CACIvP,MAAO,aACPuN,UAAW,YACX5I,IAAK,YACL8I,UAAWqB,EAAQ,aACnBM,UAAU,EACVC,OAAOT,GAA0B,IACjCU,OAAQ,SAACC,GAAK,OACV/P,EAAAA,EAAAA,KAACgQ,EAAAA,EAAO,CAACC,UAAU,UAAUzP,MAAOuP,EAAM7P,SACrC6P,GACK,GAGlB,CACIvP,MAAO,SACPuN,UAAW,cACX5I,IAAK,cACL8I,UAAWqB,EAAQ,eACnBM,UAAU,EACVC,OAAOT,GAA0B,IACjCU,OAAQ,SAACC,GAAK,OACV/P,EAAAA,EAAAA,KAACgQ,EAAAA,EAAO,CAACC,UAAU,UAAUzP,MAAOuP,EAAM7P,SACrC6P,GACK,GAGlB,CACIvP,MAAO,cACPuN,UAAW,YACX5I,IAAK,YACL8I,UAAWqB,EAAQ,aACnBM,UAAU,EACVC,OAAOT,GAA0B,IACjCU,OAAQ,SAACC,GAAK,OACV/P,EAAAA,EAAAA,KAACgQ,EAAAA,EAAO,CAACC,UAAU,UAAUzP,MAAOuP,EAAM7P,SACrC6P,GACK,GAGlB,CACIvP,MAAO,SACPuN,UAAW,SACX8B,MAAO,GACP1K,IAAK,SACL8I,UAAWqB,EAAQ,UACnBM,UAAU,EACVM,MAAO,SACPJ,OAAQ,SAACC,EAAOI,EAAKC,GAMjB,OACIpQ,EAAAA,EAAAA,KAAC8O,EAAoB,CAACC,aANL,WACjBY,GAAkB,GAClB,IAAIU,EAAUvE,EAAqBwE,QAAO,SAAAjC,GAAC,OAAIA,EAAE9L,KAAO4N,EAAI5N,EAAE,IAC9D0I,EAAwBoF,EAC5B,GAIJ,GAGZ,GAAG,CAACjB,EAAiBzB,EAAoB7B,IAEzC,OACIzJ,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAACoQ,QAAQ,OAAOC,cAAc,SAAQtQ,SAAA,EAEtCF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACsQ,UAAU,WAAUvQ,UACrBF,EAAAA,EAAAA,KAACwN,EAAkB,CAACC,QAASA,OAGjCzN,EAAAA,EAAAA,KAAC0Q,EAAAA,EAAK,CACF/L,KAAK,QACLgM,UAAQ,EACRC,OAAQ,CACJC,EAAGC,OAAOC,aAEdC,YAAY,EACZvD,QAASA,EAAQ6C,QAAO,SAAAjC,GAAC,OAAoB,IAAhBA,EAAEJ,SAAkB,IACjDgD,WAAYnF,EACZoF,aAAc,SAACC,EAAQf,GAAK,OACxBlB,IAAmBkB,EAAQ,EAAI,yBAA2B,EAAE,EAEhEgB,MAAO,SAACD,EAAQf,GAAK,MAAM,CACvBrQ,QAAS,SAACM,IArIP,SAAC8Q,EAAQf,GACxB,IACIjH,EAMAgI,EANAhI,UACAkI,EAKAF,EALAE,kBACAC,EAIAH,EAJAG,eACAC,EAGAJ,EAHAI,iBACAC,EAEAL,EAFAK,iBACAC,EACAN,EADAM,kBAGApB,GAAO5D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJ0E,GAAM,IACTO,MAAKJ,EACLK,QAAOJ,EACPK,QAAOJ,EACPK,SAAQJ,EACRtI,UAAWuD,IAAMvD,GACjB2I,aAAcT,EAAoB,SAAW,aAEjD5O,EAAKsP,eAAe1B,EACxB,CAkHoB2B,CAAWb,GACXhC,EAAkBiB,EAAQ,EAC9B,EACH,MAKjB,CAEA,OAAevP,EAAAA,EAAAA,MAAKmO,G,oGC9JpB,SAASiD,EAAgBhD,GAErB,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmB1M,EAASwM,EAATxM,KAErCqJ,GAAuB/J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8J,oBAAoB,IACrEb,GAA0BlJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiJ,uBAAuB,IAC3E0E,GAAoB5N,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2N,iBAAiB,IAE/DnN,EAAW,SAAC0P,GACdvC,GAAkB,GAClB,IACI,GAAIT,EAAgB,CAChB,IAAImB,EAAUvE,EAAqB2C,KAAI,SAACJ,GACpC,OAAIA,EAAE9L,KAAO2P,EAAO3P,IAChB2P,EAAO/I,UAAYuD,IAAMwF,EAAO/I,WAAWwD,OAAO,qBAClDF,EAAAA,EAAAA,GAAA,GAAYyF,IAGJ7D,CAChB,IACApD,EAAwBoF,EAC5B,KAAO,CACH,IAAI9N,GAAK,IAAI4P,MAAOC,UACpBF,EAAO3P,GAAKA,EACZ2P,EAAO/M,IAAM5C,EACb2P,EAAO/I,UAAYuD,IAAMwF,EAAO/I,WAAWwD,OAAO,oBAClD1B,EAAwB,GAADxC,QAAA6F,EAAAA,EAAAA,GAAKxC,GAAoB,CAAEoG,IACtD,CACAzP,EAAK4I,cACL8D,GACJ,CAAE,MAAOkD,GACLC,QAAQC,IAAI,WAAY,+BAAgCF,EAC5D,CACJ,EAOMG,GAAiB5E,EAAAA,EAAAA,IAAqB,SAAA5L,GAAK,OAAIA,EAAMwQ,cAAc,IACnEC,GAAoB7E,EAAAA,EAAAA,IAAqB,SAAA5L,GAAK,OAAIA,EAAMyQ,iBAAiB,IAE/EC,GAA6BC,EAAAA,EAAAA,UAAS,CAAC,mBAAoB1I,EAAAA,IAAnDjE,EAAI0M,EAAJ1M,KAAM4M,EAAUF,EAAVE,WASd,OAPArE,EAAAA,EAAAA,YAAU,YACDqE,GAAc5M,GACfyM,EAAkBzM,EAE1B,GAAG,CAAC4M,KAKAvQ,EAAAA,EAAAA,MAACwQ,EAAAA,EAAU,CAACpF,QAAS,CAAC,IAAK,KAAMqF,IAAI,IAAG5S,SAAA,EAEpCmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDE,SAAUA,EACVD,GAAG,qBACHE,KAAMA,EACNsQ,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZnT,SAAA,EAGFF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACgR,QAAM,EAACxQ,KAAK,KAAI5C,UACvBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,OAGV/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,OAAOG,KAAK,YAAW5C,UACpCF,EAAAA,EAAAA,KAACuT,EAAAA,EAAU,CACP5G,OAAO,mBACP6G,aAAc9G,MACd+G,UAAQ,OAIhBzT,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,UAAUG,KAAK,YAAW5C,UACvCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAM,CAACC,YAAU,EAAAzT,SACbsS,EAAe/D,KAAI,SAACJ,GACjB,IAAIuF,EACAvF,EAAEwF,UACF,IACAxF,EAAEyF,UACF,IACAzF,EAAE0F,aACN,OAAO/T,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAO6D,EAAI1T,SAAE0T,GACvC,SAIR5T,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,SAASG,KAAK,SAAQ5C,UACnCmC,EAAAA,EAAAA,MAACqR,EAAAA,EAAM,CAACC,YAAU,EAAAzT,SAAA,EACdF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,WAAU7P,SAAC,cAChCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,WAAU7P,SAAC,mBAIxCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAO,iBAAkBG,KAAK,YAAW5C,UAChDmC,EAAAA,EAAAA,MAACqR,EAAAA,EAAM,CACHC,YAAU,EACVH,aAAa,eAActT,SAAA,EAE3BF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,eAAc7P,SAAC,kBACpCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,WAAU7P,SAAC,cAChCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,UAAS7P,SAAC,kBAIvCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAO,eAAgBG,KAAK,cAAa5C,UAChDmC,EAAAA,EAAAA,MAACqR,EAAAA,EAAM,CACHC,YAAU,EAAAzT,SAAA,EAEVF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,aAAY7P,SAAC,gBAClCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,YAAW7P,SAAC,eACjCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,YAAW7P,SAAC,eACjCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,UAAS7P,SAAC,aAC/BF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,aAAY7P,SAAC,gBAClCF,EAAAA,EAAAA,KAAC0T,EAAAA,EAAAA,OAAa,CAAC3D,MAAM,eAAc7P,SAAC,uBAI5CF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNK,MAAO,cACPG,KAAK,YAAW5C,UAEhBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,IAAMC,KAAM,UAKzD7R,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDE,SAAUA,EACVD,GAAG,qBACHE,KAAMA,EACNsQ,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZnT,SAAA,EAEFF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPsR,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAW9K,cAAgB+K,EAAc/K,WAAW,EAACpJ,SAEjG,SAAAJ,GACG,MAAqC,kBAAjCwU,EADSxU,EAAbwU,eACkB,gBAGVjS,EAAAA,EAAAA,MAAAkS,EAAAA,SAAA,CAAArU,SAAA,EACIF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACQ,KAAK,eAAc5C,UAC1BmC,EAAAA,EAAAA,MAACmS,EAAAA,GAAAA,MAAW,CAAAtU,SAAA,EACRF,EAAAA,EAAAA,KAACwU,EAAAA,GAAAA,OAAY,CAACzE,MAAM,WAAU7P,SAAC,cAC/BF,EAAAA,EAAAA,KAACwU,EAAAA,GAAAA,OAAY,CAACzE,MAAM,SAAQ7P,SAAC,iBAIrCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPsR,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWtC,eAAiBuC,EAAcvC,YAAY,EAAC5R,SAEnG,SAAAoG,GAAgB,MACqB,cAAlCgO,EADahO,EAAbgO,eACc,iBACVjS,EAAAA,EAAAA,MAAAkS,EAAAA,SAAA,CAAArU,SAAA,EAEImC,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,MAAKzC,SAAA,EAClBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNmS,cAAc,UAAU5R,SAAO,EAACC,KAAK,MAAK5C,UAC1CF,EAAAA,EAAAA,KAAC2O,EAAAA,EAAQ,OAEb3O,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,iBAAgB5C,UACpCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,YAI7C5R,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,QAAOzC,SAAA,EACpBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,QACpB2R,cAAc,UAASvU,UACvBF,EAAAA,EAAAA,KAAC2O,EAAAA,EAAQ,OAEb3O,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,mBAAkB5C,UACtCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,YAI7C5R,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,QAAOzC,SAAA,EACpBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,QACpB2R,cAAc,UAASvU,UACvBF,EAAAA,EAAAA,KAAC2O,EAAAA,EAAQ,OAEb3O,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,mBAAkB5C,UACtCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,YAI7C5R,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,SAAQzC,SAAA,EACrBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,SACpB2R,cAAc,UAASvU,UACvBF,EAAAA,EAAAA,KAAC2O,EAAAA,EAAQ,OAEb3O,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,oBAAmB5C,UACvCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,eAMjDjU,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,cAAcG,KAAK,oBAAmB5C,UACnDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAACiR,WAAS,EAACC,UAAW,OAE5C,OAOP,EAClB,KAKJjU,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAC6Q,WAAY,CAAEuB,OAAQ,EAAGxB,KAAM,IAAKhT,UAC3CmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAAA1C,SAAA,EAEFF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHX,KAAK,qBACLoB,SAAS,SACTR,KAAK,UAASnD,SAEbgP,EAAiB,OAAS,SAG/BlP,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QArNR,WAChB0C,EAAK4I,cACL8D,GACJ,EAkNkDpL,QAAM,EAAA7D,SAAEgP,EAAiB,QAAU,oBAUzF,CAEA,OAAerO,EAAAA,EAAAA,MAAKoR,G,SCtQpB,SAAS0C,IAEL,IAAArJ,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA/C4D,EAAc1D,EAAA,GAAE2D,EAAiB3D,EAAA,GAExCoJ,EAAetS,EAAAA,EAAAA,UAARG,GAAsBlB,EAAAA,EAAAA,GAAAqT,EAAA,GAAlB,GAEX,OACIvS,EAAAA,EAAAA,MAAAkS,EAAAA,SAAA,CAAArU,SAAA,EACIF,EAAAA,EAAAA,KAACc,EAAAA,EAAkB,KAEnBuB,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAAC+B,EAAE,IAAI2S,GAAG,IAAI5S,UAAU,KAAKE,GAAG,UAAUC,aAAa,OAAMlC,SAAA,EAE7DF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAI2S,GAAG,IAAIC,OAAO,iBAAiB1S,aAAa,OAAOD,GAAI+M,EAAiB,UAAY,GAAGhP,UAE9FF,EAAAA,EAAAA,KAACiS,EAAe,CAAC/C,eAAgBA,EAAgBC,kBAAmBA,EAAmB1M,KAAMA,OAIjGzC,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAI2S,GAAG,IAAIC,OAAO,iBAAiB1S,aAAa,OAAMlC,UAEzDF,EAAAA,EAAAA,KAACgP,EAAW,CAACE,eAAgBA,EAAgBC,kBAAmBA,EAAmB1M,KAAMA,WAO7G,CAEA,OAAe5B,EAAAA,EAAAA,MAAK8T,E","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","modules/hooks/useResetProfilePatient.js","modules/hooks/useSavePatient.js","pages/Visits/modules/components/VisitsTableSetting.js","pages/Visits/modules/components/DeleteVisitsTableRow/index.js","pages/Visits/modules/components/VisitsTable/index.js","pages/Visits/modules/components/VisitsFormBloke/index.js","pages/Visits/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo } from 'react'\r\nimport { Button, Form, Space, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport useResetProfilePatient from '../../modules/hooks/useResetProfilePatient.js'\r\nimport useSavePatient from '../../modules/hooks/useSavePatient.js'\r\nimport { useStore } from '../../modules/store/index.js';\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const {\r\n        patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { resetProfilePatient } = useResetProfilePatient();\r\n\r\n    const handleClear = () => {\r\n        resetProfilePatient()\r\n    }\r\n\r\n    const { handleSave, isLoading } = useSavePatient()\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                        onFieldsChange={onFieldsChange}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\n\r\nfunction useResetProfilePatient() {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, setFamilyMembersList, treatmentHistoryForm, searchPatientForm } = useGlobalContext()\r\n\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const setSavedDrawingCanvas = useStore((store) => store.setSavedDrawingCanvas)\r\n\r\n\r\n    const setDescriptionsCanvas = useStore((store) => store.setDescriptionsCanvas)\r\n\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const setRecipeList = useStore((store) => store.setRecipeList)\r\n\r\n\r\n    const resetProfilePatient = () => {\r\n        searchPatientForm.resetFields()\r\n        patientForm.resetFields()\r\n        personInfoForm.resetFields()\r\n        diseaseHistoryForm.resetFields()\r\n        treatmentHistoryForm.resetFields()\r\n        setFamilyMembersList([])\r\n        setDataSourceDiseaseHistoryTable([])\r\n        setSavedDrawingCanvas({})\r\n        setDescriptionsCanvas({})\r\n        setDataSourceVisitTable([])\r\n        setDataSourceAnalysisTable([])\r\n        setDataSourceTreatmentTable([])\r\n        setRecipeList([])\r\n    }\r\n\r\n    return { resetProfilePatient }\r\n}\r\n\r\nexport default useResetProfilePatient","import dayjs from \"dayjs\"\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from \"../api/index.js\"\r\nimport { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\nimport { useState } from \"react\"\r\n\r\n\r\nfunction useSavePatient() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const {\r\n         patientForm,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n\r\n    const savePersonInfo = (patientId) => {\r\n        const {\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n        } = patientForm.getFieldsValue()\r\n\r\n        let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n        const sendObj = {\r\n            ...personInfoForm.getFieldsValue(),\r\n            birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n            alkogol: alkogol ? 1 : 0,\r\n            smoke: smoke ? 1 : 0,\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n            patientId,\r\n        };\r\n\r\n        postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n        savedDrawingCanvas.deseaseImageDesc =\r\n            JSON.stringify(descriptionsCanvas);\r\n\r\n        const sendObj = {\r\n            ...diseaseHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            familyMembersList,\r\n            deseaseImagesList: savedDrawingCanvas,\r\n            deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n        };\r\n        postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n        const sendObj = {\r\n            patientVisitsList: dataSourceVisitTable,\r\n            patientId\r\n        };\r\n        postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n        const sendObj = {\r\n            analyzesMediaList: dataSourceAnalysisTable,\r\n            patientId\r\n        };\r\n        postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n        const sendObj = {\r\n            ...treatmentHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            treatmentDynamics: dataSourceTreatmentTable,\r\n            recipeList,\r\n        };\r\n        postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return { handleSave, isLoading }\r\n}\r\n\r\nexport default useSavePatient","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../modules/store';\r\nimport { deepCopy } from '../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../components/TableSetting';\r\n\r\nfunction VisitsTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const visitsTableSetting = useLocalStorageStore((store) => store.visitsTableSetting)\r\n    const setVisitsTableSetting = useLocalStorageStore((store) => store.setVisitsTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(visitsTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setVisitsTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setVisitsTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = visitsTableSetting\r\n            ? visitsTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [visitsTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(VisitsTableSetting)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport VisitsTableSetting from '../VisitsTableSetting'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteVisitsTableRow from '../DeleteVisitsTableRow'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction VisitsTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const visitsTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return visitsTableSetting?.find(i => i.dataIndex === dataIndex) ? visitsTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const {\r\n            visitDate,\r\n            benignDescription,\r\n            usmDescription,\r\n            bloodDescription,\r\n            lungsDescription,\r\n            reasonDescription,\r\n        } = record\r\n\r\n        let newData = {\r\n            ...record,\r\n            usm: usmDescription ? true : false,\r\n            blood: bloodDescription ? true : false,\r\n            lungs: lungsDescription ? true : false,\r\n            reason: reasonDescription ? true : false,\r\n            visitDate: dayjs(visitDate),\r\n            Prophylactic: benignDescription ? \"Benign\" : \"Maligant\",\r\n        }\r\n        form.setFieldsValue(newData)\r\n    }\r\n\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"visitDate\",\r\n                key: \"visitDate\",\r\n                isVisible: visible('visitDate'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Status\",\r\n                dataIndex: \"status\",\r\n                key: \"status\",\r\n                isVisible: visible('status'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Visit type\",\r\n                dataIndex: \"visitType\",\r\n                key: \"visitType\",\r\n                isVisible: visible('visitType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Reason\",\r\n                dataIndex: \"visitReason\",\r\n                key: \"visitReason\",\r\n                isVisible: visible('visitReason'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"visitDesc\",\r\n                key: \"visitDesc\",\r\n                isVisible: visible('visitDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = dataSourceVisitTable.filter(i => i.id !== row.id)\r\n                        setDataSourceVisitTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteVisitsTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, visitsTableSetting, dataSourceVisitTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <VisitsTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceVisitTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(VisitsTable)","import React, { memo, useEffect, useState } from 'react'\r\nimport { Button, Checkbox, DatePicker, Form, Input, Radio, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\nimport { useQuery } from 'react-query';\r\nimport { fetchManagersPlace } from '../../../../../modules/api';\r\n\r\n\r\nfunction VisitsFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const onFinish = (values) => {\r\n        setIsFieldsChange(true)\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceVisitTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        values.visitDate = dayjs(values.visitDate).format('YYYY-MM-DD HH:mm')\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceVisitTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                values.visitDate = dayjs(values.visitDate).format('YYYY-MM-DD HH:mm')\r\n                setDataSourceVisitTable([...dataSourceVisitTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const managersPlaces = useLocalStorageStore(store => store.managersPlaces);\r\n    const setManagersPlaces = useLocalStorageStore(store => store.setManagersPlaces);\r\n\r\n    const { data, isFetching } = useQuery([\"managers/places\"], fetchManagersPlace)\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && data) {\r\n            setManagersPlaces(data)\r\n        }\r\n    }, [isFetching])\r\n\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='visitTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Date' name=\"visitDate\">\r\n                    <DatePicker\r\n                        format=\"YYYY-MM-DD HH:mm\"\r\n                        defaultValue={dayjs()}\r\n                        showTime\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Address\" name=\"placeName\" >\r\n                    <Select allowClear>\r\n                        {managersPlaces.map((i) => {\r\n                            let val =\r\n                                i.placeName +\r\n                                \" \" +\r\n                                i.placeCity +\r\n                                \" \" +\r\n                                i.placeCountry;\r\n                            return <Select.Option value={val}>{val}</Select.Option>;\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Status\" name=\"status\">\r\n                    <Select allowClear >\r\n                        <Select.Option value=\"Unsolved\">Unsolved</Select.Option>\r\n                        <Select.Option value=\"Approved\">Approved</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={\"Reception Type\"} name=\"visitType\">\r\n                    <Select\r\n                        allowClear\r\n                        defaultValue='Face to face'\r\n                    >\r\n                        <Select.Option value=\"Face to face\">Face to face</Select.Option>\r\n                        <Select.Option value=\"By phone\">By phone</Select.Option>\r\n                        <Select.Option value=\"By chat\">By chat</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={\"Visit reason\"} name=\"visitReason\">\r\n                    <Select\r\n                        allowClear\r\n                    >\r\n                        <Select.Option value=\"Inspection\">Inspection</Select.Option>\r\n                        <Select.Option value=\"Treatment\">Treatment</Select.Option>\r\n                        <Select.Option value=\"Operation\">Operation</Select.Option>\r\n                        <Select.Option value=\"Control\">Control</Select.Option>\r\n                        <Select.Option value=\"Aesthetics\">Aesthetics</Select.Option>\r\n                        <Select.Option value=\"Prophylactic\">Prophylactic</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label={\"Description\"}\r\n                    name=\"visitDesc\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='visitTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.visitReason !== currentValues.visitReason}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n                        if (getFieldValue('visitReason') === 'Prophylactic') {\r\n\r\n                            return (\r\n                                <>\r\n                                    <Form.Item name='Prophylactic'>\r\n                                        <Radio.Group>\r\n                                            <Radio.Button value=\"Maligant\">Maligant</Radio.Button>\r\n                                            <Radio.Button value=\"Benign\">Benign</Radio.Button>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        noStyle\r\n                                        shouldUpdate={(prevValues, currentValues) => prevValues.Prophylactic !== currentValues.Prophylactic}\r\n                                    >\r\n                                        {({ getFieldValue }) =>\r\n                                            getFieldValue('Prophylactic') === 'Maligant' ? (\r\n                                                <>\r\n\r\n                                                    <Form.Item label=\"USM\"  >\r\n                                                        <Form.Item\r\n                                                            valuePropName=\"checked\" noStyle name=\"usm\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"usmDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Blood\"  >\r\n                                                        <Form.Item noStyle name=\"blood\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"bloodDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Lungs\"  >\r\n                                                        <Form.Item noStyle name=\"lungs\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"lungsDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item label=\"Reason\"  >\r\n                                                        <Form.Item noStyle name=\"reason\"\r\n                                                            valuePropName=\"checked\">\r\n                                                            <Checkbox />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item noStyle name=\"reasonDescription\">\r\n                                                            <Input.TextArea showCount maxLength={3000} />\r\n                                                        </Form.Item>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            ) : (\r\n                                                <Form.Item label=\"Description\" name=\"benignDescription\" >\r\n                                                    <Input.TextArea showCount maxLength={3000} />\r\n                                                </Form.Item>\r\n                                            )}\r\n\r\n                                    </Form.Item>\r\n\r\n                                </>\r\n\r\n                            )\r\n                        } else return ''\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='visitTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(VisitsFormBloke)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport VisitsTable from './modules/components/VisitsTable';\r\nimport VisitsFormBloke from './modules/components/VisitsFormBloke';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Visits() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <VisitsFormBloke selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <VisitsTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Visits)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","resetProfilePatient","useResetProfilePatient","_useSavePatient","useSavePatient","handleSave","isLoading","onFieldsChange","useStore","store","boxShadow","p","bg","borderRadius","_jsxs","Form","id","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","fetchPatientId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sendRequest","sent","abrupt","data","t0","stop","apply","arguments","postPersonInfo","_ref2","_callee2","obj","_context2","_x","postMorby","_ref3","_callee3","_context3","_x2","postVisit","_ref4","_callee4","_context4","_x3","postAnalyses","_ref5","_callee5","_context5","_x4","postTreatment","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","patientId","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","sendObj","patientName","patientSurName","patientPatronymic","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","patientVisitsList","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","JSON","parse","stringify","personInfoForm","diseaseHistoryForm","setFamilyMembersList","treatmentHistoryForm","searchPatientForm","setDataSourceDiseaseHistoryTable","setSavedDrawingCanvas","setDescriptionsCanvas","setDataSourceVisitTable","setDataSourceAnalysisTable","setDataSourceTreatmentTable","setRecipeList","resetFields","_useState","useState","_useState2","setIsLoading","familyMembersList","dataSourceDiseaseHistoryTable","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","_patientForm$getField","getFieldsValue","_personInfoForm$getFi","birthDate","alkogol","smoke","_objectSpread","dayjs","format","saveMorby","deseaseImageDesc","deseaseImagesList","deseaseHistoryDynamicsList","saveVisit","saveAnalyses","analyzesMediaList","saveTreatment","treatmentDynamics","setTimeout","Promise","all","VisitsTableSetting","columns","setIsOpen","visitsTableSetting","useLocalStorageStore","setVisitsTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","DeleteVisitsTableRow","handleDelete","VisitsTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","visible","defaultVisible","length","undefined","find","setIsFieldsChange","ellipsis","width","render","value","Tooltip","placement","align","row","index","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","benignDescription","usmDescription","bloodDescription","lungsDescription","reasonDescription","usm","blood","lungs","reason","Prophylactic","setFieldsValue","onRowTable","VisitsFormBloke","values","Date","getTime","error","console","log","managersPlaces","setManagersPlaces","_useQuery","useQuery","isFetching","SimpleGrid","gap","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","DatePicker","defaultValue","showTime","Select","allowClear","val","placeName","placeCity","placeCountry","showCount","maxLength","rows","shouldUpdate","prevValues","currentValues","getFieldValue","_Fragment","Radio","valuePropName","offset","Visits","_Form$useForm","my","border"],"sourceRoot":""}