{"version":3,"file":"static/js/794.db79013e.chunk.js","mappings":"sKAKA,SAASA,EAAcC,GAAe,IAAZC,EAAOD,EAAPC,QAEtB,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,KAAe,CAAAC,UACZF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACC,MAAM,MAAML,QAAS,SAACM,GAAC,OAAKA,EAAEC,iBAAiB,EAACJ,UACjDF,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CACPC,MAAM,6CACNC,OAAO,MACPC,WAAW,KACXC,UAAWZ,EAAQG,UAEnBF,EAAAA,EAAAA,KAACY,EAAAA,EAAc,SAKnC,CAEA,KAAeC,EAAAA,EAAAA,MAAKhB,E,kMCbpB,SAASiB,IAEL,IAAAC,GAIIC,EAAAA,EAAAA,KAHAC,EAAWF,EAAXE,YACAC,EAAiBH,EAAjBG,kBACAC,EAAoBJ,EAApBI,qBAIJC,GAA0BC,EAAAA,EAAAA,GAAc,sBAAjCC,GAAsDC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC,GAEdI,GAAwBC,EAAAA,EAAAA,KAAxBD,oBAMRE,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAUF,EAAVE,WAAYC,EAASH,EAATG,UAEdC,GAAiBC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,cAAc,IAE/D,OACI9B,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC8B,UAAU,KAAKC,EAAE,IAAIC,GAAG,WAAWC,aAAa,OAAMlC,UACvDmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDC,GAAG,cACHC,SAAUZ,EACVa,KAAMxB,EACNyB,OAAQpB,EAAkB,SAAW,WACrCQ,eAAgBA,EAAe5B,SAAA,EAE/BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNK,MAAM,OAAMzC,UAEZmC,EAAAA,EAAAA,MAACO,EAAAA,EAAAA,QAAa,CAAA1C,SAAA,EAEVF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EAEPC,KAAK,cAAa5C,UAElBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,YAAY,UAHf,gBAMRhD,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNQ,KAAK,YACLD,SAAO,EAAA3C,UAEPF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAACC,UAAQ,EAACC,YAAY,SAAIH,YAAY,sBAGtDhD,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHC,KAAK,QACLtD,QAAS,kBAAMoB,GAAqB,SAAAmC,GAAI,OAAKA,CAAI,GAAC,EAClDC,KAAMrC,GAAoBlB,EAAAA,EAAAA,KAACwD,EAAAA,EAAiB,KAAMxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAc,YAO7EzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACC,GAAIzC,EAAmB0C,gBAAc,EAAA1D,UAC3CmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDG,KAAMxB,EACNyB,OAAQpB,EAAkB,SAAW,WACrCQ,eAAgBA,EAAe5B,SAAA,EAG/BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAsBQ,KAAK,iBAAiBH,MAAM,WAAUzC,UAClEF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,YAAY,cADR,mBAIfhD,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAyBK,MAAM,aAAaG,KAAK,oBAAmB5C,UAC1EF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,KADK,2BAOvB/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAAA3C,UACdmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAAA1C,SAAA,EACFF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHrD,QAAS6B,EACTa,KAAK,cACLY,KAAK,UACLQ,SAAS,SACTC,QAASjC,EAAU3B,SACtB,UAIDF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QA7ER,WAChByB,GACJ,EA2EkDuC,QAAM,EAAA7D,SAAC,mBAS7D,CAEA,KAAeW,EAAAA,EAAAA,MAAKC,E,qFC1GpB,SAASkD,EAAYlE,GAAmC,IAAhCmE,EAAKnE,EAALmE,MAAOC,EAAMpE,EAANoE,OAAQC,EAAYrE,EAAZqE,aACrC,OACEnE,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACiE,OAAO,UAASlE,UACnBF,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,CACPC,QAAS,CAAC,SACVC,KAAM,CAAEN,MAAAA,GACRO,KAAMN,EACNC,aAAcA,EAAajE,UAE3BF,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CACTC,QAAQ,QACRtE,MAAM,WACNuE,KAAK,KACLC,SAAO,EACP,aAAW,kBACXrB,MAAMvD,EAAAA,EAAAA,KAAC6E,EAAAA,EAAe,SAKhC,CAEA,KAAehE,EAAAA,EAAAA,MAAKmD,E,oSCvBdc,EAAgB,SAACC,EAAKC,GACpBD,GAAsB,kBAARA,EACdE,EAAAA,GAAAA,QAAgB,CACZC,QAASF,EAAW,SACpBG,IAAKH,EAAW,QAChBI,SAAU,IAGdH,EAAAA,GAAAA,MAAc,CACVC,QAASF,EAAW,eACpBG,IAAKH,EAAW,QAChBI,SAAU,GAGtB,EAEaC,EAAc,eAAAvF,GAAAwF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAV,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAArC,KAAAqC,EAAAC,MAAA,cAAAD,EAAArC,KAAA,EAAAqC,EAAAC,KAAA,GAENC,EAAAA,EAAAA,GAAY,YAAa,CAAC,EAAG,OAAO,KAAD,EAA5C,OAAHd,EAAGY,EAAAG,KAAAH,EAAAI,OAAA,SACAhB,EAAIiB,MAAI,OAAAL,EAAArC,KAAA,EAAAqC,EAAAM,GAAAN,EAAA,SAEfV,EAAAA,GAAAA,MAAc,CACVC,QAAOS,EAAAM,GACPd,IAAK,WACLC,SAAU,IACX,yBAAAO,EAAAO,OAAA,GAAAT,EAAA,kBAEV,kBAX0B,OAAA3F,EAAAqG,MAAA,KAAAC,UAAA,KAadC,EAAc,eAAAC,GAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAe,EAAOC,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAe,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAb,MAAA,cAAAa,EAAAb,KAAA,GACpBC,EAAAA,EAAAA,GAAY,OAAQW,EAAK,QAAQ,KAAD,EACd,OAD9BzB,EAAG0B,EAAAX,KACPhB,EAAcC,EAAK,eAAe0B,EAAAV,OAAA,SAC3BhB,GAAG,wBAAA0B,EAAAP,OAAA,GAAAK,EAAA,KACb,gBAJ0BG,GAAA,OAAAJ,EAAAH,MAAA,KAAAC,UAAA,KAMdO,EAAS,eAAAC,GAAAtB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqB,EAAOL,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAoB,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAlB,MAAA,cAAAkB,EAAAlB,KAAA,GACfC,EAAAA,EAAAA,GAAY,QAASW,EAAK,QAAQ,KAAD,EAA7CzB,EAAG+B,EAAAhB,KACPhB,EAAcC,EAAK,mBAAmB,wBAAA+B,EAAAZ,OAAA,GAAAW,EAAA,KACzC,gBAHqBE,GAAA,OAAAH,EAAAT,MAAA,KAAAC,UAAA,KAKTY,EAAS,eAAAC,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0B,EAAOV,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAyB,GAAA,cAAAA,EAAA7D,KAAA6D,EAAAvB,MAAA,cAAAuB,EAAAvB,KAAA,GACfC,EAAAA,EAAAA,GAAY,SAAUW,EAAK,QAAQ,KAAD,EAA9CzB,EAAGoC,EAAArB,KACPhB,EAAcC,EAAK,SAAS,wBAAAoC,EAAAjB,OAAA,GAAAgB,EAAA,KAC/B,gBAHqBE,GAAA,OAAAH,EAAAd,MAAA,KAAAC,UAAA,KAKTiB,EAAY,eAAAC,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAOf,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAA8B,GAAA,cAAAA,EAAAlE,KAAAkE,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,GAClBC,EAAAA,EAAAA,GAAY,WAAYW,EAAK,QAAQ,KAAD,EAAhDzB,EAAGyC,EAAA1B,KACPhB,EAAcC,EAAK,YAAY,wBAAAyC,EAAAtB,OAAA,GAAAqB,EAAA,KAClC,gBAHwBE,GAAA,OAAAH,EAAAnB,MAAA,KAAAC,UAAA,KAKZsB,EAAa,eAAAC,GAAArC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoC,EAAOpB,GAAG,IAAAzB,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAmC,GAAA,cAAAA,EAAAvE,KAAAuE,EAAAjC,MAAA,cAAAiC,EAAAjC,KAAA,GACnBC,EAAAA,EAAAA,GAAY,YAAaW,EAAK,QAAQ,KAAD,EAAjDzB,EAAG8C,EAAA/B,KACPhB,EAAcC,EAAK,aAAa,wBAAA8C,EAAA3B,OAAA,GAAA0B,EAAA,KACnC,gBAHyBE,GAAA,OAAAH,EAAAxB,MAAA,KAAAC,UAAA,KAKb2B,EAAoB,eAAAC,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyC,EAAOzB,GAAG,OAAAjB,EAAAA,EAAAA,KAAAG,MAAA,SAAAwC,GAAA,cAAAA,EAAA5E,KAAA4E,EAAAtC,MAAA,cAAAsC,EAAAnC,OAAA,UAC1CF,EAAAA,EAAAA,GAAY,qBAAsBW,EAAK,SAAO,wBAAA0B,EAAAhC,OAAA,GAAA+B,EAAA,qBADjBE,GAAA,OAAAH,EAAA7B,MAAA,KAAAC,UAAA,KAG3BgC,EAAc,eAAAC,GAAA/C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8C,EAAOC,GAAS,OAAAhD,EAAAA,EAAAA,KAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAAlF,KAAAkF,EAAA5C,MAAA,cAAA4C,EAAAzC,OAAA,UACnCF,EAAAA,EAAAA,GAAY,YAAD4C,OAAaF,KAAY,wBAAAC,EAAAtC,OAAA,GAAAoC,EAAA,qBADpBI,GAAA,OAAAL,EAAAlC,MAAA,KAAAC,UAAA,KAGPuC,EAAc,eAAAC,GAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqD,EAAAC,GAAA,IAAAC,EAAAR,EAAAhG,EAAAyG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjE,EAAAA,EAAAA,KAAAG,MAAA,SAAA+D,GAAA,cAAAA,EAAAnG,KAAAmG,EAAA7D,MAAA,OAAgB,KAAPmD,EAAOD,EAAPC,SAEvBR,UAAU,CAADkB,EAAA7D,KAAA,QACbrD,EAAKwG,EAAQR,UACjBH,EAAe7F,GAAImH,MAAK,SAAC3E,GACb,OAAHA,QAAG,IAAHA,GAAAA,EAAKiB,KAONuC,EAAYQ,EAAQR,UANpBtD,EAAAA,GAAAA,QAAgB,CACZC,QAAS,uBACTC,IAAK,eACLC,SAAU,GAKtB,IAEAmD,EAAYQ,EAAQR,UAAUkB,EAAA7D,KAAA,uBAAA6D,EAAA7D,KAAA,EAEZP,IAAiB,KAAD,EAAlCkD,EAASkB,EAAA3D,KAAA,QA2BX,GAxBEkD,EAOAD,EAPAC,YACAC,EAMAF,EANAE,eACAC,EAKAH,EALAG,kBACAC,EAIAJ,EAJAI,UACAC,EAGAL,EAHAK,YACAC,EAEAN,EAFAM,OACAC,EACAP,EADAO,YAEAC,EAAe,CACfI,kBAAmB,CACf,CACIpB,UAAAA,EACAc,OAAAA,EACAF,UAAAA,EACAG,YAAAA,KAIRE,EAAiB,CACjBjB,UAAAA,EACAS,YAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAE,YAAAA,IAEAb,EAAU,CAADkB,EAAA7D,KAAA,YACJmD,EAAQR,UAAU,CAADkB,EAAA7D,KAAA,gBAAA6D,EAAA7D,KAAA,GACZS,EAAemD,GAAgB,KAAD,UAAAC,EAAA7D,KAAA,GAExBmC,EAAqBwB,GAAc,KAAD,GAA3CE,EAAA3D,KAAA,eAAA2D,EAAA1D,OAAA,UAEJ,GAAI,yBAAA0D,EAAAvD,OAAA,GAAA2C,EAAA,KACd,gBArD0Be,GAAA,OAAAhB,EAAAzC,MAAA,KAAAC,UAAA,KAwDdyD,EAAsB,eAAAC,GAAAxE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuE,IAAA,IAAAhF,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAAsE,GAAA,cAAAA,EAAA1G,KAAA0G,EAAApE,MAAA,cAAAoE,EAAApE,KAAA,GAClBC,EAAAA,EAAAA,GAAY,yBAAyB,KAAD,EAA7C,GACA,QADHd,EAAGiF,EAAAlE,YACA,IAAHf,IAAAA,EAAKiB,KAAI,CAAAgE,EAAApE,KAAA,eAAAoE,EAAAjE,OAAA,SACFhB,EAAIiB,MAAI,wBAAAgE,EAAA9D,OAAA,GAAA6D,EAAA,KAEtB,kBALkC,OAAAD,EAAA3D,MAAA,KAAAC,UAAA,KAMtB6D,EAAkB,eAAAC,GAAA5E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2E,IAAA,IAAApF,EAAA,OAAAQ,EAAAA,EAAAA,KAAAG,MAAA,SAAA0E,GAAA,cAAAA,EAAA9G,KAAA8G,EAAAxE,MAAA,cAAAwE,EAAAxE,KAAA,GACdC,EAAAA,EAAAA,GAAY,mBAAmB,KAAD,EAAvC,GACA,QADHd,EAAGqF,EAAAtE,YACA,IAAHf,IAAAA,EAAKiB,KAAI,CAAAoE,EAAAxE,KAAA,eAAAwE,EAAArE,OAAA,SACFhB,EAAIiB,MAAI,wBAAAoE,EAAAlE,OAAA,GAAAiE,EAAA,KAEtB,kBAL8B,OAAAD,EAAA/D,MAAA,KAAAC,UAAA,I,uBC7HxB,SAASiE,EAASrE,GAErB,OADWsE,KAAKC,MAAMD,KAAKE,UAAUxE,GAEzC,C,8ECqCA,IAvCA,WAEI,IAAAjF,GAA2HC,EAAAA,EAAAA,KAAnHyJ,EAAc1J,EAAd0J,eAAgBC,EAAkB3J,EAAlB2J,mBAAoBzJ,EAAWF,EAAXE,YAAa0J,EAAoB5J,EAApB4J,qBAAsBC,EAAoB7J,EAApB6J,qBAAsBC,EAAiB9J,EAAjB8J,kBAE/FC,GAAmC/I,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8I,gCAAgC,IAE7FC,GAAwBhJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM+I,qBAAqB,IAGvEC,GAAwBjJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMgJ,qBAAqB,IAEvEC,GAA0BlJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiJ,uBAAuB,IAE3EC,GAA6BnJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMkJ,0BAA0B,IAEjFC,GAA8BpJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMmJ,2BAA2B,IAEnFC,GAAgBrJ,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMoJ,aAAa,IAmB7D,MAAO,CAAE5J,oBAhBmB,WACxBqJ,EAAkBQ,cAClBpK,EAAYoK,cACZZ,EAAeY,cACfX,EAAmBW,cACnBT,EAAqBS,cACrBV,EAAqB,IACrBG,EAAiC,IACjCC,EAAsB,CAAC,GACvBC,EAAsB,CAAC,GACvBC,EAAwB,IACxBC,EAA2B,IAC3BC,EAA4B,IAC5BC,EAAc,GAClB,EAGJ,C,8HCgFA,IAjHA,WAEI,IAAAE,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA1CzJ,EAAS2J,EAAA,GAAEC,EAAYD,EAAA,GAE9BzK,GAMIC,EAAAA,EAAAA,KALCC,EAAWF,EAAXE,YACDwJ,EAAc1J,EAAd0J,eACAC,EAAkB3J,EAAlB2J,mBACAgB,EAAiB3K,EAAjB2K,kBACAd,EAAoB7J,EAApB6J,qBAIEe,GAAgC5J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2J,6BAA6B,IACvFC,GAAqB7J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM4J,kBAAkB,IACjEC,GAAqB9J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM6J,kBAAkB,IACjEC,GAAuB/J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8J,oBAAoB,IACrEC,GAA0BhK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM+J,uBAAuB,IAC3EC,GAA2BjK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMgK,wBAAwB,IAC7EC,GAAalK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMiK,UAAU,IAGjDC,EAAiB,SAAC3D,GACpB,IAAA4D,EAIIlL,EAAYmL,iBAHZpD,EAAWmD,EAAXnD,YACAC,EAAckD,EAAdlD,eACAC,EAAiBiD,EAAjBjD,kBAGJmD,EAAoC5B,EAAe2B,iBAA7CE,EAASD,EAATC,UAAWC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAEpBzD,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNhC,EAAe2B,kBAAgB,IAClCE,UAAWI,IAAMJ,GAAWK,OAAO,cACnCJ,QAASA,EAAU,EAAI,EACvBC,MAAOA,EAAQ,EAAI,EACnBxD,YAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAX,UAAAA,KAGJlC,EAAAA,EAAAA,IAAe0C,EACnB,EAEM6D,EAAY,SAACrE,GACfqD,EAAmBiB,iBACfvC,KAAKE,UAAUqB,GAEnB,IAAM9C,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN/B,EAAmB0B,kBAAgB,IACtC7D,UAAAA,EACAmD,kBAAAA,EACAoB,kBAAmBlB,EACnBmB,2BAA4BpB,KAEhChF,EAAAA,EAAAA,IAAUoC,EACd,EAEMiE,EAAY,SAACzE,GACf,IAAMQ,EAAU,CACZY,kBAAmBmC,EACnBvD,UAAAA,IAEJvB,EAAAA,EAAAA,IAAU+B,EACd,EAEMkE,EAAe,SAAC1E,GAClB,IAAMQ,EAAU,CACZmE,kBAAmBnB,EACnBxD,UAAAA,IAEJlB,EAAAA,EAAAA,IAAa0B,EACjB,EAEMoE,EAAgB,SAAC5E,GACnB,IAAMQ,GAAO0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN7B,EAAqBwB,kBAAgB,IACxC7D,UAAAA,EACA6E,kBAAmBpB,EACnBC,WAAAA,KAEJvE,EAAAA,EAAAA,IAAcqB,EAClB,EAEMnH,EAAU,eAAA9B,GAAAwF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAlD,EAAAgG,EAAA,OAAAhD,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAArC,KAAAqC,EAAAC,MAAA,OAMiC,GALhD6F,GAAa,GACb4B,YAAW,WACP5B,GAAa,EACjB,GAAG,OAEClJ,EAAKtB,EAAYmL,iBAAiB7D,WAE/B,CAAD5C,EAAAC,KAAA,QACF2C,EAAYhG,EAAGoD,EAAAC,KAAA,uBAAAD,EAAAC,KAAA,GAEGP,EAAAA,EAAAA,MAAiB,KAAD,EAAlCkD,EAAS5C,EAAAG,KAAA,QAETyC,GACA+E,QAAQC,IAAI,CACRrB,EAAe3D,GACfqE,EAAUrE,GACVyE,EAAUzE,GACV0E,EAAa1E,GACb4E,EAAc5E,KAErB,yBAAA5C,EAAAO,OAAA,GAAAT,EAAA,KACJ,kBAtBe,OAAA3F,EAAAqG,MAAA,KAAAC,UAAA,KAyBhB,MAAO,CAAExE,WAAAA,EAAYC,UAAAA,EACzB,C,8NCjHA,SAAS2L,IAEL,IAAAC,GAAuDC,EAAAA,EAAAA,UAAS,CAAC,yBAA0B7D,EAAAA,GAAwB,CAC/G8D,SAAS,IADCC,EAAgBH,EAAtBzH,KAAwBnE,EAAS4L,EAAT5L,UAAWgM,EAAOJ,EAAPI,QAI3C,OACI7N,EAAAA,EAAAA,KAAC8N,EAAAA,EAAM,CACHC,YAAU,EACVC,UAAQ,EACRlK,QAASjC,EACToM,QAASJ,EAAQ3N,SAEA,OAAhB0N,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBM,KAAI,SAACC,GACpB,OACInO,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAAuBM,MAAOD,EAAEE,gBAAgBnO,SACzDiO,EAAEE,iBADaF,EAAEG,cAI9B,KAGZ,CAEA,OAAezN,EAAAA,EAAAA,MAAK2M,GCvBpB,SAASe,EAAwBC,GAE7B,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmBjM,EAAS+L,EAAT/L,KAErCkJ,GAAgC5J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2J,6BAA6B,IACvFb,GAAmC/I,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8I,gCAAgC,IAC7F6D,GAAoB5M,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2M,iBAAiB,IAE/DnM,EAAW,SAACoM,GAEd,GADAD,GAAkB,GACdF,EAAgB,CAChB,IAAII,EAAUlD,EAA8BuC,KAAI,SAACC,GAC7C,OAAIA,EAAE5L,KAAOqM,EAAOrM,GAAWqM,EACnBT,CAChB,IACArD,EAAiC+D,EACrC,KAAO,CACH,IAAItM,GAAK,IAAIuM,MAAOC,UACpBH,EAAOrM,GAAKA,EACZqM,EAAOzJ,IAAM5C,EACbuI,EAAiC,GAADrC,QAAAuG,EAAAA,EAAAA,GAAKrD,GAA6B,CAAEiD,IACxE,CACAnM,EAAK4I,cACLqD,GACJ,EAOA,OACIrM,EAAAA,EAAAA,MAAC4M,EAAAA,EAAU,CAACC,QAAS,CAAC,IAAK,KAAKhP,SAAA,EAE5BmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDE,SAAUA,EACVD,GAAG,0BACHE,KAAMA,EACN0M,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZvP,SAAA,EAGFF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACoN,QAAM,EAAC5M,KAAK,KAAI5C,UACvBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,OAGV/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,SAASG,KAAK,sBAAqB5C,UAChDmC,EAAAA,EAAAA,MAACyL,EAAAA,EAAM,CAACC,YAAU,EAAA7N,SAAA,EACdF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,KAAIlO,SAAC,aAC1BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,WAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,UAC5BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,UAC5BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,eAAclO,SAAC,2BACpCF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,eAAclO,SAAC,0BACpCF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,SAAQlO,SAAC,kBAC9BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,SAAQlO,SAAC,iBAC9BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,gBAAelO,SAAC,wBACrCF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,gBAAelO,SAAC,uBACrCF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,mBAAkBlO,SAAC,6BAIhDF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNK,MAAM,sBACNG,KAAK,oBAAmB5C,UAExBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,OAGV/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,aAAaG,KAAK,uBAAsB5C,UACrDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,IAAMC,KAAM,UAKzDxN,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDE,SAAUA,EACVD,GAAG,0BACHE,KAAMA,EACN0M,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZvP,SAAA,EAGFmC,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,KAAIzC,SAAA,EACjBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,QAAO5C,UAC3BF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAAA,MAAW,CAAA5P,UACRmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACmN,UAAU,WAAU7P,SAAA,EACvBF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,cACjBF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,qBAI7BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPmN,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWE,QAAUD,EAAcC,KAAK,EAACjQ,SAErF,SAAAJ,GACG,OAA+B,KAA3BsQ,EADStQ,EAAbsQ,eACkB,UAEVpQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,MAAK5C,UACzBF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,MAGV,EAClB,QAIRZ,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,KAAIzC,SAAA,EACjBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,QAAO5C,UAC3BF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAAA,MAAW,CAAA5P,UACRmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACmN,UAAU,WAAU7P,SAAA,EACvBF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,cACjBF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,qBAI7BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPmN,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWI,QAAUH,EAAcG,KAAK,EAACnQ,SAErF,SAAAoG,GACG,OAA+B,KAA3B8J,EADS9J,EAAb8J,eACkB,UAEVpQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,MAAK5C,UACzBF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,MAGV,EAClB,QAIRZ,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACK,MAAM,OAAMzC,SAAA,EACnBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,OAAM5C,UAC1BF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CACRqN,IAAK,EACLC,IAAK,EACLC,aAAc,OAGtBxQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPmN,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWQ,OAASP,EAAcO,IAAI,EAACvQ,SAEnF,SAAA0G,GAAwB,IAOd8J,EANP,OAA8B,KAA1BN,EADSxJ,EAAbwJ,eACkB,SAEVpQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,SAAQ5C,UAC5BF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAACE,YAAY,UAIf,QAAlBuN,EAAAjO,EAAKkO,qBAAa,IAAAD,GAAlBA,EAAAE,KAAAnO,EAAqB,CAACoO,OAAO,KACtB,GAEf,QAIR7Q,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,MAAMG,KAAK,MAAK5C,UAC7BF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAACqN,IAAK,EAAGE,aAAc,OAGvCxQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,cAAcG,KAAK,cAAa5C,UAC7CF,EAAAA,EAAAA,KAACwN,EAAsB,OAG3BxN,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACiN,WAAY,CAAEuB,OAAQ,EAAGxB,KAAM,IAAKpP,UAC3CmC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAAA1C,SAAA,EAEFF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHX,KAAK,0BACLoB,SAAS,SACTR,KAAK,UAASnD,SAEbuO,EAAiB,OAAS,SAG/BzO,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QA3KR,WAChB0C,EAAK4I,cACLqD,GACJ,EAwKkD3K,QAAM,EAAA7D,SAAEuO,EAAiB,QAAU,oBAWzF,CAEA,OAAe5N,EAAAA,EAAAA,MAAK0N,G,8ECtNPwC,EAA6B,CACtC,SACA,SACA,uBACA,uBACA,uBACA,uBACA,UACA,SACA,mBACA,mBACA,kBACA,mB,oGCiHJ,MAhHA,SAA+BvC,GAE3B,IAAQtK,EAAsFsK,EAAtFtK,OAAQ8M,EAA8ExC,EAA9EwC,QAASC,EAAqEzC,EAArEyC,WAAYC,EAAyD1C,EAAzD0C,SAAU1Q,EAA+CgO,EAA/ChO,MAAO2Q,EAAwC3C,EAAxC2C,WAAYC,EAA4B5C,EAA5B4C,OAAQC,EAAoB7C,EAApB6C,UAAW5O,EAAS+L,EAAT/L,KAE/EkM,GAAoB5M,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2M,iBAAiB,IA0BrE,OAEItM,EAAAA,EAAAA,MAACiP,EAAAA,GAAK,CACFpN,OAAQA,EACR8M,QATY,WAChBvO,EAAK4I,cACL2F,GACJ,EAOQO,gBAAiBN,EACjBO,cAAeN,EAAShR,SAAA,EAExBF,EAAAA,EAAAA,KAACyR,EAAAA,EAAY,KACbpP,EAAAA,EAAAA,MAACqP,EAAAA,EAAY,CAAAxR,SAAA,EACTF,EAAAA,EAAAA,KAAC2R,EAAAA,EAAW,CAAAzR,SAAEM,KACdR,EAAAA,EAAAA,KAAC4R,EAAAA,EAAgB,KACjB5R,EAAAA,EAAAA,KAAC6R,EAAAA,EAAS,CAAA3R,UAGNmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDG,KAAMA,EACN0M,WAAS,EACTC,WAAW,OACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZvP,SAAA,EAGFF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACoN,QAAM,EAAC5M,KAAK,KAAI5C,UACvBF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,OAGV/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACoN,QAAM,EAAC5M,KAAK,eAAc5C,UACjCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,OAGV/C,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,SAASG,KAAK,qBAAoB5C,UAC/CF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACF+O,IAAKb,EACLlD,YAAU,OAIlB/N,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,qBAAqBG,KAAK,mBAAkB5C,UACzDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACFgL,YAAU,OAIlB/N,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,qBAAqBG,KAAK,4BAA2B5C,UAClEF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACFgL,YAAU,OAIlB/N,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,cAAcG,KAAK,mBAAkB5C,UAClDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,IACjCC,KAAM,YAQtB7P,EAAAA,EAAAA,KAAC+R,EAAAA,EAAW,CAAA7R,UACRF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACHC,KAAK,UACL2O,OAAK,EACLzO,MAAMvD,EAAAA,EAAAA,KAACiS,EAAAA,EAAY,IACnBlS,QA9FH,WACb4O,GAAkB,GAClB,IACI,IAAMC,EAASnM,EAAK2J,iBACd8F,GAAa7H,EAAAA,EAAAA,GAASuE,GACxBwC,EACAD,EAAWe,GAGXb,EAAUa,GAEdzP,EAAK4I,aACT,CAAE,MAAO8G,GACLC,QAAQC,IAAI,WAAY,+BAAgCF,EAC5D,CACJ,EA+EsCjS,SAEjBkR,EAAS,OAAS,eAM3C,E,UCpHMkB,EAAgB,CAClB,UACA,SACA,mBACA,mBACA,kBACA,mBAGJ,SAASC,IACL,IAAAC,GAAoCC,EAAAA,EAAAA,KAA5BvO,EAAMsO,EAANtO,OAAQwO,EAAMF,EAANE,OAAQ1B,EAAOwB,EAAPxB,QAExBjQ,GAAoDC,EAAAA,EAAAA,KAA5C0K,EAAiB3K,EAAjB2K,kBAAmBf,EAAoB5J,EAApB4J,qBAErBsG,EAAa0B,EAAAA,OAAa,MAC1BzB,EAAWyB,EAAAA,OAAa,MAE9BrH,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA/CsH,EAAcpH,EAAA,GAAEqH,EAAiBrH,EAAA,GACxCsH,GAAwCvH,EAAAA,EAAAA,UAAS,CAAC,GAAEwH,GAAAxR,EAAAA,EAAAA,GAAAuR,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAsC3H,EAAAA,EAAAA,WAAS,GAAM4H,GAAA5R,EAAAA,EAAAA,GAAA2R,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,EAAehR,EAAAA,EAAAA,UAARG,GAAsBlB,EAAAA,EAAAA,GAAA+R,EAAA,GAAlB,GA4CX,OACIjR,EAAAA,EAAAA,MAAAkR,EAAAA,SAAA,CAAArT,SAAA,EAEIF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAC8M,WAAW,OAAOzM,MAAM,iBAAgBzC,UAC/CmC,EAAAA,EAAAA,MAACO,EAAAA,EAAAA,QAAa,CAAC4M,MAAO,CAAEgE,MAAO,QAAStT,SAAA,EACpCF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAM,CACH2F,SAxCH,SAACpT,GACdgT,GAAe,GACfR,EAAkBxS,EACtB,EAsCoB0N,YAAU,EACV+D,IAAKZ,EAAShR,SAEb6Q,EAA2B7C,KAAI,SAAAC,GAC5B,OACInO,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAASM,MAAOD,EAAEjO,SAAEiO,GAAdA,EAE5B,OAEJnO,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACsQ,UAAWd,EAAgB7S,QAzCnC,WACZ,GAAK6S,EAKD,GAFelH,EAAkBiI,MAAK,SAACxF,GAAC,OAAKA,EAAEyF,eAAiBhB,CAAc,IAKvE,GAAIN,EAAcuB,SAASjB,GAAiB,CAC/C,IAAIkB,EAAIlB,EACJmB,EAAQf,EAAaJ,IAAmB,EACxCoB,EAAoBF,EAAI,IAAMC,EAClCA,GAAS,EACTd,GAAegB,EAAAA,EAAAA,GAAC,CAAC,EAAErB,EAAiBmB,IACpClB,EAAkBmB,GAClBtB,GACJ,MACIW,GAAe,QAXfR,EAAkBD,GAClBF,GAaZ,EAoBoExS,UAACF,EAAAA,EAAAA,KAACiS,EAAAA,EAAY,WAIzEmB,IAAepT,EAAAA,EAAAA,KAACkU,EAAAA,EAAK,CAClBC,UAAQ,EACRC,WAnDa,WACrBf,GAAe,EACnB,EAkDYpO,QAAQ,uCAAuC5B,KAAK,UAIxDrD,EAAAA,EAAAA,KAACqU,EAAqB,CAClBnQ,OAAQA,EACR8M,QAASA,EACTC,WAAYA,EACZC,SAAUA,EACV1Q,MAAOoS,EACPvB,UA3EM,SAACiD,GACfA,EAAWV,aAAehB,EAC1B,IAAIrQ,GAAK,IAAIuM,MAAOC,UACpBuF,EAAWC,GAAKhS,EAChBoI,GAAqB,SAAArH,GAAI,SAAAmF,QAAAuG,EAAAA,EAAAA,GAAQ1L,GAAI,CAAEgR,GAAU,IACjDtD,GACJ,EAsEYvO,KAAMA,MAItB,CAEA,OAAe5B,EAAAA,EAAAA,MAAK0R,GC3GpB,SAASiC,IAEL,IAAAzT,GAAoDC,EAAAA,EAAAA,KAA5C0K,EAAiB3K,EAAjB2K,kBAAmBf,EAAoB5J,EAApB4J,qBAE3BW,GAAgDC,EAAAA,EAAAA,YAAUC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAAnDmJ,EAAgBjJ,EAAA,GAAEkJ,EAAmBlJ,EAAA,GAE5C8H,EAAehR,EAAAA,EAAAA,UAARG,GAAsBlB,EAAAA,EAAAA,GAAA+R,EAAA,GAAlB,GAEXd,GAAoCC,EAAAA,EAAAA,KAA5BvO,EAAMsO,EAANtO,OAAQwO,EAAMF,EAANE,OAAQ1B,EAAOwB,EAAPxB,QAElBC,EAAa0B,EAAAA,OAAa,MAC1BzB,EAAWyB,EAAAA,OAAa,MA0B9B,OACItQ,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAAA3C,SAAA,EAEdF,EAAAA,EAAAA,KAAC2U,EAAAA,GAAI,CACDhQ,KAAK,QACLiQ,QAAQ5U,EAAAA,EAAAA,KAACuS,EAAuB,IAChCsC,UAAQ,EACRC,WAAYpJ,EACZqJ,WAAY,SAACC,EAAMC,GACf,OACIjV,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAEAJ,QAAS,kBAnCjB,SAACiV,GACbvS,EAAKyS,eAAeF,GACpBN,EAAoBM,GACpBtC,GACJ,CA+BuC3S,CAAQiV,EAAK,EAC5BG,OAAQ,CAAEhT,GAAI,YACdiC,OAAO,UAASlE,UAEhBF,EAAAA,EAAAA,KAAC2U,EAAAA,GAAAA,KAAS,CAAAzU,UACNmC,EAAAA,EAAAA,MAAC+S,EAAAA,EAAI,CAACC,EAAE,OAAMnV,SAAA,EACVmC,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAAAD,SAAA,CAAE+U,EAAQ,EAAE,KAAGD,EAAKpB,iBACxB5T,EAAAA,EAAAA,KAACsV,EAAAA,EAAM,KACPtV,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CACPG,SAAO,EACPF,QAAQ,QACR6Q,WAAW,OACX5Q,KAAK,KAAIzE,UAETF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACJ,QAAS,SAACM,GAAC,OAlC/B,SAACA,EAAE2U,GACpB3U,EAAEmV,iBACFnV,EAAEC,kBACF,IAAMmV,EAAU/J,EAAkBgK,QAAO,SAAAvH,GAAC,OAAIA,EAAEoG,KAAOS,EAAKT,EAAE,IAC9D5J,GAAoBqE,EAAAA,EAAAA,GAAKyG,GAC7B,CA6ByDE,CAAatV,EAAE2U,EAAK,EAAE5U,MAAM,WAAUF,SAAC,cAfnE8U,EAAKT,GAqBtB,KAGJvU,EAAAA,EAAAA,KAACqU,EAAqB,CAClBnQ,OAAQA,EACR8M,QAASA,EACTC,WAAYA,EACZC,SAAUA,EACV1Q,MAAuB,OAAhBiU,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBb,aACzBxC,QAAQ,EACRD,WA3DO,SAACmD,GAChB,IAAMmB,EAAU/J,EAAkBwC,KAAI,SAAAC,GAClC,OAAIA,EAAEoG,KAAOD,EAAWC,GAAWD,EACvBnG,CAChB,IACA6C,IACArG,GAAoBqE,EAAAA,EAAAA,GAAKyG,GAC7B,EAqDYhT,KAAMA,MAKtB,CAEA,OAAe5B,EAAAA,EAAAA,MAAK2T,GCvFpB,SAASoB,IAEL,IAAQlL,GAAuB1J,EAAAA,EAAAA,KAAvB0J,mBAEF5I,GAAiBC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,cAAc,IAE/D,OACIO,EAAAA,EAAAA,MAAC4M,EAAAA,EAAU,CAACC,QAAS,CAAC,IAAK,KAAM2G,IAAI,IAAG3V,SAAA,EAEpCmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDG,KAAMiI,EACNyE,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KAEd3N,eAAgBA,EAAe5B,SAAA,EAG/BF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,YAAYG,KAAK,sBAAqB5C,UACnDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,IAAMC,KAAM,OAGrD7P,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,qBAAqBG,KAAK,kBAAiB5C,UACxDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,IAAMC,KAAM,OAGrD7P,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,oBAAoBG,KAAK,uBAAsB5C,UAC5DF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,IAAM7B,YAAU,EAAC8B,KAAM,OAGhE7P,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,mBAAmBG,KAAK,kBAAiB5C,UACtDmC,EAAAA,EAAAA,MAACyN,EAAAA,GAAAA,MAAW,CAAA5P,SAAA,EAERF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,SACjBF,EAAAA,EAAAA,KAAC8P,EAAAA,GAAK,CAAC1B,MAAO,EAAElO,SAAC,aAKzBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNO,SAAO,EACPmN,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAW6F,kBAAoB5F,EAAc4F,eAAe,EAAC5V,SAEzG,SAAAJ,GAAgB,OACwB,KAArCsQ,EADatQ,EAAbsQ,eACc,oBACVpQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,cAAcG,KAAK,kBAAiB5C,UACjDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CAAC4M,WAAS,EAACC,UAAW,QAEzC,EAAE,KAGd5P,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,YAAYG,KAAK,UAAS5C,UACvCmC,EAAAA,EAAAA,MAACyL,EAAAA,EAAM,CAACC,YAAU,EAAA7N,SAAA,EACdF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,WAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,eAIpCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,SAASG,KAAK,UAAS5C,UACpCmC,EAAAA,EAAAA,MAACyL,EAAAA,EAAM,CAAA5N,SAAA,EACHF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,WAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,eAIpCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,aAAaG,KAAK,kBAAiB5C,UAChDmC,EAAAA,EAAAA,MAACyL,EAAAA,EAAM,CAACC,YAAU,EAAA7N,SAAA,EACdF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,WAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,kBAOxCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CACDG,KAAMiI,EACNyE,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KAEd3N,eAAgBA,EAAe5B,UAG/BF,EAAAA,EAAAA,KAACwU,EAAiB,QAMlC,CAEA,OAAe3T,EAAAA,EAAAA,MAAK+U,G,6BC1GpB,SAASG,EAAejW,GAAwB,IAArBkW,EAAKlW,EAALkW,MAAOC,EAASnW,EAATmW,UAExBC,GAAYC,EAAAA,EAAAA,QAAO,MAEzB7C,EAAehR,EAAAA,EAAAA,UAARG,GAAsBlB,EAAAA,EAAAA,GAAA+R,EAAA,GAAlB,GAEL1H,GAAqB7J,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAM4J,kBAAkB,IAC/Db,GAAwBhJ,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAM+I,qBAAqB,IAE3EO,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA7C8K,EAAY5K,EAAA,GAAE6K,EAAe7K,EAAA,IAGpC8K,EAAAA,EAAAA,YAAU,WACN,GAAI1K,EAAmBqK,EAAY,QAAS,CACxC,IAAMM,EAAM3K,EAAmBqK,EAAY,QAC3CI,EAAgB/L,KAAKC,MAAMgM,GAC/B,CACJ,GAAG,IAEH,IAAAzD,GAAsCvH,EAAAA,EAAAA,UAAS,SAAQwH,GAAAxR,EAAAA,EAAAA,GAAAuR,EAAA,GAAhD0D,EAAWzD,EAAA,GAAE0D,EAAc1D,EAAA,GAClCG,GAA0C3H,EAAAA,EAAAA,WAAS,GAAK4H,GAAA5R,EAAAA,EAAAA,GAAA2R,EAAA,GAAjDwD,EAAavD,EAAA,GAAEwD,EAAgBxD,EAAA,GACtCyD,GAAsCrL,EAAAA,EAAAA,UAAS,IAAGsL,GAAAtV,EAAAA,EAAAA,GAAAqV,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAA4CzL,EAAAA,EAAAA,WAAS,GAAK0L,GAAA1V,EAAAA,EAAAA,GAAAyV,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAExCG,GAA8C7L,EAAAA,EAAAA,YAAU8L,GAAA9V,EAAAA,EAAAA,GAAA6V,EAAA,GAAjDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA8CjM,EAAAA,EAAAA,YAAUkM,GAAAlW,EAAAA,EAAAA,GAAAiW,EAAA,GAAjDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,IA6C1CnB,EAAAA,EAAAA,YAAU,WACN,IAAIsB,EAAcC,IACdC,EAActB,EAAcoB,EAC5BG,OAAOC,OAAO5B,EAAc0B,GAC5BrV,EAAKyS,eAAe,CAAE+C,YAAa7B,EAAa0B,KAEhDrV,EAAKyS,eAAe,CAAE+C,YAAa,IAE3C,GAAG,CAACzB,IAEJ,IAOMqB,EAAyB,WAAO,IAADK,EAC7BN,EAAc,EACd5R,EAAOkQ,EAAUiC,QAAQC,cAU7B,OARQ,QAARF,EADAlS,EAAOA,EAAOsE,KAAKC,MAAMvE,GAAQ,UACzB,IAAAkS,GAAJA,EAAMG,MAAM,IACZrS,EAAKqS,MAAMC,SAAQ,SAAAnK,GACXA,EAAEoK,aAAe/B,IACjBoB,GAAe,EAEvB,IAGGA,GAA4B,CACvC,EAOM9V,GAAiBC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,cAAc,IAgC/D,OANAwU,EAAAA,EAAAA,YAAU,WACN,IAAIkC,EAAQnL,YAAW,kBAVE,WACzB,IAAIrH,EAAO4F,GAAsBA,EAAmBqK,EAAY,QAAUrK,EAAmBqK,EAAY,QAAU,GAE/GjQ,IACAkQ,EAAUiC,QAAQM,aAAazS,GAC/BqH,YAAW,kBAAM8J,GAAkB,EAAK,GAAE,KAElD,CAGiCuB,EAAsB,GAAE,KACrD,OAAO,kBAAMC,aAAaH,EAAM,CACpC,GAAG,CAACtC,KAIA7T,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAACgC,GAAG,WAAWD,EAAE,IAAIE,aAAa,OAAMlC,SAAA,EAExCmC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDG,KAAMA,EACN2M,WAAW,OACXI,MAAO,CAAEgE,MAAO,QAAStT,SAAA,EAGzBmC,EAAAA,EAAAA,MAACO,EAAAA,EAAAA,QAAa,CAAC4Q,MAAM,OAAOhE,MAAO,CAAEgE,MAAO,OAAQoF,WAAY,UAAW1Y,SAAA,EAEvEF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CACNkN,MAAO,CAAEgE,MAAO,QAAStT,UAEzBF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACO,SAAO,EAACC,KAAK,cAAa5C,UACjCmC,EAAAA,EAAAA,MAACyL,EAAAA,EAAM,CACH+K,SAAU,SAACxY,GAAC,OAAKoW,EAAepW,EAAE,EAClCmQ,aAAa,QACbsI,YAAY9Y,EAAAA,EAAAA,KAAC+Y,EAAAA,GAAM,CAACC,GAAG,IAAIrU,KAAK,OAAOxC,GAAIqU,IAC3ChH,MAAO,CAAEgE,MAAO,QAAStT,SAAA,EAEzBF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,kBAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,MAAKlO,SAAC,mBAC3BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,QAAOlO,SAAC,eAC7BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,OAAMlO,SAAC,kBAC5BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAAA,OAAa,CAACM,MAAM,UAASlO,SAAC,+BAK3CF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAApC,UACNF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QApEV,WACdgX,EAAe,IACfJ,GAAiB,EACrB,EAiE+CzW,SAAC,YAEhCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAApC,UACNF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACsQ,SAAUwD,EAAgB7T,KAAK,UAAUtD,QAhElD,WACf+B,IACAiV,EAAe,GACfI,GAAkB,GAClBR,GAAiB,GACjB,IAAI3Q,EAAOkQ,EAAUiC,QAAQC,cAC7BxM,EAAmBqK,EAAY,QAAUjQ,EACzC4F,EAAmBqK,EAAY,QAAU3L,KAAKE,UAAU4L,GACxDrL,EAAsBa,EAC1B,EAuDyF1L,SAAC,YAE1EF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAAApC,UACNF,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CAACrD,QAxDR,WAChBmW,EAAUiC,QAAQc,MACtB,EAsDiD/Y,SAAC,gBAKtCF,EAAAA,EAAAA,KAACsC,EAAAA,EAAAA,KAAS,CAACK,MAAM,cAAcG,KAAK,cAAa5C,UAC7CF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAAA,SAAc,CACX4M,WAAS,EACTC,UAAW,IACX6D,SAzGQ,SAACpT,GACzB,IAAIuX,EAAcC,IAElBzB,EADYI,EAAcoB,GACJvX,EAAE6Y,OAAO9K,MAC/BiI,EAAgBD,EACpB,UA0GQpW,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CACAkV,EAAE,OACF8D,EAAE,OACFC,SAAS,WACTC,cAAc,OACdC,YAzKY,SAACC,GACrBhC,EAAmBgC,EAAMC,YAAYC,SACrC9B,EAAmB4B,EAAMC,YAAYE,QACzC,EAuKY3Z,QA5II,WACZ,GAAI2W,EAAe,CACf,IAAI1Q,EAAOkQ,EAAUiC,QAAQC,cACzBuB,EAAYrP,KAAKC,MAAMvE,GA5BD4T,EA6BDD,EAAUtB,MA7BJwB,EA6BWvC,EA7BRwC,EA6ByBpC,EA5B/DkC,EAAItB,SAAQ,SAACnK,EAAG8G,GACZ,IAAI8E,GAAO,EACX5L,EAAE6L,OAAO1B,SAAQ,SAAA2B,GACb,IAAIC,EAAMC,KAAKC,IAAIP,EAAIM,KAAKE,MAAMJ,EAAEJ,IAAM,GAE1C,IAAY,IADFM,KAAKC,IAAIN,EAAIK,KAAKE,MAAMJ,EAAEH,IAAM,KACd,IAARI,IAAiBH,EAAM,CACvCA,GAAO,EACP,IAAIO,EAAM,EACNC,EAAoB,GACxBX,EAAItB,SAAQ,SAACkC,EAAGC,GACRD,EAAEjC,aAAepK,EAAEoK,aACnB+B,GAAO,EACPC,EAAkBG,KAAK,CAAEJ,IAAAA,EAAKrF,MAAOwF,IAE7C,IACA,IAAIE,EAASJ,EAAkB5G,MAAK,SAAAiH,GAAC,OAAIA,EAAE3F,QAAUA,CAAK,IACpDgD,EAAc7B,EAAajI,EAAEoK,WAAaoC,EAAOL,KACvD7X,EAAKyS,eAAe,CAAE+C,YAAAA,IACtBxB,EAAetI,EAAEoK,WACrB,CACJ,GACJ,GAQA,CA9B6B,IAACqB,EAAKC,EAAGC,CA+B1C,EAsI6B5Z,UAEjBF,EAAAA,EAAAA,KAAC6a,EAAAA,EAAU,CACPrL,MAAO,CAAE4J,SAAU,WAAY5F,MAAO,OAAQsH,OAAQ,QACtDC,OAAQ/E,EACRgF,UAAU,cACVzC,WAAY/B,EACZ1E,IAAKoE,EACLzC,SA5IO,WACnBhR,EAAKyS,eAAe,CAAE+C,YAAa,KACnCd,GAAkB,EACtB,EA0IgBzD,SAAUgD,EACVI,YAAaA,QAOjC,CAEA,QAAejW,EAAAA,EAAAA,MAAKkV,G,mDC1NpB,SAASkF,KAEL,OACI5Y,EAAAA,EAAAA,MAAC6Y,EAAAA,EAAI,CACDC,aAAa,iBACbC,gBAAgB,iBAChBvF,IAAK,EACLzT,aAAa,OAAMlC,SAAA,EAEnBF,EAAAA,EAAAA,KAACqb,EAAAA,EAAQ,CAACjZ,aAAa,OAAOkZ,QAAS,EAAGC,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrb,UAE5DF,EAAAA,EAAAA,KAACwb,GAAM,CAACvF,UAAU,gBAAgBD,MAAOA,QAK7ChW,EAAAA,EAAAA,KAACqb,EAAAA,EAAQ,CAACjZ,aAAa,OAAOmZ,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrb,UAEhDF,EAAAA,EAAAA,KAACwb,GAAM,CAACvF,UAAU,gBAAgBD,MAAOA,QAI7ChW,EAAAA,EAAAA,KAACqb,EAAAA,EAAQ,CAACjZ,aAAa,OAAOmZ,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrb,UAEhDF,EAAAA,EAAAA,KAACwb,GAAM,CAACvF,UAAU,gBAAgBD,MAAOA,SAOzD,CAEA,QAAenV,EAAAA,EAAAA,MAAKoa,I,sDCnCpB,SAASQ,GAA4B3b,GAAkB,IAAhB6V,EAAY7V,EAAZ6V,aACrC,OACE3V,EAAAA,EAAAA,KAACH,GAAAA,EAAc,CAACE,QAAS4V,GAE7B,CAEA,QAAe9U,EAAAA,EAAAA,MAAK4a,I,qBCHpB,SAASC,GAA0B5b,GAAe,IAAZoP,EAAOpP,EAAPoP,QAClC5D,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAApCpH,EAAMsH,EAAA,GAAEmQ,EAASnQ,EAAA,GAElBoQ,GAA6BC,EAAAA,EAAAA,IAAqB,SAAC7Z,GAAK,OAAKA,EAAM4Z,0BAA0B,IAC7FE,GAAgCD,EAAAA,EAAAA,IAAqB,SAAC7Z,GAAK,OAAKA,EAAM8Z,6BAA6B,IAEnGC,EAAmB,SAAC1b,GACtB,IAAI2b,EAAY3b,EAAE6Y,OAAO3W,GACrB0Z,EAAY5b,EAAE6Y,OAAOgD,QACnBC,GAAU9R,EAAAA,EAAAA,GAASuR,GACzBO,EAAQ7D,SAAQ,SAAAnK,GACRA,EAAE6N,YAAcA,IAChB7N,EAAE8N,UAAYA,EAEtB,IACAH,GAA6B9M,EAAAA,EAAAA,GAAKmN,GACtC,GAEA7F,EAAAA,EAAAA,YAAU,WACN,IAAI8F,EAASlN,EAAQhB,KAAI,SAAA5H,GAAmC,MAAQ,CAAEnB,IAAvCmB,EAAHnB,IAA+C6W,UAAjC1V,EAAT0V,UAAqDC,UAAjC3V,EAAT2V,UAAqDzb,MAArC8F,EAAL9F,MAAiD,IACxGsb,EAA8BM,EAClC,GAAG,IAEH,IAAMnY,GAAQoY,EAAAA,EAAAA,UAAQ,WAclB,OAbYT,EACoB,OAA1BA,QAA0B,IAA1BA,OAA0B,EAA1BA,EAA4B1N,KAAI,SAAAC,GAAC,MAC/B,CACIxL,OAAO3C,EAAAA,EAAAA,KAACsc,GAAAA,EAAQ,CACZ/Z,GAAK,OAAD4L,QAAC,IAADA,OAAC,EAADA,EAAG6N,UACPvI,SAAUsI,EACVQ,eAAiB,OAADpO,QAAC,IAADA,OAAC,EAADA,EAAG8N,UAAU/b,SAE5BiO,EAAE3N,QAEV,IAEH,EAEV,GAAG,CAACob,IAMJ,OACI5b,EAAAA,EAAAA,KAACgE,GAAAA,EAAY,CACTC,MAAOA,EACPC,OAAQA,EACRC,aARa,SAAC9D,GAClBsb,EAAUtb,EACd,GASJ,CAEA,QAAeQ,EAAAA,EAAAA,MAAK6a,ICpDpB,SAASc,GAAoBhO,GAEzB,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmBjM,EAAS+L,EAAT/L,KAE3CrB,GAA0BC,EAAAA,GAAAA,GAAc,sBAAjCob,GAAsDlb,EAAAA,EAAAA,GAAAH,EAAA,GAAvC,GAEhBwa,GAA6BC,EAAAA,EAAAA,IAAqB,SAAC7Z,GAAK,OAAKA,EAAM4Z,0BAA0B,IAE7FjQ,GAAgC5J,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2J,6BAA6B,IACvFb,GAAmC/I,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM8I,gCAAgC,IAC7F6D,GAAoB5M,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAM2M,iBAAiB,IAE/D+N,EAAU,SAACV,GAAsC,IAA3BW,IAAcvW,UAAAwW,OAAA,QAAAC,IAAAzW,UAAA,KAAAA,UAAA,GACtC,OAAiC,OAA1BwV,QAA0B,IAA1BA,GAAAA,EAA4BjI,MAAK,SAAAxF,GAAC,OAAIA,EAAE6N,YAAcA,CAAS,IAAIJ,EAA2BjI,MAAK,SAAAxF,GAAC,OAAIA,EAAE6N,YAAcA,CAAS,IAAEC,UAAYU,CAC1J,EAYMzN,GAAUmN,EAAAA,EAAAA,UAAQ,WACpB,MAAO,CACH,CACI7b,MAAO,SACPwb,UAAW,sBACX7W,IAAK,sBACL8W,UAAWS,EAAQ,uBACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GAAK,OACVpO,EAAAA,EAAAA,KAACgd,GAAAA,EAAO,CAACC,UAAU,UAAUzc,MAAO4N,EAAMlO,SACrCkO,GACK,GAGlB,CACI5N,MAAO,sBACPwb,UAAW,oBACX7W,IAAK,oBACL8W,UAAWS,EAAQ,qBACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GAAK,OACVpO,EAAAA,EAAAA,KAACgd,GAAAA,EAAO,CAACC,UAAU,UAAUzc,MAAO4N,EAAMlO,SACrCkO,GACK,GAGlB,CACI5N,MAAO,aACPwb,UAAW,uBACX7W,IAAK,uBACL8W,UAAWS,EAAQ,wBACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GAAK,OACVpO,EAAAA,EAAAA,KAACgd,GAAAA,EAAO,CAACC,UAAU,UAAUzc,MAAO4N,EAAMlO,SACrCkO,GACK,GAGlB,CACI5N,MAAO,KACPwb,UAAW,MACX7W,IAAK,MACL8W,UAAWS,EAAQ,OACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GACL,OAAIA,GAEI/L,EAAAA,EAAAA,MAAC+S,EAAAA,EAAI,CAAC8H,eAAe,gBAAgBC,GAAG,IAAGjd,SAAA,EACvCF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAAD,SAAC,cACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACid,GAAG,IAAIhd,MAAM,WAAWmV,WAAW,WAAUrV,SAAEkO,OAIrD,UAEf,GAEJ,CACI5N,MAAO,KACPwb,UAAW,MACX7W,IAAK,MACL8W,UAAWS,EAAQ,OACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GACL,OAAIA,GAEI/L,EAAAA,EAAAA,MAAC+S,EAAAA,EAAI,CAAC8H,eAAe,gBAAgBC,GAAG,IAAGjd,SAAA,EACvCF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAAD,SAAC,cACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACid,GAAG,IAAIhd,MAAM,WAAWmV,WAAW,WAAUrV,SAAEkO,OAIrD,UAEf,GAEJ,CACI5N,MAAO,OACPwb,UAAW,OACX7W,IAAK,OACL8W,UAAWS,EAAQ,QACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,EAAOiP,GACZ,OAAe,KAAVjP,GAEG/L,EAAAA,EAAAA,MAAC+S,EAAAA,EAAI,CAAC8H,eAAe,gBAAgBC,GAAG,IAAGjd,SAAA,EACvCF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAAD,SAAEkO,KACN/L,EAAAA,EAAAA,MAAC+S,EAAAA,EAAI,CAAAlV,SAAA,EACDF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAAD,SAAC,SACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACid,GAAG,IAAIhd,MAAM,WAAWmV,WAAW,WAAUrV,SAAEmd,EAAIxM,gBAMhE7Q,EAAAA,EAAAA,KAACgd,GAAAA,EAAO,CAACC,UAAU,UAAUzc,MAAO4N,EAAMlO,SACrCkO,GAIjB,GAEJ,CACI5N,MAAO,MACPwb,UAAW,MACX7W,IAAK,MACL8W,UAAWS,EAAQ,OACnBI,UAAU,EACVtJ,OAAOiJ,GAA0B,IACjCM,OAAQ,SAAC3O,GAAK,OACVpO,EAAAA,EAAAA,KAACgd,GAAAA,EAAO,CAACC,UAAU,UAAUzc,MAAO4N,EAAMlO,SACrCkO,GACK,GAGlB,CACI5N,MAAO,SACPwb,UAAW,SACXxI,MAAO,GACPrO,IAAK,SACL8W,UAAWS,EAAQ,UACnBI,UAAU,EACVQ,MAAO,SACPP,OAAQ,SAAC3O,EAAOiP,EAAKpI,GAMjB,OACIjV,EAAAA,EAAAA,KAACyb,GAA4B,CAAC9F,aANb,WACjBhH,GAAkB,GAClB,IAAIE,EAAUlD,EAA8B+J,QAAO,SAAAvH,GAAC,OAAIA,EAAE5L,KAAO8a,EAAI9a,EAAE,IACvEuI,EAAiC+D,EACrC,GAIJ,GAGZ,GAAG,CAAC4N,EAAiBb,EAA4BjQ,IAEjD,OACItJ,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAACod,QAAQ,OAAOC,cAAc,SAAQtd,SAAA,EAEtCF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAACsd,UAAU,WAAUvd,UACrBF,EAAAA,EAAAA,KAAC0b,GAA0B,CAACxM,QAASA,OAGzClP,EAAAA,EAAAA,KAAC0d,GAAAA,EAAK,CACF/Y,KAAK,QACLkQ,UAAQ,EACR8I,OAAQ,CACJ9D,EAAG+D,OAAOC,aAEdC,YAAY,EACZ5O,QAASA,EAAQwG,QAAO,SAAAvH,GAAC,OAAoB,IAAhBA,EAAE8N,SAAkB,IACjDnH,WAAYnJ,EACZoS,aAAc,SAACC,EAAQ/I,GAAK,OACxBxG,IAAmBwG,EAAQ,EAAI,yBAA2B,EAAE,EAEhEgJ,MAAO,SAACD,EAAQ/I,GAAK,MAAM,CACvBlV,QAAS,SAACM,IA7KP,SAAC2d,EAAQ/I,GACxB,IAAQiJ,EAAaF,EAAbE,IAAKC,EAAQH,EAARG,IACTC,GAAW3R,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GACRuR,GAAM,IACT7N,MAAO+N,EAAM,EAAI,EACjB7N,MAAO8N,EAAM,EAAI,IAErB1b,EAAKyS,eAAekJ,EACxB,CAsKoBC,CAAWL,GACXtP,EAAkBuG,EAAQ,EAC9B,EACH,MAKjB,CAEA,QAAepU,EAAAA,EAAAA,MAAK2b,ICtMpB,SAAS8B,KAEL,IAAAhT,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAjK,EAAAA,EAAAA,GAAA+J,EAAA,GAA/CmD,EAAcjD,EAAA,GAAEkD,EAAiBlD,EAAA,GAExC8H,EAAehR,EAAAA,EAAAA,UAARG,GAAsBlB,EAAAA,EAAAA,GAAA+R,EAAA,GAAlB,GAEX,OACIjR,EAAAA,EAAAA,MAAAkR,EAAAA,SAAA,CAAArT,SAAA,EACIF,EAAAA,EAAAA,KAACc,EAAAA,EAAkB,KAEnBuB,EAAAA,EAAAA,MAAClC,EAAAA,GAAG,CAAC+B,EAAE,IAAIqc,GAAG,IAAItc,UAAU,KAAKE,GAAG,UAAUC,aAAa,OAAMlC,SAAA,EAE7DF,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAIqc,GAAG,IAAIC,OAAO,iBAAiBpc,aAAa,OAAOD,GAAIsM,EAAiB,UAAY,GAAGvO,UAE9FF,EAAAA,EAAAA,KAACuO,EAAuB,CAAC9L,KAAMA,EAAMgM,eAAgBA,EAAgBC,kBAAmBA,OAI5F1O,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAIqc,GAAG,IAAIC,OAAO,iBAAiBpc,aAAa,OAAMlC,UAEzDF,EAAAA,EAAAA,KAACwc,GAAmB,CAAC/Z,KAAMA,EAAMgM,eAAgBA,EAC7CC,kBAAmBA,UAM/B1O,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAIqc,GAAG,IAAItc,UAAU,KAAKE,GAAG,UAAUC,aAAa,OAAMlC,UAE7DF,EAAAA,EAAAA,KAAC4V,EAAS,OAId5V,EAAAA,EAAAA,KAACG,EAAAA,GAAG,CAAC+B,EAAE,IAAIqc,GAAG,IAAItc,UAAU,KAAKE,GAAG,UAAUC,aAAa,OAAMlC,UAE7DF,EAAAA,EAAAA,KAACib,GAAW,QAK5B,CAEA,QAAepa,EAAAA,EAAAA,MAAKyd,G","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","modules/hooks/useResetProfilePatient.js","modules/hooks/useSavePatient.js","components/SelectInputs/PathologistSelectInput.js","pages/DiseaseHistory/modules/components/DiseaseHistoryFormBloke/index.js","modules/consts/familyMembersSelectOptions.js","pages/DiseaseHistory/modules/components/FamilyMembersList/ModalFamilyMemberForm.js","pages/DiseaseHistory/modules/components/FamilyMembersList/HeaderFamilyMembersList.js","pages/DiseaseHistory/modules/components/FamilyMembersList/index.js","pages/DiseaseHistory/modules/components/BlockForm/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/Canvas/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/index.js","pages/DiseaseHistory/modules/components/DeleteDiseaseHistoryTableRow/index.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/DiseaseHistoryTableSetting.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/index.js","pages/DiseaseHistory/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo } from 'react'\r\nimport { Button, Form, Space, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport useResetProfilePatient from '../../modules/hooks/useResetProfilePatient.js'\r\nimport useSavePatient from '../../modules/hooks/useSavePatient.js'\r\nimport { useStore } from '../../modules/store/index.js';\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const {\r\n        patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { resetProfilePatient } = useResetProfilePatient();\r\n\r\n    const handleClear = () => {\r\n        resetProfilePatient()\r\n    }\r\n\r\n    const { handleSave, isLoading } = useSavePatient()\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                        onFieldsChange={onFieldsChange}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\n\r\nfunction useResetProfilePatient() {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, setFamilyMembersList, treatmentHistoryForm, searchPatientForm } = useGlobalContext()\r\n\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const setSavedDrawingCanvas = useStore((store) => store.setSavedDrawingCanvas)\r\n\r\n\r\n    const setDescriptionsCanvas = useStore((store) => store.setDescriptionsCanvas)\r\n\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const setRecipeList = useStore((store) => store.setRecipeList)\r\n\r\n\r\n    const resetProfilePatient = () => {\r\n        searchPatientForm.resetFields()\r\n        patientForm.resetFields()\r\n        personInfoForm.resetFields()\r\n        diseaseHistoryForm.resetFields()\r\n        treatmentHistoryForm.resetFields()\r\n        setFamilyMembersList([])\r\n        setDataSourceDiseaseHistoryTable([])\r\n        setSavedDrawingCanvas({})\r\n        setDescriptionsCanvas({})\r\n        setDataSourceVisitTable([])\r\n        setDataSourceAnalysisTable([])\r\n        setDataSourceTreatmentTable([])\r\n        setRecipeList([])\r\n    }\r\n\r\n    return { resetProfilePatient }\r\n}\r\n\r\nexport default useResetProfilePatient","import dayjs from \"dayjs\"\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from \"../api/index.js\"\r\nimport { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\nimport { useState } from \"react\"\r\n\r\n\r\nfunction useSavePatient() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const {\r\n         patientForm,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n\r\n    const savePersonInfo = (patientId) => {\r\n        const {\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n        } = patientForm.getFieldsValue()\r\n\r\n        let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n        const sendObj = {\r\n            ...personInfoForm.getFieldsValue(),\r\n            birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n            alkogol: alkogol ? 1 : 0,\r\n            smoke: smoke ? 1 : 0,\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n            patientId,\r\n        };\r\n\r\n        postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n        savedDrawingCanvas.deseaseImageDesc =\r\n            JSON.stringify(descriptionsCanvas);\r\n\r\n        const sendObj = {\r\n            ...diseaseHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            familyMembersList,\r\n            deseaseImagesList: savedDrawingCanvas,\r\n            deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n        };\r\n        postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n        const sendObj = {\r\n            patientVisitsList: dataSourceVisitTable,\r\n            patientId\r\n        };\r\n        postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n        const sendObj = {\r\n            analyzesMediaList: dataSourceAnalysisTable,\r\n            patientId\r\n        };\r\n        postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n        const sendObj = {\r\n            ...treatmentHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            treatmentDynamics: dataSourceTreatmentTable,\r\n            recipeList,\r\n        };\r\n        postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return { handleSave, isLoading }\r\n}\r\n\r\nexport default useSavePatient","import { Select } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchPathologistsPlace } from '../../modules/api';\r\n\r\nfunction PathologistSelectInput() {\r\n\r\n    const { data: pathologistsList, isLoading, refetch } = useQuery([\"managers/pathologists\"], fetchPathologistsPlace, {\r\n        enabled: false,\r\n    })\r\n\r\n    return (\r\n        <Select\r\n            allowClear\r\n            lazyLoad\r\n            loading={isLoading}\r\n            onFocus={refetch}\r\n        >\r\n            {pathologistsList?.map((i) => {\r\n                return (\r\n                    <Select.Option key={i.pathologistId} value={i.pathologistName}>\r\n                        {i.pathologistName}\r\n                    </Select.Option>\r\n                );\r\n            })}\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default memo(PathologistSelectInput)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Button, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport { PathologistSelectInput } from '../../../../../components/SelectInputs';\r\n\r\nfunction DiseaseHistoryFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const onFinish = (values) => {\r\n        setIsFieldsChange(true)\r\n        if (selectedRowKey) {\r\n            let newData = dataSourceDiseaseHistoryTable.map((i) => {\r\n                if (i.id === values.id) return values\r\n                else return i\r\n            })\r\n            setDataSourceDiseaseHistoryTable(newData)\r\n        } else {\r\n            let id = new Date().getTime()\r\n            values.id = id\r\n            values.key = id\r\n            setDataSourceDiseaseHistoryTable([...dataSourceDiseaseHistoryTable, values])\r\n        }\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Breast\" name=\"complaintBreastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"no\">Missing</Select.Option>\r\n                        <Select.Option value=\"right\">Right</Select.Option>\r\n                        <Select.Option value=\"left\">Left</Select.Option>\r\n                        <Select.Option value=\"both\">Both</Select.Option>\r\n                        <Select.Option value=\"postmastektR\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"postmastektL\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"axilaR\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"axilaL\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestR\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"anotherBrestL\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestBoth\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Duration of illness\"\r\n                    name=\"durationOfIllness\"\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Complaints\" name=\"complaintDescription\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkEr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"erN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkPr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"prN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" >\r\n                    <Form.Item noStyle name=\"her2\">\r\n                        <InputNumber\r\n                            min={0}\r\n                            max={3}\r\n                            defaultValue={0}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('her2') === 2) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"her2FT\">\r\n                                        <InputNumber addonBefore=\"FT\" />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else {\r\n                                form.setFieldValue?.({her2FT:''})\r\n                                return ''\r\n                            }\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <PathologistSelectInput />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='diseaseHistoryFormBloke'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryFormBloke)","\r\n\r\nexport const familyMembersSelectOptions = [\r\n    'Mother',\r\n    'Father',\r\n    'Maternal grandmother',\r\n    'Paternal grandmother',\r\n    'Paternal grandfather',\r\n    'Maternal grandfather',\r\n    'Brother',\r\n    'Sister',\r\n    \"Father's brother\",\r\n    \"Mother's brother\",\r\n    \"Father's sister\",\r\n    \"Mother's sister\",\r\n]","import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy'\r\nimport { useStore } from '../../../../../modules/store'\r\n\r\nfunction ModalFamilyMemberForm(props) {\r\n\r\n    const { isOpen, onClose, initialRef, finalRef, title, handleEdit, isEdit, handleAdd, form } = props\r\n\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n\r\n\r\n    const onFinish = () => {\r\n        setIsFieldsChange(true)\r\n        try {\r\n            const values = form.getFieldsValue()\r\n            const copyValues = deepCopy(values)\r\n            if (isEdit) {\r\n                handleEdit(copyValues)\r\n            }\r\n            else {\r\n                handleAdd(copyValues)\r\n            }\r\n            form.resetFields()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        form.resetFields()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>{title}</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n\r\n                    <Form\r\n                        form={form}\r\n                        labelWrap\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 16,\r\n                        }}\r\n                        style={{\r\n                            maxWidth: 600,\r\n                        }}\r\n                    >\r\n\r\n                        <Form.Item hidden name=\"Id\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item hidden name=\"familyMember\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Trauma\" name=\"familyMemberInjury\">\r\n                            <Input\r\n                                ref={initialRef}\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Deceased of cancer\" name=\"familyMemberDied\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Living with cancer\" name=\"familyMemberCurrentCancer\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Description\" name=\"familyMemberDesc\">\r\n                            <Input.TextArea showCount maxLength={3000}\r\n                                rows={3}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button\r\n                        type='primary'\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                        onClick={onFinish}\r\n                    >\r\n                        {isEdit ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalFamilyMemberForm","import React, { memo, useState } from 'react'\r\nimport { familyMembersSelectOptions } from '../../../../../modules/consts'\r\nimport { Alert, Button, Form, Select, Space } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nconst arrSeveralAdd = [\r\n    \"Brother\",\r\n    \"Sister\",\r\n    \"Father's-brother\",\r\n    \"Mother's-brother\",\r\n    \"Father's-sister\",\r\n    \"Mother's-sister\",\r\n];\r\n\r\nfunction HeaderFamilyMembersList() {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n    const [selectedMember, setSelectedMember] = useState()\r\n    const [countAddedFM, setCountAddedFM] = useState({});\r\n    const [isShowAlert, setIsShowAlert] = useState(false)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = (memberData) => {\r\n        memberData.familyMember = selectedMember\r\n        let id = new Date().getTime()\r\n        memberData.Id = id\r\n        setFamilyMembersList(prev => [...prev, memberData])\r\n        onClose()\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setIsShowAlert(false)\r\n        setSelectedMember(e)\r\n    }\r\n\r\n    const handleCloseAlert = () => {\r\n        setIsShowAlert(false)\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (!selectedMember) {\r\n            return\r\n        } else {\r\n            const findEl = familyMembersList.find((i) => i.familyMember === selectedMember)\r\n\r\n            if (!findEl) {\r\n                setSelectedMember(selectedMember)\r\n                onOpen()\r\n            } else if (arrSeveralAdd.includes(selectedMember)) {\r\n                let s = selectedMember;\r\n                let count = countAddedFM[selectedMember] || 2;\r\n                let newSelectedMember = s + \"_\" + count;\r\n                count += 1;\r\n                setCountAddedFM({ [selectedMember]: count });\r\n                setSelectedMember(newSelectedMember)\r\n                onOpen()\r\n            } else {\r\n                setIsShowAlert(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Form.Item labelAlign='left' label=\"Family members\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                    <Select\r\n                        onChange={onChange}\r\n                        allowClear\r\n                        ref={finalRef}\r\n                    >\r\n                        {familyMembersSelectOptions.map(i => {\r\n                            return (\r\n                                <Select.Option key={i} value={i}>{i}</Select.Option>\r\n                            )\r\n                        })}\r\n                    </Select>\r\n                    <Button disabled={!selectedMember} onClick={onClick}><PlusOutlined /></Button>\r\n                </Space.Compact>\r\n            </Form.Item>\r\n\r\n            {isShowAlert && <Alert\r\n                closable\r\n                afterClose={handleCloseAlert} \r\n                message=\"Selected family member already added\" type=\"info\"\r\n\r\n            />}\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedMember}\r\n                handleAdd={handleAdd}\r\n                form={form}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderFamilyMembersList)","import React, { memo, useState } from 'react'\r\nimport { Form, List } from 'antd'\r\nimport { Box, Flex, IconButton, Spacer, useDisclosure } from '@chakra-ui/react'\r\nimport HeaderFamilyMembersList from './HeaderFamilyMembersList'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\nfunction FamilyMembersList() {\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const [selectedListItem, setSelectedListItem] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n\r\n    const onClick = (item) => {\r\n        form.setFieldsValue(item)\r\n        setSelectedListItem(item)\r\n        onOpen()\r\n    }\r\n\r\n    const handleEdit = (memberData) => {\r\n        const newList = familyMembersList.map(i => {\r\n            if (i.Id === memberData.Id) return memberData\r\n            else return i\r\n        })\r\n        onClose()\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n    const handleDelete = (e,item) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newList = familyMembersList.filter(i => i.Id !== item.Id)\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n\r\n    return (\r\n        <Form.Item noStyle >\r\n\r\n            <List\r\n                size=\"small\"\r\n                header={<HeaderFamilyMembersList />}\r\n                bordered\r\n                dataSource={familyMembersList}\r\n                renderItem={(item, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={item.Id}\r\n                            onClick={() => onClick(item)}\r\n                            _hover={{ bg: 'pink.200' }}\r\n                            cursor='pointer'\r\n                        >\r\n                            <List.Item>\r\n                                <Flex w='100%'>\r\n                                    <Box>{index + 1}. {item.familyMember}</Box>\r\n                                    <Spacer />\r\n                                    <IconButton\r\n                                        isRound\r\n                                        variant='ghost'\r\n                                        fontWeight='bold'\r\n                                        size='xs'\r\n                                    >\r\n                                        <Box onClick={(e) => handleDelete(e,item)} color='pink.500'>X</Box>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            </List.Item>\r\n                        </Box>\r\n                    )\r\n                }}\r\n            />\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedListItem?.familyMember}\r\n                isEdit={true}\r\n                handleEdit={handleEdit}\r\n                form={form}\r\n            />\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nexport default memo(FamilyMembersList)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Input, Radio, Select, Form } from 'antd';\r\nimport React, { memo } from 'react'\r\nimport FamilyMembersList from '../FamilyMembersList';\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js';\r\nimport { useStore } from '../../../../../modules/store';\r\n\r\nfunction BlockForm() {\r\n\r\n    const { diseaseHistoryForm } = useGlobalContext()\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n                    <Input.TextArea showCount maxLength={3000} allowClear rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Received traumas\" name=\"receivedTraumas\">\r\n                    <Radio.Group\r\n                    >\r\n                        <Radio value={1}>Yes</Radio>\r\n                        <Radio value={2}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.receivedTraumas !== currentValues.receivedTraumas}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('receivedTraumas') === 1 ? (\r\n                            <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                                <Input.TextArea showCount maxLength={3000} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Benign\" name=\"beniqen\">\r\n                    <Select>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <FamilyMembersList />\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(BlockForm)\r\n\r\n\r\n\r\n","import { Box, Circle } from '@chakra-ui/react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport React, { memo, useEffect, useRef, useState } from 'react'\r\nimport CanvasDraw from 'react-canvas-draw'\r\nimport { useStore } from '../../../../../../modules/store'\r\n\r\n\r\nfunction CanvasComponent({ image, imageName }) {\r\n\r\n    const canvasRef = useRef(null);\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const savedDrawingCanvas = useStore(store => store.savedDrawingCanvas)\r\n    const setSavedDrawingCanvas = useStore(store => store.setSavedDrawingCanvas)\r\n\r\n    const [descriptions, setDescriptions] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        if (savedDrawingCanvas[imageName + \"Desc\"]) {\r\n            const str = savedDrawingCanvas[imageName + \"Desc\"]\r\n            setDescriptions(JSON.parse(str))\r\n        }\r\n    }, [])\r\n\r\n    const [colorCanvas, setColorCanvas] = useState('green')\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\r\n\r\n    const [X_PositionMouse, setX_PositionMouse] = useState()\r\n    const [Y_PositionMouse, setY_PositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setX_PositionMouse(event.nativeEvent.offsetX);\r\n        setY_PositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        arr.forEach((i, index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if (isY === true && isX === true && !isIf) {\r\n                    isIf = true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if (d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({ num, index: indexD })\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    const description = descriptions[i.brushColor + findEl.num]\r\n                    form.setFieldsValue({ description })\r\n                    setColorCanvas(i.brushColor)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (disableCanvas) {\r\n            let data = canvasRef.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, X_PositionMouse, Y_PositionMouse)\r\n        }\r\n    };\r\n\r\n    const onChangeCanvas = () => {\r\n        form.setFieldsValue({ description: '' })\r\n        setDisableSaveBtn(false)\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = colorCanvas + colorNumber;\r\n        if (Object.hasOwn(descriptions, objProperty)) {\r\n            form.setFieldsValue({ description: descriptions[objProperty] })\r\n        } else {\r\n            form.setFieldsValue({ description: '' })\r\n        }\r\n    }, [colorCanvas]);\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = computationColorNumber()\r\n        let param = colorCanvas + colorNumber;\r\n        descriptions[param] = e.target.value;\r\n        setDescriptions(descriptions);\r\n    };\r\n\r\n    const computationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = canvasRef.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if (i.brushColor === colorCanvas) {\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setBrushRadius(20);\r\n        setDisableCanvas(false);\r\n    };\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n    \r\n    const handleSave = () => {\r\n        onFieldsChange()\r\n        setBrushRadius(0);\r\n        setDisableSaveBtn(true);\r\n        setDisableCanvas(true);\r\n        let data = canvasRef.current.getSaveData();\r\n        savedDrawingCanvas[imageName + 'Data'] = data;\r\n        savedDrawingCanvas[imageName + 'Desc'] = JSON.stringify(descriptions);\r\n        setSavedDrawingCanvas(savedDrawingCanvas);\r\n    };\r\n\r\n    const handleClear = () => {\r\n        canvasRef.current.undo();\r\n    };\r\n\r\n    const handleRestoreDrawing = () => {\r\n        let data = savedDrawingCanvas && savedDrawingCanvas[imageName + 'Data'] ? savedDrawingCanvas[imageName + 'Data'] : \"\"\r\n\r\n        if (data) {\r\n            canvasRef.current.loadSaveData(data);\r\n            setTimeout(() => setDisableSaveBtn(true), 100)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => handleRestoreDrawing(), 1000)\r\n        return () => clearTimeout(timer)\r\n    }, [canvasRef])\r\n\r\n\r\n    return (\r\n        <Box bg='pink.100' p='1' borderRadius='10px'>\r\n\r\n            <Form\r\n                form={form}\r\n                labelAlign='left'\r\n                style={{ width: '100%' }}\r\n            >\r\n\r\n                <Space.Compact width='100%' style={{ width: \"100%\", alignItems: 'center' }}>\r\n\r\n                    <Form.Item\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        <Form.Item noStyle name=\"colorCanvas\">\r\n                            <Select\r\n                                onSelect={(e) => setColorCanvas(e)}\r\n                                defaultValue='green'\r\n                                suffixIcon={<Circle mr='4' size='20px' bg={colorCanvas} />}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n                                <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n                                <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n                                <Select.Option value=\"blue\">My operation</Select.Option>\r\n                                <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button onClick={handleAdd}>Edit</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button disabled={disableSaveBtn} type='primary' onClick={handleSave}>Save</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button onClick={handleClear}>Clear</Button>\r\n                    </Form.Item>\r\n\r\n                </Space.Compact>\r\n\r\n                <Form.Item label='Description' name='description'>\r\n                    <Input.TextArea\r\n                        showCount\r\n                        maxLength={3000}\r\n                        onChange={onChangeDescription}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Box\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                position=\"relative\"\r\n                paddingBottom=\"100%\"\r\n                onMouseMove={handleMouseMove}\r\n                onClick={onClick}\r\n            >\r\n                <CanvasDraw\r\n                    style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n                    imgSrc={image}\r\n                    className=\"canvas-draw\"\r\n                    brushColor={colorCanvas}\r\n                    ref={canvasRef}\r\n                    onChange={onChangeCanvas}\r\n                    disabled={disableCanvas}\r\n                    brushRadius={brushRadius}\r\n\r\n                />\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(CanvasComponent)","import { Grid, GridItem } from '@chakra-ui/react'\r\nimport React, { memo } from 'react'\r\nimport Canvas from './Canvas'\r\nimport image from '../../../../../modules/images/man.png'\r\n\r\nfunction BlockCanvas() {\r\n\r\n    return (\r\n        <Grid\r\n            templateRows='repeat(2, 1fr)'\r\n            templateColumns='repeat(5, 1fr)'\r\n            gap={4}\r\n            borderRadius='10px'\r\n        >\r\n            <GridItem borderRadius='10px' rowSpan={2} colSpan={[5, 5, 5, 3]} >\r\n\r\n                <Canvas imageName='deseaseImage1' image={image} />\r\n\r\n            </GridItem>\r\n\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]} >\r\n\r\n                <Canvas imageName='deseaseImage2' image={image} />\r\n\r\n            </GridItem>\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]}>\r\n\r\n                <Canvas imageName='deseaseImage3' image={image} />\r\n\r\n            </GridItem>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(BlockCanvas)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteDiseaseHistoryTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteDiseaseHistoryTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction DiseaseHistoryTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    const setDiseaseHistoryTableSetting = useLocalStorageStore((store) => store.setDiseaseHistoryTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(diseaseHistoryTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setDiseaseHistoryTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setDiseaseHistoryTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = diseaseHistoryTableSetting\r\n            ? diseaseHistoryTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [diseaseHistoryTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTableSetting)","import { Box, Flex, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteDiseaseHistoryTableRow from '../DeleteDiseaseHistoryTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport DiseaseHistoryTableSetting from './DiseaseHistoryTableSetting';\r\n\r\nfunction DiseaseHistoryTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return diseaseHistoryTableSetting?.find(i => i.dataIndex === dataIndex) ? diseaseHistoryTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const { erN, prN } = record\r\n        let initialForm = {\r\n            ...record,\r\n            ihkEr: erN ? 1 : 2,\r\n            ihkPr: prN ? 1 : 2,\r\n        }\r\n        form.setFieldsValue(initialForm)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n                isVisible: visible('complaintBreastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n                isVisible: visible('durationOfIllness'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n                isVisible: visible('complaintDescription'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value, row) => {\r\n                    if (+value === 2) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>{value}</Box>\r\n                                <Flex>\r\n                                    <Box>FT:</Box>\r\n                                    <Box ml='2' color='blue.400' fontWeight='semibold'>{row.her2FT}</Box>\r\n                                </Flex>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <Tooltip placement=\"topLeft\" title={value}>\r\n                                {value}\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = dataSourceDiseaseHistoryTable.filter(i => i.id !== row.id)\r\n                        setDataSourceDiseaseHistoryTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteDiseaseHistoryTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, diseaseHistoryTableSetting, dataSourceDiseaseHistoryTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <DiseaseHistoryTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceDiseaseHistoryTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTable)","import React, { memo, useState } from 'react'\r\nimport DiseaseHistoryFormBloke from './modules/components/DiseaseHistoryFormBloke'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport BlockForm from './modules/components/BlockForm'\r\nimport BlockCanvas from './modules/components/BlockCanvas'\r\nimport { Box } from '@chakra-ui/react'\r\nimport DiseaseHistoryTable from './modules/components/DiseaseHistoryTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction DiseaseHistory() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <DiseaseHistoryFormBloke form={form} selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <DiseaseHistoryTable form={form} selectedRowKey={selectedRowKey}\r\n                        setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockForm />\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockCanvas />\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistory)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","resetProfilePatient","useResetProfilePatient","_useSavePatient","useSavePatient","handleSave","isLoading","onFieldsChange","useStore","store","boxShadow","p","bg","borderRadius","_jsxs","Form","id","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","fetchPatientId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sendRequest","sent","abrupt","data","t0","stop","apply","arguments","postPersonInfo","_ref2","_callee2","obj","_context2","_x","postMorby","_ref3","_callee3","_context3","_x2","postVisit","_ref4","_callee4","_context4","_x3","postAnalyses","_ref5","_callee5","_context5","_x4","postTreatment","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","patientId","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","sendObj","patientName","patientSurName","patientPatronymic","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","patientVisitsList","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","JSON","parse","stringify","personInfoForm","diseaseHistoryForm","setFamilyMembersList","treatmentHistoryForm","searchPatientForm","setDataSourceDiseaseHistoryTable","setSavedDrawingCanvas","setDescriptionsCanvas","setDataSourceVisitTable","setDataSourceAnalysisTable","setDataSourceTreatmentTable","setRecipeList","resetFields","_useState","useState","_useState2","setIsLoading","familyMembersList","dataSourceDiseaseHistoryTable","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","_patientForm$getField","getFieldsValue","_personInfoForm$getFi","birthDate","alkogol","smoke","_objectSpread","dayjs","format","saveMorby","deseaseImageDesc","deseaseImagesList","deseaseHistoryDynamicsList","saveVisit","saveAnalyses","analyzesMediaList","saveTreatment","treatmentDynamics","setTimeout","Promise","all","PathologistSelectInput","_useQuery","useQuery","enabled","pathologistsList","refetch","Select","allowClear","lazyLoad","onFocus","map","i","value","pathologistName","pathologistId","DiseaseHistoryFormBloke","props","selectedRowKey","setSelectedRowKey","setIsFieldsChange","values","newData","Date","getTime","_toConsumableArray","SimpleGrid","columns","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","showCount","maxLength","rows","Radio","direction","shouldUpdate","prevValues","currentValues","ihkEr","getFieldValue","ihkPr","min","max","defaultValue","her2","_form$setFieldValue","setFieldValue","call","her2FT","offset","familyMembersSelectOptions","onClose","initialRef","finalRef","handleEdit","isEdit","handleAdd","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ref","ModalFooter","block","PlusOutlined","copyValues","error","console","log","arrSeveralAdd","HeaderFamilyMembersList","_useDisclosure","useDisclosure","onOpen","React","selectedMember","setSelectedMember","_useState3","_useState4","countAddedFM","setCountAddedFM","_useState5","_useState6","isShowAlert","setIsShowAlert","_Form$useForm","_Fragment","width","onChange","disabled","find","familyMember","includes","s","count","newSelectedMember","_defineProperty","Alert","closable","afterClose","ModalFamilyMemberForm","memberData","Id","FamilyMembersList","selectedListItem","setSelectedListItem","List","header","bordered","dataSource","renderItem","item","index","setFieldsValue","_hover","Flex","w","Spacer","fontWeight","preventDefault","newList","filter","handleDelete","BlockForm","gap","receivedTraumas","CanvasComponent","image","imageName","canvasRef","useRef","descriptions","setDescriptions","useEffect","str","colorCanvas","setColorCanvas","disableCanvas","setDisableCanvas","_useState7","_useState8","brushRadius","setBrushRadius","_useState9","_useState10","disableSaveBtn","setDisableSaveBtn","_useState11","_useState12","X_PositionMouse","setX_PositionMouse","_useState13","_useState14","Y_PositionMouse","setY_PositionMouse","colorNumber","computationColorNumber","objProperty","Object","hasOwn","description","_data","current","getSaveData","lines","forEach","brushColor","timer","loadSaveData","handleRestoreDrawing","clearTimeout","alignItems","onSelect","suffixIcon","Circle","mr","undo","target","h","position","paddingBottom","onMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","arr","x","y","isIf","points","c","isX","Math","abs","round","num","arrSelectedColors","d","indexD","push","findEl","f","CanvasDraw","height","imgSrc","className","BlockCanvas","Grid","templateRows","templateColumns","GridItem","rowSpan","colSpan","Canvas","DeleteDiseaseHistoryTableRow","DiseaseHistoryTableSetting","setIsOpen","diseaseHistoryTableSetting","useLocalStorageStore","setDiseaseHistoryTableSetting","onChangeCheckbox","dataIndex","isVisible","checked","copyCTS","colArr","useMemo","Checkbox","defaultChecked","DiseaseHistoryTable","isLargerThan400","visible","defaultVisible","length","undefined","ellipsis","render","Tooltip","placement","justifyContent","pr","ml","row","align","display","flexDirection","alignSelf","Table","scroll","window","innerHeight","pagination","rowClassName","record","onRow","erN","prN","initialForm","onRowTable","DiseaseHistory","my","border"],"sourceRoot":""}