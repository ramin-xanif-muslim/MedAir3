{"version":3,"file":"static/js/838.218a4089.chunk.js","mappings":"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","sources":["components/DeleteTableRow/index.js","components/ProfilePatientForm/index.js","components/TableSetting/index.js","modules/api/index.js","modules/functions/deepCopy.js","modules/hooks/useResetProfilePatient.js","modules/hooks/useSavePatient.js","pages/Analysis/modules/components/DeleteAnalysisTableRow/index.js","pages/Analysis/modules/components/AnalysisTable/AnalysisTableSetting.js","pages/Analysis/modules/components/AnalysisTable/index.js","pages/Analysis/modules/components/UploadForm/index.js","pages/Analysis/modules/components/AnalysisFormBlok/index.js","pages/Analysis/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\nfunction DeleteTableRow({ onClick }) {\r\n\r\n    return (\r\n        <Typography.Link>\r\n            <Box color='red' onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <DeleteOutlined/>\r\n                </Popconfirm>\r\n            </Box>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default memo(DeleteTableRow);\r\n","import React, { memo } from 'react'\r\nimport { Button, Form, Space, Input, InputNumber } from 'antd'\r\nimport { useGlobalContext } from '../../modules/context/index.js'\r\nimport { ArrowsAltOutlined, ShrinkOutlined } from \"@ant-design/icons\";\r\nimport { Box, Collapse, useMediaQuery } from \"@chakra-ui/react\";\r\nimport useResetProfilePatient from '../../modules/hooks/useResetProfilePatient.js'\r\nimport useSavePatient from '../../modules/hooks/useSavePatient.js'\r\nimport { useStore } from '../../modules/store/index.js';\r\n\r\n\r\nfunction ProfilePatientForm() {\r\n\r\n    const {\r\n        patientForm,\r\n        inPatientCollapse,\r\n        setInPatientCollapse,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const [isLargerThan600] = useMediaQuery('(min-width: 600px)')\r\n\r\n    const { resetProfilePatient } = useResetProfilePatient();\r\n\r\n    const handleClear = () => {\r\n        resetProfilePatient()\r\n    }\r\n\r\n    const { handleSave, isLoading } = useSavePatient()\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n\r\n    return (\r\n        <Box boxShadow='xl' p='2' bg='pink.100' borderRadius='15px' >\r\n            <Form\r\n                id='patientForm'\r\n                onFinish={handleSave}\r\n                form={patientForm}\r\n                layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n                <Form.Item\r\n                    label=\"Name\"\r\n                >\r\n                    <Space.Compact>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            key=\"patientName\"\r\n                            name=\"patientName\"\r\n                        >\r\n                            <Input placeholder=\"Name\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"patientId\"\r\n                            noStyle\r\n                        >\r\n                            <InputNumber readOnly addonBefore='№' placeholder=\"Patient №\" />\r\n                        </Form.Item>\r\n\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => setInPatientCollapse(prev => !prev)}\r\n                            icon={inPatientCollapse ? <ArrowsAltOutlined /> : <ShrinkOutlined />}\r\n\r\n                        />\r\n\r\n                    </Space.Compact>\r\n                </Form.Item>\r\n\r\n                <Collapse in={inPatientCollapse} animateOpacity>\r\n                    <Form\r\n                        form={patientForm}\r\n                        layout={isLargerThan600 ? \"inline\" : \"vertical\"}\r\n                        onFieldsChange={onFieldsChange}\r\n                    >\r\n\r\n                        <Form.Item key=\"patientSurName\" name=\"patientSurName\" label=\"Suriname\">\r\n                            <Input placeholder=\"Suriname\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item key=\"patientPatronymic\" label=\"Patronymic\" name=\"patientPatronymic\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </Collapse>\r\n\r\n                <Form.Item noStyle>\r\n                    <Space>\r\n                        <Button\r\n                            onClick={handleSave}\r\n                            form='patientForm'\r\n                            type=\"primary\"\r\n                            htmlType='submit'\r\n                            loading={isLoading}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>\r\n                            Clear\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(ProfilePatientForm)","import { Box, IconButton } from '@chakra-ui/react'\r\nimport { Dropdown } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\n\r\nfunction TableSetting({ items, isOpen, onOpenChange }) {\r\n  return (\r\n    <Box cursor='pointer'>\r\n      <Dropdown\r\n        trigger={[\"click\"]}\r\n        menu={{ items }}\r\n        open={isOpen}\r\n        onOpenChange={onOpenChange}\r\n      >\r\n        <IconButton\r\n          variant='ghost'\r\n          color='pink.500'\r\n          size='sm'\r\n          isRound\r\n          aria-label='Search database'\r\n          icon={<SettingOutlined />}\r\n        />\r\n      </Dropdown>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(TableSetting)","import { message } from \"antd\";\r\nimport sendRequest from \"./sendRequest\";\r\n\r\n\r\nconst messageOnSave = (res, nameFunc) => {\r\n    if (res && typeof res !== \"string\") {\r\n        message.success({\r\n            content: nameFunc + \" saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    } else {\r\n        message.error({\r\n            content: nameFunc + \" don't saved\",\r\n            key: nameFunc + \"_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchPatientId = async () => {\r\n    try {\r\n        let res = await sendRequest(\"patientid\", {}, \"get\");\r\n        return res.data;\r\n    } catch (e) {\r\n        message.error({\r\n            content: e,\r\n            key: \"doc_save\",\r\n            duration: 2,\r\n        });\r\n    }\r\n};\r\n\r\nexport const postPersonInfo = async (obj) => {\r\n    let res = await sendRequest(\"vite\", obj, \"post\");\r\n    messageOnSave(res, \"Person Info\");\r\n    return res\r\n};\r\n\r\nexport const postMorby = async (obj) => {\r\n    let res = await sendRequest(\"morby\", obj, \"post\");\r\n    messageOnSave(res, \"Disease History\");\r\n};\r\n\r\nexport const postVisit = async (obj) => {\r\n    let res = await sendRequest(\"visits\", obj, \"post\");\r\n    messageOnSave(res, \"Visit\");\r\n};\r\n\r\nexport const postAnalyses = async (obj) => {\r\n    let res = await sendRequest(\"analyses\", obj, \"post\");\r\n    messageOnSave(res, \"Analyses\");\r\n};\r\n\r\nexport const postTreatment = async (obj) => {\r\n    let res = await sendRequest(\"treatment\", obj, \"post\");\r\n    messageOnSave(res, \"Treatment\");\r\n};\r\n\r\nexport const putVisitFormCalendar = async (obj) =>\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            } else {\r\n                patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientId();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendPersonInfo = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await postPersonInfo(sendPersonInfo);\r\n        }\r\n        let res = await putVisitFormCalendar(sendObjVisit);\r\n    }\r\n    return true\r\n};\r\n\r\n\r\nexport const fetchPathologistsPlace = async () => {\r\n    let res = await sendRequest(\"managers/pathologists\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\nexport const fetchManagersPlace = async () => {\r\n    let res = await sendRequest(\"managers/places\");\r\n    if (res?.data) {\r\n        return res.data\r\n    }\r\n};\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\n\r\nfunction useResetProfilePatient() {\r\n\r\n    const { personInfoForm, diseaseHistoryForm, patientForm, setFamilyMembersList, treatmentHistoryForm, searchPatientForm } = useGlobalContext()\r\n\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n\r\n    const setSavedDrawingCanvas = useStore((store) => store.setSavedDrawingCanvas)\r\n\r\n\r\n    const setDescriptionsCanvas = useStore((store) => store.setDescriptionsCanvas)\r\n\r\n    const setDataSourceVisitTable = useStore((store) => store.setDataSourceVisitTable)\r\n\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const setRecipeList = useStore((store) => store.setRecipeList)\r\n\r\n\r\n    const resetProfilePatient = () => {\r\n        searchPatientForm.resetFields()\r\n        patientForm.resetFields()\r\n        personInfoForm.resetFields()\r\n        diseaseHistoryForm.resetFields()\r\n        treatmentHistoryForm.resetFields()\r\n        setFamilyMembersList([])\r\n        setDataSourceDiseaseHistoryTable([])\r\n        setSavedDrawingCanvas({})\r\n        setDescriptionsCanvas({})\r\n        setDataSourceVisitTable([])\r\n        setDataSourceAnalysisTable([])\r\n        setDataSourceTreatmentTable([])\r\n        setRecipeList([])\r\n    }\r\n\r\n    return { resetProfilePatient }\r\n}\r\n\r\nexport default useResetProfilePatient","import dayjs from \"dayjs\"\r\nimport { fetchPatientId, postAnalyses, postMorby, postPersonInfo, postTreatment, postVisit } from \"../api/index.js\"\r\nimport { useGlobalContext } from \"../context/index.js\"\r\nimport { useStore } from \"../store/index.js\"\r\nimport { useState } from \"react\"\r\n\r\n\r\nfunction useSavePatient() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const {\r\n         patientForm,\r\n        personInfoForm,\r\n        diseaseHistoryForm,\r\n        familyMembersList,\r\n        treatmentHistoryForm,\r\n    } = useGlobalContext()\r\n\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const savedDrawingCanvas = useStore((store) => store.savedDrawingCanvas)\r\n    const descriptionsCanvas = useStore((store) => store.descriptionsCanvas)\r\n    const dataSourceVisitTable = useStore((store) => store.dataSourceVisitTable)\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const recipeList = useStore((store) => store.recipeList)\r\n\r\n\r\n    const savePersonInfo = (patientId) => {\r\n        const {\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n        } = patientForm.getFieldsValue()\r\n\r\n        let { birthDate, alkogol, smoke } = personInfoForm.getFieldsValue()\r\n\r\n        const sendObj = {\r\n            ...personInfoForm.getFieldsValue(),\r\n            birthDate: dayjs(birthDate).format('YYYY-MM-DD'),\r\n            alkogol: alkogol ? 1 : 0,\r\n            smoke: smoke ? 1 : 0,\r\n            patientName,\r\n            patientSurName,\r\n            patientPatronymic,\r\n            patientId,\r\n        };\r\n\r\n        postPersonInfo(sendObj);\r\n    }\r\n\r\n    const saveMorby = (patientId) => {\r\n        savedDrawingCanvas.deseaseImageDesc =\r\n            JSON.stringify(descriptionsCanvas);\r\n\r\n        const sendObj = {\r\n            ...diseaseHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            familyMembersList,\r\n            deseaseImagesList: savedDrawingCanvas,\r\n            deseaseHistoryDynamicsList: dataSourceDiseaseHistoryTable,\r\n        };\r\n        postMorby(sendObj);\r\n    }\r\n\r\n    const saveVisit = (patientId) => {\r\n        const sendObj = {\r\n            patientVisitsList: dataSourceVisitTable,\r\n            patientId\r\n        };\r\n        postVisit(sendObj);\r\n    }\r\n\r\n    const saveAnalyses = (patientId) => {\r\n        const sendObj = {\r\n            analyzesMediaList: dataSourceAnalysisTable,\r\n            patientId\r\n        };\r\n        postAnalyses(sendObj);\r\n    }\r\n\r\n    const saveTreatment = (patientId) => {\r\n        const sendObj = {\r\n            ...treatmentHistoryForm.getFieldsValue(),\r\n            patientId,\r\n            treatmentDynamics: dataSourceTreatmentTable,\r\n            recipeList,\r\n        };\r\n        postTreatment(sendObj);\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setIsLoading(true)\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 1000)\r\n\r\n        let id = patientForm.getFieldsValue().patientId;\r\n        let patientId;\r\n        if (id) {\r\n            patientId = id;\r\n        } else {\r\n            patientId = await fetchPatientId();\r\n        }\r\n        if (patientId) {\r\n            Promise.all([\r\n                savePersonInfo(patientId),\r\n                saveMorby(patientId),\r\n                saveVisit(patientId),\r\n                saveAnalyses(patientId),\r\n                saveTreatment(patientId),\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n    return { handleSave, isLoading }\r\n}\r\n\r\nexport default useSavePatient","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteVisitsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteVisitsTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction AnalysisTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.analysisTableSetting)\r\n    const setAnalysisTableSetting = useLocalStorageStore((store) => store.setAnalysisTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(analysisTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setAnalysisTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setAnalysisTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = analysisTableSetting\r\n            ? analysisTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [analysisTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTableSetting)","import { Box, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store'\r\nimport DeleteAnalysisTableRow from '../DeleteAnalysisTableRow'\r\nimport AnalysisTableSetting from './AnalysisTableSetting'\r\nimport dayjs from 'dayjs'\r\n\r\nfunction AnalysisTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const analysisTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return analysisTableSetting?.find(i => i.dataIndex === dataIndex) ? analysisTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const { analyzesType, analyzesSubType, date } = record\r\n        form.setFieldsValue({\r\n            ...record,\r\n            date: dayjs(date),\r\n            analyzesSubType: analyzesType === \"Other healthcare area\" ? \"\" : analyzesSubType\r\n        })\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast Type\",\r\n                dataIndex: \"analyzesType\",\r\n                key: \"analyzesType\",\r\n                isVisible: visible('analyzesType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub Type\",\r\n                dataIndex: \"analyzesSubType\",\r\n                key: \"analyzesSubType\",\r\n                isVisible: visible('analyzesSubType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"analyzesDesc\",\r\n                key: \"analyzesDesc\",\r\n                isVisible: visible('analyzesDesc'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Image\",\r\n                dataIndex: \"analyzesContentName\",\r\n                key: \"analyzesContentName\",\r\n                isVisible: visible('analyzesContentName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                width: 50,\r\n                align: 'center',\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = dataSourceAnalysisTable.filter(i => i.id !== row.id)\r\n                        setDataSourceAnalysisTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteAnalysisTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, analysisTableSetting, dataSourceAnalysisTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <AnalysisTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceAnalysisTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisTable)","import { Button, Image, Spin, Upload } from \"antd\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { UploadOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport sendRequest from \"../../../../../modules/api/sendRequest\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\n\r\n\r\nconst UploadForm = ({ form, selectedRowKey }) => {\r\n\r\n    const [imageUrl, setImageUrl] = useState();\r\n    const [imagePdfUrl, setImagePdfUrl] = useState();\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const showImage = (url) => {\r\n        if (url) {\r\n            const lastDotIndex = url.lastIndexOf(\".\");\r\n            const result = url.substring(lastDotIndex + 1);\r\n            if (result === 'pdf') {\r\n                setImageUrl(null)\r\n                setImagePdfUrl(url)\r\n            } else {\r\n                setImagePdfUrl(null)\r\n                setImageUrl(url)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowKey) {\r\n            const url = form.getFieldsValue().analyzesContentUrl\r\n            showImage(url)\r\n        } else {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n        }\r\n    }, [selectedRowKey])\r\n\r\n    const beforeUpload = async (file) => {\r\n        setIsLoading(true)\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        let res = await sendRequest(\"analysesImage\", formData, \"post\");\r\n        if (res?.data) {\r\n            const url = res.data\r\n            showImage(url)\r\n            form.setFieldsValue({ analyzesContentName: file.name });\r\n            form.setFieldsValue({ analyzesContentUrl: res.data });\r\n        }\r\n        setIsLoading(false)\r\n        return false;\r\n    };\r\n\r\n    const handleDeleteImg = () => {\r\n        try {\r\n            setImageUrl(null)\r\n            setImagePdfUrl(null)\r\n            form.setFieldsValue({ analyzesContentName: '', analyzesContentUrl: '' })\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    if(isLoading) {\r\n        return <Spin />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                imageUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <Image width={200} src={imageUrl} />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : imagePdfUrl ? (\r\n\r\n                    <Flex gap='1' m='3'>\r\n\r\n                        <embed src={imagePdfUrl} type=\"application/pdf\" width=\"100%\" height=\"600px\" \r\n                        />\r\n\r\n                        <Box onClick={handleDeleteImg} _hover={{ color: 'red' }} ml='-1' cursor='pointer' >\r\n                            <CloseCircleOutlined />\r\n                        </Box>\r\n\r\n                    </Flex>\r\n\r\n                ) : (\r\n\r\n                    <Upload\r\n                        accept=\".png,.pdf,.jpeg,.jpg\"\r\n                        listType=\"picture\"\r\n                        beforeUpload={beforeUpload}\r\n                    >\r\n                        {!imageUrl ? (\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                    </Upload>\r\n\r\n                )}\r\n        </>\r\n    );\r\n};\r\nexport default memo(UploadForm);\r\n","import React, { memo, useState } from 'react'\r\nimport { Button, DatePicker, Form, Input, Select, Space, message } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport UploadForm from '../UploadForm';\r\nimport { useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\nimport sendRequest from '../../../../../modules/api/sendRequest';\r\n\r\nconst breastSelectOpnions = [\r\n    \"USM\",\r\n    \"Mammography\",\r\n    \"Tomosynthesis\",\r\n    \"MRT\",\r\n    \"KT\",\r\n    \"Biopsy\",\r\n    \"Сlips\",\r\n];\r\nconst other = [\r\n    \"Blood analysis\",\r\n    \"USM\",\r\n    \"X-ray\",\r\n    \"Bone osten\",\r\n    \"Bone naf\",\r\n    \"KT\",\r\n    \"Pet\",\r\n    \"Echocardiography\",\r\n    \"Electrocardiography\",\r\n    \"PET-CT\",\r\n    \"PET-MRI\",\r\n];\r\n\r\nconst fetchAnalysisId = async () => {\r\n  let res = await sendRequest('analysid')\r\n  if (res?.data) {\r\n    message.success()\r\n    return res.data\r\n  } else return 0\r\n}\r\n\r\nfunction AnalysisFormBlok(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const dataSourceAnalysisTable = useStore((store) => store.dataSourceAnalysisTable)\r\n    const setDataSourceAnalysisTable = useStore((store) => store.setDataSourceAnalysisTable)\r\n\r\n    const onFinish = async (values) => {\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceAnalysisTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        const { date } = values\r\n                        return { \r\n                            ...values,\r\n                            date: dayjs(date).format('YYYY-MM-DD HH:mm:ss'),\r\n                         }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceAnalysisTable(newData)\r\n            } else {\r\n                setIsLoading(true)\r\n                let analyzesId = await fetchAnalysisId()\r\n                values.analyzesId = analyzesId\r\n                values.id = analyzesId\r\n                values.key = analyzesId\r\n                values.date = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n                setDataSourceAnalysisTable([...dataSourceAnalysisTable, values])\r\n                setIsLoading(false)\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='date'>\r\n                    <DatePicker />\r\n                </Form.Item>\r\n\r\n                <Form.Item label='Analyzes type' name=\"analyzesType\">\r\n                    <Select\r\n                        allowClear\r\n                    >\r\n                        <Select.Option value=\"Breast\">Breast</Select.Option>\r\n                        <Select.Option value=\"Other analysis\">Other analysis</Select.Option>\r\n                        <Select.Option value=\"Other healthcare area\">\r\n                            Other healthcare area\r\n                        </Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesType !== currentValues.analyzesType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n\r\n                        let selectOptions = []\r\n\r\n                        if (getFieldValue('analyzesType') === 'Breast') {\r\n                            selectOptions = breastSelectOpnions\r\n                        } else if (getFieldValue('analyzesType') === 'Other analysis') {\r\n                            selectOptions = other\r\n                        } else if (getFieldValue('analyzesType') === 'Other healthcare area') {\r\n                            return ''\r\n                        }\r\n\r\n                        return (\r\n                            <Form.Item label=\"Analysis sub type\" name=\"analyzesSubType\">\r\n\r\n                                <Select allowClear >\r\n                                    {\r\n                                        selectOptions.map((i) => (\r\n                                            <Select.Option key={i} value={i}>\r\n                                                {i}\r\n                                            </Select.Option>\r\n                                        ))\r\n                                    }\r\n                                </Select>\r\n\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n                    }\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentUrl\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name=\"analyzesContentName\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='analysisTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n\r\n                <Form.Item hidden name='analyzesContentName'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item hidden name='analyzesContentUrl'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='analysisTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                            loading={isLoading}\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.analyzesSubType !== currentValues.analyzesSubType}\r\n                >\r\n                    {({ getFieldValue }) => {\r\n                        let isShow = getFieldValue('analyzesSubType')\r\n\r\n                        if (isShow) {\r\n                            return (\r\n                                <UploadForm form={form} selectedRowKey={selectedRowKey} />\r\n                            )\r\n                        } else return ''\r\n                    }\r\n                    }\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(AnalysisFormBlok)","import React, { memo, useState } from 'react'\r\nimport { Box } from '@chakra-ui/react'\r\nimport AnalysisTable from './modules/components/AnalysisTable';\r\nimport AnalysisFormBlok from './modules/components/AnalysisFormBlok';\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm';\r\nimport { Form } from 'antd';\r\n\r\nfunction Analysis() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <AnalysisFormBlok selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <AnalysisTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Analysis)"],"names":["DeleteTableRow","_ref","onClick","_jsx","Typography","children","Box","color","e","stopPropagation","Popconfirm","title","okText","cancelText","onConfirm","DeleteOutlined","memo","ProfilePatientForm","_useGlobalContext","useGlobalContext","patientForm","inPatientCollapse","setInPatientCollapse","_useMediaQuery","useMediaQuery","isLargerThan600","_slicedToArray","resetProfilePatient","useResetProfilePatient","_useSavePatient","useSavePatient","handleSave","isLoading","onFieldsChange","useStore","store","boxShadow","p","bg","borderRadius","_jsxs","Form","id","onFinish","form","layout","label","Space","noStyle","name","Input","placeholder","InputNumber","readOnly","addonBefore","Button","type","prev","icon","ArrowsAltOutlined","ShrinkOutlined","Collapse","in","animateOpacity","htmlType","loading","danger","TableSetting","items","isOpen","onOpenChange","cursor","Dropdown","trigger","menu","open","IconButton","variant","size","isRound","SettingOutlined","messageOnSave","res","nameFunc","message","content","key","duration","fetchPatientId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sendRequest","sent","abrupt","data","t0","stop","apply","arguments","postPersonInfo","_ref2","_callee2","obj","_context2","_x","postMorby","_ref3","_callee3","_context3","_x2","postVisit","_ref4","_callee4","_context4","_x3","postAnalyses","_ref5","_callee5","_context5","_x4","postTreatment","_ref6","_callee6","_context6","_x5","putVisitFormCalendar","_ref7","_callee7","_context7","_x6","controlPatient","_ref8","_callee8","patientId","_context8","concat","_x7","handleAddVisit","_ref10","_callee9","_ref9","sendObj","patientName","patientSurName","patientPatronymic","visitDate","phoneNumber","status","visitReason","sendObjVisit","sendPersonInfo","_context9","then","patientVisitsList","_x8","fetchPathologistsPlace","_ref11","_callee10","_context10","fetchManagersPlace","_ref12","_callee11","_context11","deepCopy","JSON","parse","stringify","personInfoForm","diseaseHistoryForm","setFamilyMembersList","treatmentHistoryForm","searchPatientForm","setDataSourceDiseaseHistoryTable","setSavedDrawingCanvas","setDescriptionsCanvas","setDataSourceVisitTable","setDataSourceAnalysisTable","setDataSourceTreatmentTable","setRecipeList","resetFields","_useState","useState","_useState2","setIsLoading","familyMembersList","dataSourceDiseaseHistoryTable","savedDrawingCanvas","descriptionsCanvas","dataSourceVisitTable","dataSourceAnalysisTable","dataSourceTreatmentTable","recipeList","savePersonInfo","_patientForm$getField","getFieldsValue","_personInfoForm$getFi","birthDate","alkogol","smoke","_objectSpread","dayjs","format","saveMorby","deseaseImageDesc","deseaseImagesList","deseaseHistoryDynamicsList","saveVisit","saveAnalyses","analyzesMediaList","saveTreatment","treatmentDynamics","setTimeout","Promise","all","DeleteVisitsTableRow","handleDelete","AnalysisTableSetting","columns","setIsOpen","analysisTableSetting","useLocalStorageStore","setAnalysisTableSetting","onChangeCheckbox","dataIndex","target","isVisible","checked","copyCTS","forEach","i","_toConsumableArray","useEffect","colArr","map","useMemo","Checkbox","onChange","defaultChecked","AnalysisTable","props","selectedRowKey","setSelectedRowKey","isLargerThan400","diseaseHistoryTableSetting","setIsFieldsChange","visible","defaultVisible","length","undefined","find","ellipsis","width","render","value","Tooltip","placement","align","row","index","DeleteAnalysisTableRow","newData","filter","display","flexDirection","alignSelf","Table","bordered","scroll","x","window","innerHeight","pagination","dataSource","rowClassName","record","onRow","analyzesType","analyzesSubType","date","setFieldsValue","onRowTable","UploadForm","imageUrl","setImageUrl","_useState3","_useState4","imagePdfUrl","setImagePdfUrl","_useState5","_useState6","showImage","url","lastDotIndex","lastIndexOf","substring","analyzesContentUrl","beforeUpload","file","formData","FormData","append","analyzesContentName","handleDeleteImg","error","console","log","Spin","_Fragment","Flex","gap","m","Image","src","_hover","ml","CloseCircleOutlined","height","Upload","accept","listType","UploadOutlined","breastSelectOpnions","other","fetchAnalysisId","AnalysisFormBlok","values","analyzesId","SimpleGrid","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","DatePicker","Select","allowClear","shouldUpdate","prevValues","currentValues","getFieldValue","selectOptions","showCount","maxLength","rows","Analysis","_Form$useForm","my","border"],"sourceRoot":""}